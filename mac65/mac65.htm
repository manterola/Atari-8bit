<html>
<head><title>MAC/65 Manual</title>
<meta name="meta-generator" content="atari">
<meta name="audience" content="developers">
<meta name="author" content="SysOp Fox-1">
<meta name="copyright" content="(none)">
<meta name="page-topic" content="education">
<meta name="page-type" content="help">
<meta name="robots" content="index, follow">
<meta name="description" content="The MAC/65 manual in HTML format. One of the best ATARI 8-Bit macro-assemblers for the 6502c processors (and 65c02). Seems if there is an Apple II version also.">
<meta name="keywords" content="atari, atari xl, atari xe, atari 8bit, apple, 6502, 6502c, 65c02, mac65, oss, assembler, apple ii, programming,  mac/65, coding, assembling, disk, cross, xref, editor, freaks, text, cartridge, machine code, source">
<meta name="keywords" content="compile, develope, computer language, binair, binary, byte, bit, nibble, address, label, macro, location, opcode, lda, sta, cmp, ldy, sty, cpy, ldx, stx, cpx, bmi, beq, bpl, bne, nop, .byte, .word, directive, printer, list, atari">
<meta name="revisit-after" content="40 days">
</head>
<body background="decor/bg_mac.gif" bgcolor="#e0e0f0">

<a name="#topofpage"></a>
<table width="96%" align="center" border="1" bgcolor="#063406"><tr align="center"><td>
<table width="100%" bgcolor="#063406">
<tr align="center"><td><a style="font-size: xx-large; font-family: Arial Black; color: #d2ea32;">MAC/65&nbsp;</a></td>
<td align="center"><img src="decor/6502_ani.gif" width=64 height=32 alt="Atari 6502"></td>
<td align="right" valign="bottom">
<a style="font-size: xx-small; font-family: Comic Sans MS; color: #a6ffa6;">
(HTML conversion by SysOp Fox-1, November 1999)</a>
</td></tr></table></td></tr></table>

<br><hr width="100%" size="2" style="color: #8668f5;"><br>


<table width="80%" align="center" bgcolor="#d8d8f0" border="1"><tr align="center"><td>
<table width="100%" cellspacing="14" cellpadding="2" align="center" border="0">
<tr align="center"><td bgcolor="#d2d2ff"><a style="color: #90100a; font-family: Courier New; font-weight: bold; font-style: normal; text-decoration: none; text-align: center; font-size: small;">
Note from Fox-1:<br>This manual is based on the DISK-version of the MAC/65 assembler. &nbsp;Text printed on a </a>
<a style="color: #3f0008; font-family: Arial Black; font-weight: normal; font-style: normal; text-decoration: none; text-align: center; font-size: xx-small; background-color: #e8e8b0;">
&nbsp;YELLOW </a>
<a style="color: #90100a; font-family: Courier New; font-weight: bold; font-style: normal; text-decoration: none; text-align: center; font-size: small;"> 
&nbsp;background is additional information taken from the CARTRIDGE-version (Rev 1.2) of the manual
of the MAC/65, and is typed up by an anonymous user who feels that this info is useful (like I do) for the ATARI community.
</a></td></tr>
<tr><td align="center"><a style="color: #340808; font-family: Courier; font-style: normal; text-decoration: none; text-align: center; font-size: x-small;">
The original programs, disks, and manuals comprising MAC/65 are Copyright (c) 1982, 1983 by Optimized Systems Software, Inc.
and Stephen D. Lawrow, &nbsp;1221-B Kentwood Ave. San Jose, CA 95129 USA, Telephone (408) 446-3099
</a></td></tr></table></td></tr></table>

<a name="tableofcontents"></a>

<br><table align="center">
<tr><td align="center"><a style="color: #0404a0; ont-size: x-small; font-family: system; font-weight: normal; font-style: normal; text-decoration: none; text-align: center;" href="http://www7.brinkster.com/atari/proginfo.htm"><img src="decor/l_arrow.gif" alt="Programming Info Index" border=0 height=13 width=13>
Programming Info Index&nbsp; &nbsp; &nbsp; &nbsp;</a></td>
<td><a style="color: #0404a0; font-size: x-small; font-family: system; font-weight: normal; font-style: normal; text-decoration: none; text-align: center;" href="http://www7.brinkster.com/atari/a8men.htm"><img src="decor/u_arrow.gif" alt="To Main-Index" border=0 height=13 width=13>
To Main-Index</a></td></tr></table>


<hr width="100%" size="2" style="color: #8668f5;">

<table width="100%"><tr><td align="right">
<table width="98%"><tr><td>

<a style="font-size: large; font-family: Arial Black; color: #a02222; font-weight: bold;">
TABLE OF CONTENTS<br></a>
<br>
<a style="font-size: large; font-family: Arial; color: #066006; font-weight: bold; text-decoration: underline; background-color: #f0f0b0;" href="mac65.htm#preface">
Preface<br></a><br>
<a style="font-size: large; font-family: Arial; color: #066006; font-weight: bold; text-decoration: underline; background-color: #f0f0b0;" href="mac65.htm#trademarks">
Trademarks<br></a><br>
<a style="font-size: large; font-family: Arial; color: #127012; font-weight: bold; text-decoration: underline;" href="mac65.htm#introduction">
Introduction<br></a>
&nbsp; <a style="color: #0404a0; font-size: small; font-family: sans-serif; font-weight: normal; font-style: normal; text-decoration: none;" href="mac65.htm#startup"><img src="decor/r_arrow.gif" alt="Start-Up" border=0 height=13 width=13>
Start Up</a><br>
&nbsp; <a style="color: #0404a0; font-size: small; font-family: sans-serif; font-weight: normal; font-style: normal; text-decoration: none;" href="mac65.htm#warmstart"><img src="decor/r_arrow.gif" alt="Warm-Start" border=0 height=13 width=13>
Warm Start<br></a>
&nbsp; <a style="color: #0404a0; font-size: small; font-family: sans-serif; font-weight: normal; font-style: normal; text-decoration: none;" href="mac65.htm#backupcopy"><img src="decor/r_arrow.gif" alt="Back-Up-Copy" border=0 height=13 width=13>
Back up Copy<br></a>
&nbsp; <a style="color: #0404a0; font-size: small; font-family: sans-serif; font-weight: normal; font-style: normal; text-decoration: none;" href="mac65.htm#syntax"><img src="decor/r_arrow.gif" alt="Syntax" border=0 height=13 width=13>
Syntax</a><br>
<br><br>
<a style="font-size: large; font-family: Arial; color: #127012; font-weight: bold; text-decoration: underline;" href="mac65.htm#chapter1">
Chapter 1 -- The Editor</a>
<br>
&nbsp; <a style="color: #0404a0; font-size: small; font-family: sans-serif; font-weight: normal; font-style: normal; text-decoration: none;" href="mac65.htm#generaleditorusage"><img src="decor/r_arrow.gif" alt="General Editor Usage" border=0 height=13 width=13>
1.1 &nbsp; General Editor Usage</a><br>
&nbsp; <a style="color: #0404a0; font-size: small; font-family: sans-serif; font-weight: normal; font-style: normal; text-decoration: none;" href="mac65.htm#textmode"><img src="decor/r_arrow.gif" alt="Text Mode" border=0 height=13 width=13>
1.2 &nbsp; TEXT Mode</a><br>
&nbsp; <a style="color: #0404a0; font-size: small; font-family: sans-serif; font-weight: normal; font-style: normal; text-decoration: none;" href="mac65.htm#editmode"><img src="decor/r_arrow.gif" alt="Edit Mode" border=0 height=13 width=13>
1.3 &nbsp; EDIT Mode</a><br>
<br><br>
<a style="font-size: large; font-family: Arial; color: #127012; font-weight: bold; text-decoration: underline;" href="mac65.htm#chapter2">
Chapter 2 -- Editor Commands</a>
<br>
&nbsp; <a style="color: #0404a0; font-size: small; font-family: sans-serif; font-weight: normal; font-style: normal; text-decoration: none;" href="mac65.htm#asm"><img src="decor/r_arrow.gif" alt="ASM" border=0 height=13 width=13>
2.1 &nbsp;&nbsp; ASM</a><br>
&nbsp; <a style="color: #0404a0; font-size: small; font-family: sans-serif; font-weight: normal; font-style: normal; text-decoration: none;" href="mac65.htm#bload"><img src="decor/r_arrow.gif" alt="BLOAD" border=0 height=13 width=13>
2.2 &nbsp;&nbsp; BLOAD</a><br>
&nbsp; <a style="color: #0404a0; font-size: small; font-family: sans-serif; font-weight: normal; font-style: normal; text-decoration: none;" href="mac65.htm#bsave"><img src="decor/r_arrow.gif" alt="BSAVE" border=0 height=13 width=13>
2.3 &nbsp;&nbsp; BSAVE</a><br>
&nbsp; <a style="color: #0404a0; font-size: small; font-family: sans-serif; font-weight: normal; font-style: normal; text-decoration: none;" href="mac65.htm#bye"><img src="decor/r_arrow.gif" alt="BYE" border=0 height=13 width=13>
2.4 &nbsp;&nbsp; BYE</a><br>
&nbsp; <a style="color: #0404a0; font-size: small; font-family: sans-serif; font-weight: normal; font-style: normal; text-decoration: none;" href="mac65.htm#changememory"><img src="decor/r_arrow.gif" alt="Change Memory" border=0 height=13 width=13>
2.5 &nbsp;&nbsp; C &nbsp; (Change Memory)</a><br>
&nbsp; <a style="color: #0404a0; font-size: small; font-family: sans-serif; font-weight: normal; font-style: normal; text-decoration: none;" href="mac65.htm#displaymemory"><img src="decor/r_arrow.gif" alt="Display Memory" border=0 height=13 width=13>
2.6 &nbsp;&nbsp; D &nbsp; (Display Memory)</a><br>


&nbsp; <a style="color: #040480; font-size: small; font-family: sans-serif; font-weight: normal; font-style: normal; text-decoration: none; background-color: #f0f0b0;" href="mac65.htm#ddt"><img src="decor/r_arrow.gif" alt="DDT" border=0 height=13 width=13>
2.x &nbsp;&nbsp; DDT</a><br>


&nbsp; <a style="color: #0404a0; font-size: small; font-family: sans-serif; font-weight: normal; font-style: normal; text-decoration: none;" href="mac65.htm#del"><img src="decor/r_arrow.gif" alt="DEL" border=0 height=13 width=13>
2.7 &nbsp;&nbsp; DEL</a><br>
&nbsp; <a style="color: #0404a0; font-size: small; font-family: sans-serif; font-weight: normal; font-style: normal; text-decoration: none;" href="mac65.htm#dos"><img src="decor/r_arrow.gif" alt="DOS" border=0 height=13 width=13>
2.8 &nbsp;&nbsp; DOS</a><br>
&nbsp; <a style="color: #0404a0; font-size: small; font-family: sans-serif; font-weight: normal; font-style: normal; text-decoration: none;" href="mac65.htm#enter"><img src="decor/r_arrow.gif" alt="ENTER" border=0 height=13 width=13>
2.9 &nbsp;&nbsp; ENTER</a><br>
&nbsp; <a style="color: #0404a0; font-size: small; font-family: sans-serif; font-weight: normal; font-style: normal; text-decoration: none;" href="mac65.htm#find"><img src="decor/r_arrow.gif" alt="FIND" border=0 height=13 width=13>
2.10&nbsp; FIND</a><br>
&nbsp; <a style="color: #0404a0; font-size: small; font-family: sans-serif; font-weight: normal; font-style: normal; text-decoration: none;" href="mac65.htm#list"><img src="decor/r_arrow.gif" alt="LIST" border=0 height=13 width=13>
2.11&nbsp; LIST</a><br>
&nbsp; <a style="color: #0404a0; font-size: small; font-family: sans-serif; font-weight: normal; font-style: normal; text-decoration: none;" href="mac65.htm#load"><img src="decor/r_arrow.gif" alt="LOAD" border=0 height=13 width=13>
2.12&nbsp; LOAD</a><br>
&nbsp; <a style="color: #0404a0; font-size: small; font-family: sans-serif; font-weight: normal; font-style: normal; text-decoration: none;" href="mac65.htm#lomem"><img src="decor/r_arrow.gif" alt="LOMEM" border=0 height=13 width=13>
2.13&nbsp; LOMEM</a><br>
&nbsp; <a style="color: #0404a0; font-size: small; font-family: sans-serif; font-weight: normal; font-style: normal; text-decoration: none;" href="mac65.htm#new"><img src="decor/r_arrow.gif" alt="NEW" border=0 height=13 width=13>
2.14&nbsp; NEW</a><br>
&nbsp; <a style="color: #0404a0; font-size: small; font-family: sans-serif; font-weight: normal; font-style: normal; text-decoration: none;" href="mac65.htm#num"><img src="decor/r_arrow.gif" alt="NUM" border=0 height=13 width=13>
2.15&nbsp; NUM</a><br>
&nbsp; <a style="color: #0404a0; font-size: small; font-family: sans-serif; font-weight: normal; font-style: normal; text-decoration: none;" href="mac65.htm#print"><img src="decor/r_arrow.gif" alt="PRINT" border=0 height=13 width=13>
2.16&nbsp; PRINT</a><br>
&nbsp; <a style="color: #0404a0; font-size: small; font-family: sans-serif; font-weight: normal; font-style: normal; text-decoration: none;" href="mac65.htm#ren"><img src="decor/r_arrow.gif" alt="REN" border=0 height=13 width=13>
2.17&nbsp; REN</a><br>
&nbsp; <a style="color: #0404a0; font-size: small; font-family: sans-serif; font-weight: normal; font-style: normal; text-decoration: none;" href="mac65.htm#rep"><img src="decor/r_arrow.gif" alt="REP" border=0 height=13 width=13>
2.18&nbsp; REP</a><br>
&nbsp; <a style="color: #0404a0; font-size: small; font-family: sans-serif; font-weight: normal; font-style: normal; text-decoration: none;" href="mac65.htm#save"><img src="decor/r_arrow.gif" alt="SAVE" border=0 height=13 width=13>
2.19&nbsp; SAVE</a><br>
&nbsp; <a style="color: #0404a0; font-size: small; font-family: sans-serif; font-weight: normal; font-style: normal; text-decoration: none;" href="mac65.htm#size"><img src="decor/r_arrow.gif" alt="SIZE" border=0 height=13 width=13>
2.20&nbsp; SIZE</a><br>
&nbsp; <a style="color: #0404a0; font-size: small; font-family: sans-serif; font-weight: normal; font-style: normal; text-decoration: none;" href="mac65.htm#text"><img src="decor/r_arrow.gif" alt="TEXT" border=0 height=13 width=13>
2.21&nbsp; TEXT</a><br>
&nbsp; <a style="color: #0404a0; font-size: small; font-family: sans-serif; font-weight: normal; font-style: normal; text-decoration: none;" href="mac65.htm#hexdecconvert"><img src="decor/r_arrow.gif" alt="HEX/DEC Convert" border=0 height=13 width=13>
2.22&nbsp; ? &nbsp; (hex/dec convert)</a><br>
<br><br>
<a style="font-size: large; font-family: Arial; color: #127012; font-weight: bold; text-decoration: underline;" href="mac65.htm#chapter3">
Chapter 3 -- The Macro Assembler</a>
<br>
&nbsp; <a style="color: #0404a0; font-size: small; font-family: sans-serif; font-weight: normal; font-style: normal; text-decoration: none;" href="mac65.htm#assemblerinput"><img src="decor/r_arrow.gif" alt="Assembler Input" border=0 height=13 width=13>
3.1 &nbsp; Assembler Input</a><br>
&nbsp; <a style="color: #0404a0; font-size: small; font-family: sans-serif; font-weight: normal; font-style: normal; text-decoration: none;" href="mac65.htm#instructionformat"><img src="decor/r_arrow.gif" alt="Instruction Format" border=0 height=13 width=13>
3.2 &nbsp; Instruction Format</a><br>
&nbsp; <a style="color: #0404a0; font-size: small; font-family: sans-serif; font-weight: normal; font-style: normal; text-decoration: none;" href="mac65.htm#labels"><img src="decor/r_arrow.gif" alt="Lables" border=0 height=13 width=13>
3.3 &nbsp; Labels</a><br>
&nbsp; <a style="color: #0404a0; font-size: small; font-family: sans-serif; font-weight: normal; font-style: normal; text-decoration: none;" href="mac65.htm#operands"><img src="decor/r_arrow.gif" alt="Operands" border=0 height=13 width=13>
3.4 &nbsp; Operands</a><br>
&nbsp; <a style="color: #0404a0; font-size: small; font-family: sans-serif; font-weight: normal; font-style: normal; text-decoration: none;" href="mac65.htm#operators"><img src="decor/r_arrow.gif" alt="Operators" border=0 height=13 width=13>
3.5 &nbsp; Operators</a><br>

&nbsp; <a style="color: #0404a0; font-size: small; font-family: sans-serif; font-weight: normal; font-style: normal; text-decoration: none;" href="mac65.htm#assemblerexpressions"><img src="decor/r_arrow.gif" alt="Assembler Expressions" border=0 height=13 width=13>
3.6 &nbsp; Assembler Expressions</a><br>
&nbsp; <a style="color: #0404a0; font-size: small; font-family: sans-serif; font-weight: normal; font-style: normal; text-decoration: none;" href="mac65.htm#operatorprecedence"><img src="decor/r_arrow.gif" alt="Operator Precedence" border=0 height=13 width=13>
3.7 &nbsp; Operator Precedence</a><br>
&nbsp; <a style="color: #0404a0; font-size: small; font-family: sans-serif; font-weight: normal; font-style: normal; text-decoration: none;" href="mac65.htm#numericconstants"><img src="decor/r_arrow.gif" alt="Numeric Constants" border=0 height=13 width=13>
3.8 &nbsp; Numeric Constants</a><br>
&nbsp; <a style="color: #0404a0; font-size: small; font-family: sans-serif; font-weight: normal; font-style: normal; text-decoration: none;" href="mac65.htm#strings"><img src="decor/r_arrow.gif" alt="Strings" border=0 height=13 width=13>
3.9 &nbsp; Strings</a><br>
<br><br>
<a style="font-size: large; font-family: Arial; color: #127012; font-weight: bold; text-decoration: underline;" href="mac65.htm#chapter4">
Chapter 4 -- Directives</a>
<br>
&nbsp; <a style="color: #0404a0; font-size: small; font-family: sans-serif; font-weight: normal; font-style: normal; text-decoration: none;" href="mac65.htm#*="><img src="decor/r_arrow.gif" alt="*=" border=0 height=13 width=13>
4.1 &nbsp;&nbsp; *=</a><br>
&nbsp; <a style="color: #0404a0; font-size: small; font-family: sans-serif; font-weight: normal; font-style: normal; text-decoration: none;" href="mac65.htm#="><img src="decor/r_arrow.gif" alt="=" border=0 height=13 width=13>
4.2 &nbsp;&nbsp; =</a><br>
&nbsp; <a style="color: #0404a0; font-size: small; font-family: sans-serif; font-weight: normal; font-style: normal; text-decoration: none;" href="mac65.htm#.="><img src="decor/r_arrow.gif" alt=".=" border=0 height=13 width=13>
4.3 &nbsp;&nbsp; .=</a><br>
&nbsp; <a style="color: #0404a0; font-size: small; font-family: sans-serif; font-weight: normal; font-style: normal; text-decoration: none;" href="mac65.htm#.byte"><img src="decor/r_arrow.gif" alt=".BYTE/.SBYTE" border=0 height=13 width=13>
4.4 &nbsp;&nbsp; .BYTE &nbsp; (and .SBYTE)</a><br>
&nbsp; <a style="color: #0404a0; font-size: small; font-family: sans-serif; font-weight: normal; font-style: normal; text-decoration: none;" href="mac65.htm#.cbyte"><img src="decor/r_arrow.gif" alt=".CBYTE" border=0 height=13 width=13>
4.5 &nbsp;&nbsp; .CBYTE</a><br>
&nbsp; <a style="color: #0404a0; font-size: small; font-family: sans-serif; font-weight: normal; font-style: normal; text-decoration: none;" href="mac65.htm#.dbyte"><img src="decor/r_arrow.gif" alt=".DBYTE" border=0 height=13 width=13>
4.6 &nbsp;&nbsp; .DBYTE</a><br>


&nbsp; <a style="color: #040480; font-size: small; font-family: sans-serif; font-weight: normal; font-style: normal; text-decoration: none; background-color: #f0f0b0;" href="mac65.htm#.ds"><img src="decor/r_arrow.gif" alt=".DS" border=0 height=13 width=13>
4.x &nbsp;&nbsp; .DS</a><br>



&nbsp; <a style="color: #0404a0; font-size: small; font-family: sans-serif; font-weight: normal; font-style: normal; text-decoration: none;" href="mac65.htm#.else"><img src="decor/r_arrow.gif" alt=".ELSE" border=0 height=13 width=13>
4.7 &nbsp;&nbsp; .ELSE</a><br>
&nbsp; <a style="color: #0404a0; font-size: small; font-family: sans-serif; font-weight: normal; font-style: normal; text-decoration: none;" href="mac65.htm#.end"><img src="decor/r_arrow.gif" alt=".END" border=0 height=13 width=13>
4.8 &nbsp;&nbsp; .END</a><br>
&nbsp; <a style="color: #0404a0; font-size: small; font-family: sans-serif; font-weight: normal; font-style: normal; text-decoration: none;" href="mac65.htm#.endif"><img src="decor/r_arrow.gif" alt=".ENDIF" border=0 height=13 width=13>
4.9 &nbsp;&nbsp; .ENDIF</a><br>
&nbsp; <a style="color: #0404a0; font-size: small; font-family: sans-serif; font-weight: normal; font-style: normal; text-decoration: none;" href="mac65.htm#.error"><img src="decor/r_arrow.gif" alt=".ERROR" border=0 height=13 width=13>
4.10&nbsp; .ERROR</a><br>
&nbsp; <a style="color: #0404a0; font-size: small; font-family: sans-serif; font-weight: normal; font-style: normal; text-decoration: none;" href="mac65.htm#.float"><img src="decor/r_arrow.gif" alt=".FLOAT" border=0 height=13 width=13>
4.11&nbsp; .FLOAT</a><br>
&nbsp; <a style="color: #0404a0; font-size: small; font-family: sans-serif; font-weight: normal; font-style: normal; text-decoration: none;" href="mac65.htm#.if"><img src="decor/r_arrow.gif" alt=".IF" border=0 height=13 width=13>
4.12&nbsp; .IF</a><br>
&nbsp; <a style="color: #0404a0; font-size: small; font-family: sans-serif; font-weight: normal; font-style: normal; text-decoration: none;" href="mac65.htm#.include"><img src="decor/r_arrow.gif" alt=".INCLUDE" border=0 height=13 width=13>
4.13&nbsp; .INCLUDE</a><br>
&nbsp; <a style="color: #0404a0; font-size: small; font-family: sans-serif; font-weight: normal; font-style: normal; text-decoration: none;" href="mac65.htm#.local"><img src="decor/r_arrow.gif" alt=".LOCAL" border=0 height=13 width=13>
4.14&nbsp; .LOCAL</a><br>
&nbsp; <a style="color: #0404a0; font-size: small; font-family: sans-serif; font-weight: normal; font-style: normal; text-decoration: none;" href="mac65.htm#.opt"><img src="decor/r_arrow.gif" alt=".OPT" border=0 height=13 width=13>
4.15&nbsp; .OPT</a><br>
&nbsp; <a style="color: #0404a0; font-size: small; font-family: sans-serif; font-weight: normal; font-style: normal; text-decoration: none;" href="mac65.htm#.page"><img src="decor/r_arrow.gif" alt=".PAGE" border=0 height=13 width=13>
4.16&nbsp; .PAGE</a><br>
&nbsp; <a style="color: #0404a0; font-size: small; font-family: sans-serif; font-weight: normal; font-style: normal; text-decoration: none;" href="mac65.htm#.sbyte"><img src="decor/r_arrow.gif" alt=".SBYTE" border=0 height=13 width=13>
4.17&nbsp; .SBYTE &nbsp; (see also .BYTE)</a><br>
&nbsp; <a style="color: #0404a0; font-size: small; font-family: sans-serif; font-weight: normal; font-style: normal; text-decoration: none;" href="mac65.htm#.set"><img src="decor/r_arrow.gif" alt=".SET" border=0 height=13 width=13>
4.18&nbsp; .SET</a><br>
&nbsp; <a style="color: #0404a0; font-size: small; font-family: sans-serif; font-weight: normal; font-style: normal; text-decoration: none;" href="mac65.htm#.tab"><img src="decor/r_arrow.gif" alt=".TAB" border=0 height=13 width=13>
4.19&nbsp; .TAB</a><br>
&nbsp; <a style="color: #0404a0; font-size: small; font-family: sans-serif; font-weight: normal; font-style: normal; text-decoration: none;" href="mac65.htm#.title"><img src="decor/r_arrow.gif" alt=".TITLE" border=0 height=13 width=13>
4.20 &nbsp; .TITLE</a><br>
&nbsp; <a style="color: #0404a0; font-size: small; font-family: sans-serif; font-weight: normal; font-style: normal; text-decoration: none;" href="mac65.htm#.word"><img src="decor/r_arrow.gif" alt=".WORD" border=0 height=13 width=13>
4.21 &nbsp; .WORD</a><br>
<br><br>
<a style="font-size: large; font-family: Arial; color: #127012; font-weight: bold; text-decoration: underline;" href="mac65.htm#chapter5">
Chapter 5 -- Macro Facility</a>
<br>
&nbsp; <a style="color: #0404a0; font-size: small; font-family: sans-serif; font-weight: normal; font-style: normal; text-decoration: none;" href="mac65.htm#.endm"><img src="decor/r_arrow.gif" alt=".ENDM" border=0 height=13 width=13>
5.1 &nbsp;&nbsp; .ENDM</a><br>
&nbsp; <a style="color: #0404a0; font-size: small; font-family: sans-serif; font-weight: normal; font-style: normal; text-decoration: none;" href="mac65.htm#.macro"><img src="decor/r_arrow.gif" alt=".MACRO" border=0 height=13 width=13>
5.2 &nbsp;&nbsp; .MACRO</a><br>
&nbsp; <a style="color: #0404a0; font-size: small; font-family: sans-serif; font-weight: normal; font-style: normal; text-decoration: none;" href="mac65.htm#macroexpansionpart1"><img src="decor/r_arrow.gif" alt="Macro Expansion Part 1" border=0 height=13 width=13>
5.3 &nbsp;&nbsp; Macro Expansion, part 1</a><br>
&nbsp; <a style="color: #0404a0; font-size: small; font-family: sans-serif; font-weight: normal; font-style: normal; text-decoration: none;" href="mac65.htm#macroparameters"><img src="decor/r_arrow.gif" alt="Macro Parameters" border=0 height=13 width=13>
5.4 &nbsp;&nbsp; Macro Parameters</a><br>
&nbsp; <a style="color: #0404a0; font-size: small; font-family: sans-serif; font-weight: normal; font-style: normal; text-decoration: none;" href="mac65.htm#macroexpansionpart2"><img src="decor/r_arrow.gif" alt="Macro Expansion Part 2" border=0 height=13 width=13>
5.5 &nbsp;&nbsp; Macro Expansion, part 2</a><br>
&nbsp; <a style="color: #0404a0; font-size: small; font-family: sans-serif; font-weight: normal; font-style: normal; text-decoration: none;" href="mac65.htm#macrostrings"><img src="decor/r_arrow.gif" alt="Macro Strings" border=0 height=13 width=13>
5.6 &nbsp;&nbsp; Macro Strings</a><br>
&nbsp; <a style="color: #0404a0; font-size: small; font-family: sans-serif; font-weight: normal; font-style: normal; text-decoration: none;" href="mac65.htm#somemacrohints"><img src="decor/r_arrow.gif" alt="Some Macro Hints" border=0 height=13 width=13>
5.7 &nbsp;&nbsp; Some Macro Hints</a><br>
&nbsp; <a style="color: #0404a0; font-size: small; font-family: sans-serif; font-weight: normal; font-style: normal; text-decoration: none;" href="mac65.htm#acomplexmacroexample"><img src="decor/r_arrow.gif" alt="A complex Macro Example" border=0 height=13 width=13>
5.8 &nbsp;&nbsp; A complex Macro Example</a><br>
<br><br>
<a style="font-size: large; font-family: Arial; color: #127012; font-weight: bold; text-decoration: underline;" href="mac65.htm#chapter6">
Chapter 6 -- Compatibility</a><br>
&nbsp; <a style="color: #0404a0; font-size: small; font-family: sans-serif; font-weight: normal; font-style: normal; text-decoration: none;" href="mac65.htm#atariscartridge"><img src="decor/r_arrow.gif" alt="Atari's Cartridge" border=0 height=13 width=13>
6.1 &nbsp;&nbsp; Atari's Cartridge</a><br>
<br><br>
<a style="font-size: large; font-family: Arial; color: #066006; font-weight: bold; text-decoration: underline; background-color: #f0f0b0;" href="mac65.htm#chapter7">
Chapter 7 -- Added 65C02 Instructions<br></a>
&nbsp; <a style="color: #040480; font-size: small; font-family: sans-serif; font-weight: normal; font-style: normal; text-decoration: none; background-color: #f0f0b0;" href="mac65.htm#majoradded"><img src="decor/r_arrow.gif" alt="A Major Added Addressing Mode" border=0 height=13 width=13>
7.1 &nbsp;&nbsp; A Major Added Addressing Mode</a><br>
&nbsp; <a style="color: #040480; font-size: small; font-family: sans-serif; font-weight: normal; font-style: normal; text-decoration: none; background-color: #f0f0b0;" href="mac65.htm#minorvariations"><img src="decor/r_arrow.gif" alt="Minor Variations on 6502 Instructions" border=0 height=13 width=13>
7.2 &nbsp;&nbsp; Minor Variations on 6502 Instructions</a><br>
&nbsp; <a style="color: #040480; font-size: small; font-family: sans-serif; font-weight: normal; font-style: normal; text-decoration: none; background-color: #f0f0b0;" href="mac65.htm#allnew"><img src="decor/r_arrow.gif" alt="ALL-NEW 65C02 Instructions" border=0 height=13 width=13>
7.3 &nbsp;&nbsp; ALL-NEW 65C02 Instructions</a><br><br><br>
<a style="font-size: large; font-family: Arial; color: #066006; font-weight: bold; text-decoration: underline; background-color: #f0f0b0;" href="mac65.htm#chapter8">
Chapter 8 -- Programming Techniques with MAC/65<br></a>
&nbsp; <a style="color: #040480; font-size: small; font-family: sans-serif; font-weight: normal; font-style: normal; text-decoration: none; background-color: #f0f0b0;" href="mac65.htm#memoryusage"><img src="decor/r_arrow.gif" alt="Memory Usage by MAC/65 and DDT" border=0 height=13 width=13>
8.1 &nbsp;&nbsp; Memory Usage by MAC/65 and DDT</a><br>
&nbsp; <a style="color: #040480; font-size: small; font-family: sans-serif; font-weight: normal; font-style: normal; text-decoration: none; background-color: #f0f0b0;" href="mac65.htm#assemblingwithoffset"><img src="decor/r_arrow.gif" alt="Assembling With An Offset: .SET 6" border=0 height=13 width=13>
8.2 &nbsp;&nbsp; Assembling With An Offset: .SET 6</a><br>
&nbsp; <a style="color: #040480; font-size: small; font-family: sans-serif; font-weight: normal; font-style: normal; text-decoration: none; background-color: #f0f0b0;" href="mac65.htm#makingmacfaster"><img src="decor/r_arrow.gif" alt="Making MAC/65 Even Faster" border=0 height=13 width=13>
8.2 &nbsp;&nbsp; Making MAC/65 Even Faster</a><br><br><br>
<a style="font-size: large; font-family: Arial; color: #127012; font-weight: bold; text-decoration: underline;" href="mac65.htm#chapter9">
Chapter 9 -- Error Descriptions<br></a><br>
<a style="font-size: large; font-family: Arial; color: #127012; font-weight: bold; text-decoration: underline;" href="mac65.htm#appendixa">
Appendix -- A</a>
<br><br><br></td></tr></table></td></tr></table>

<table align="center">
<tr><td align="center"><a style="color: #0404a0; ont-size: x-small; font-family: system; font-weight: normal; font-style: normal; text-decoration: none; text-align: center;" href="http://www7.brinkster.com/atari/proginfo.htm"><img src="decor/l_arrow.gif" alt="Programming Info Index" border=0 height=13 width=13>
Programming Info Index&nbsp; &nbsp; &nbsp; &nbsp;</a></td>
<td><a style="color: #0404a0; font-size: x-small; font-family: system; font-weight: normal; font-style: normal; text-decoration: none; text-align: center;" href="mac65.htm#topofpage"><img src="decor/u_arrow.gif" alt="Top of Page" border=0 height=13 width=13>
Top of Page</a></td></tr></table>
<hr width="100%" size="2" style="color: #8668f5;">

<table width="100%"><tr><td align="right"><table width="98%"><tr><td bgcolor="#f0f0b0">
<a name="preface" style="font-size: large; font-family: Arial Black; color: #a62626; font-weight: bold;">
PREFACE</a><br>
<a style="font-size: small; font-family: Courier; color: #080850; font-weight: bold;"><br>
MAC/65 is a logical upgrade from the OSS product EASMD (Edit/ASseMble/Debug) which was itself an
outgrowth of the Atari Assembler/Editor cartridge. Users of either of these latter two products will
find that MAC/65 has a very familiar &quot;feel&quot;. Those who have never experienced previous OSS
products in this line should nevertheless find MAC/65 to be an easy-to-use, powerful and adaptable
programming environment. While speed was not necessarily the primary goal in the production of this
product, we nevertheless feel that the user will be hard pressed to find a faster assembler system in
any home computer market. MAC/65 is an excellent match for the size and features of the machines it is
intended for.<br><br>
MAC/65 was conceived by and completely executed by Stephen D. Lawrow. The current version of MAC/65
is only the latest in a series of increasingly more complex and faster assemblers written by Mr.
Lawrow following the lead and style of EASMD. As a measure of our confidence in this assembler, it is
entrusted with assembling itself, probably a more difficult task than that to which most users will
put it.<br><br></a></td></tr></table></td></tr></table>
<table align="center">
<tr><td><a style="color: #0404a0; font-size: x-small; font-family: system; font-weight: normal; font-style: normal; text-decoration: none; text-align: center;" href="mac65.htm#tableofcontents"><img src="decor/u_arrow.gif" alt="Table of Contents" border=0 height=13 width=13>
Table of Contents</a></td></tr></table>
<hr width="96%" size="1" color="#FFFFFF"><br>

<table width="100%"><tr><td align="right"><table width="98%"><tr><td bgcolor="#f0f0b0">
<a name="trademarks" style="font-size: large; font-family: Arial Black; color: #a62626; font-weight: bold;">
TRADEMARKS</a><br>
<a style="font-size: small; font-family: Courier; color: #080850; font-weight: bold;"><br>
The following trademarked names are used in various places with this manual, and credit is hereby
given:<br><br>
DOS XL, BASIC XL, MAC/65, and C/65 are trademarks of Optimized Systems Software, Inc.<br><br>
Atari, Atari 400, Atari 800, Atari Home Computers, and Atari 850 Interface Module are trademarks of
Atari, Inc., Sunnyvale, CA.<br><br>
<br><br></a></td></tr></table></td></tr></table>
<table align="center">
<tr><td><a style="color: #0404a0; font-size: x-small; font-family: system; font-weight: normal; font-style: normal; text-decoration: none; text-align: center;" href="mac65.htm#tableofcontents"><img src="decor/u_arrow.gif" alt="Table of Contents" border=0 height=13 width=13>
Table of Contents</a></td></tr></table>
<hr width="96%" size="1" color="#FFFFFF"><br>

<table width="100%"><tr><td align="right"><table width="99%"><tr><td>
<a name="introduction" style="font-size: large; font-family: Arial Black; color: #a62626; font-weight: bold;">
INTRODUCTION</a><br>
<a style="font-size: small; font-family: Courier; color: #121212; font-weight: bold;"><br>
This manual assumes the user is familiar with assembly language. It is not intended to teach assembly
language. This manual is a reference for commands, statements, functions, and syntax conventions of
MAC65. It is also assumed that the user is familiar with the screen editor of the Atari or Apple II
computer, as appropriate. Consult Atari's or Apple's Reference Manuals if you are not familiar with
the screen editor.<br><br>
If you need a tutorial level manual, we would recommend that you ask your local dealer or bookstore
for suggestions. Two books that have worked well for many of our customers are &quot;Machine Language
for Beginners&quot; by Richard Mansfield from COMPUTE! books and &quot;Programming the 6502&quot; by
Rodney Zaks.<br><br>
This manual is divided into two major sections; the first two chapters cover the Editor commands and
syntax, source line entry, and executing source program assembly. The next three chapters then cover
instruction format, assembler directives, functions and expressions, Macros, and conditional assembly.
<br><br>MAC65 is a fast and powerful machine language development tool. Programs larger than memory
can be assembled. MAC65 also contains directives specifically designed for screen format development.
With MAC65's line entry syntax feature, less time is spent re-assembling programs due to assembly
syntax errors, allowing more time for actual program development.
<br><br></a></td></tr></table></td></tr></table>
<table align="center">
<tr><td><a style="color: #0404a0; font-size: x-small; font-family: system; font-weight: normal; font-style: normal; text-decoration: none; text-align: center;" href="mac65.htm#tableofcontents"><img src="decor/u_arrow.gif" alt="Table of Contents" border=0 height=13 width=13>
Table of Contents</a></td></tr></table>
<hr width="96%" size="1" color="#FFFFFF"><br>

<table width="100%"><tr><td align="right"><table width="99%"><tr><td>
<a name="startup" style="font-size: large; font-family: Arial Black; color: #a62626; font-weight: bold;">
START UP</a><br>
<a style="font-size: small; font-family: Courier; color: #121212; font-weight: bold;"><br>
Power up the disk drive(s) and monitor, leave the computer off. Insert MAC65 disk in drive #1 and boot
system by turning the computer on. This will load and execute DOS XL. Now enter MAC65 (return). This
loads and executes MAC65, the Editor/Macro Assembler. Refer to the DOS XL Manual for other capabilities.
<br><br></a></td></tr></table></td></tr></table>
<table align="center">
<tr><td align="center"><a style="color: #0404a0; font-size: x-small; font-family: system; font-weight: normal; font-style: normal; text-decoration: none; text-align: center;" href="mac65.htm#introduction"><img src="decor/l_arrow.gif" alt="Introduction" border=0 height=13 width=13>
introduction&nbsp; &nbsp; &nbsp; &nbsp;</a></td>
<td><a style="color: #0404a0; font-size: x-small; font-family: system; font-weight: normal; font-style: normal; text-decoration: none; text-align: center;" href="mac65.htm#tableofcontents"><img src="decor/u_arrow.gif" alt="Table of Contents" border=0 height=13 width=13>
Table of Contents</a></td></tr></table>
<hr width="96%" size="1" color="#FFFFFF"><br>

<table width="100%"><tr><td align="right"><table width="99%"><tr><td>
<a name="warmstart" style="font-size: large; font-family: Arial Black; color: #a62626; font-weight: bold;">
WARM START</a><br>
<a style="font-size: small; font-family: Courier; color: #121212; font-weight: bold;"><br>
The user can exit to DOSXL by entering the MAC65 command CP (return) or by pressing the System Reset
key. To return to MAC65, the user can use the DOSXL command RUN (return). This &quot;warm starts&quot;
MAC65 and does not clear out any source lines in memory.
<br><br></a></td></tr></table></td></tr></table>
<table align="center">
<tr><td align="center"><a style="color: #0404a0; font-size: x-small; font-family: system; font-weight: normal; font-style: normal; text-decoration: none; text-align: center;" href="mac65.htm#startup"><img src="decor/l_arrow.gif" alt="Start-up" border=0 height=13 width=13>
startup&nbsp; &nbsp; &nbsp; &nbsp;</a></td>
<td><a style="color: #0404a0; font-size: x-small; font-family: system; font-weight: normal; font-style: normal; text-decoration: none; text-align: center;" href="mac65.htm#tableofcontents"><img src="decor/u_arrow.gif" alt="Table of Contents" border=0 height=13 width=13>
Table of Contents</a></td></tr></table>
<hr width="96%" size="1" color="#FFFFFF"><br>

<table width="100%"><tr><td align="right"><table width="99%"><tr><td>
<a name="backupcopy" style="font-size: large; font-family: Arial Black; color: #a62626; font-weight: bold;">
BACK-UP COPY</a><br>
<a style="font-size: small; font-family: Courier; color: #121212; font-weight: bold;"><br>
Please do not work with your master disk! Make a back-up copy with DOSXL. Consult the DOSXL reference
manual for specific instructions. Keep your master copy in a safe place.
<br><br></a></td></tr></table></td></tr></table>
<table align="center">
<tr><td align="center"><a style="color: #0404a0; font-size: x-small; font-family: system; font-weight: normal; font-style: normal; text-decoration: none; text-align: center;" href="mac65.htm#warmstart"><img src="decor/l_arrow.gif" alt="Warm-start" border=0 height=13 width=13>
warmstart&nbsp; &nbsp; &nbsp; &nbsp;</a></td>
<td><a style="color: #0404a0; font-size: x-small; font-family: system; font-weight: normal; font-style: normal; text-decoration: none; text-align: center;" href="mac65.htm#tableofcontents"><img src="decor/u_arrow.gif" alt="Table of Contents" border=0 height=13 width=13>
Table of Contents</a></td></tr></table>
<hr width="96%" size="1" color="#FFFFFF"><br>

<table width="100%"><tr><td align="right"><table width="99%"><tr><td>
<a name="syntax" style="font-size: large; font-family: Arial Black; color: #a62626; font-weight: bold;">
SYNTAX</a><br>
<a style="font-size: small; font-family: Courier; color: #121212; font-weight: bold;"><br>
The following conventions are used in the syntax descriptions in this manual:<br><br>
1. Capital letters designate commands, instruction, functions, etc., which must be entered exactly as
shown (e.g. ENTER, .INCLUDE, .NOT).<br><br></a></td></tr>

<tr><td bgcolor="#f0f0b0">
<a style="font-size: small; font-family: Courier; color: #080850; font-weight: bold;">
&nbsp; MAC/65 in EDIT mode is NOT case sensitive.<br>
&nbsp; Inverse video characters are uninverted.<br>
&nbsp; Lower case letters are converted to upper case.<br><br>
EXCEPTIONS: characters between double quotes, following a single quote, or in the comment field of a
MAC/65 source line will remain unchanged. Text entered in TEXT mode, though, will not be changed.
</a></td></tr><tr><td>

<a style="font-size: small; font-family: Courier; color: #121212; font-weight: bold;"><br>
2. Lower case letters specify items which may be used. The various types are as follows:<br><br>
&nbsp; 1no &nbsp;&nbsp; &nbsp; - Line number between 0-65535, inclusive.<br><br>
&nbsp; hxnum &nbsp;&nbsp; - A hex number.  It can be address or data.<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Hex numbers are treated as unsigned integers.<br><br>
&nbsp; dcnum &nbsp;&nbsp; - A positive number.  Decimal numbers are<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; rounded to the nearest two byte unsigned<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; integer; 3.5 to 3.9 is rounded to 4 and<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 100.1 to 100.4 is rounded to 100.<br><br>
&nbsp; exp &nbsp;&nbsp; &nbsp; - An assembler expression.<br><br>
&nbsp; string &nbsp; - A string of ASCII characters enclosed by<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; double quotes (eg. &quot;THIS IS A STRING&quot;).<br><br>
&nbsp; strvar &nbsp; - A string representation. Can be a string<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; as above, or a string variable within<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; a Macro call (eg. %$1).
<br><br>&nbsp;&nbsp; &nbsp; </a>
<a style="font-size: small; font-family: Courier; color: #080850; font-weight: bold;background-color: #f0f0b0">
fspec<br></a>
<a style="font-size: small; font-family: Courier; color: #121212; font-weight: bold;">
&nbsp; &nbsp; &nbsp; or<br>
&nbsp; filespec - A string of ASCII characters<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; that refers to OR refers to a<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; particular device. See device<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; file reference manual for more<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; specific explanation.<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</a>
<a style="font-size: small; font-family: Courier; color: #080850; font-weight: bold;background-color: #f0f0b0">
Might be #D1:SOURCE.M65 or #E: or #P:</a>
<a style="font-size: small; font-family: Courier; color: #121212; font-weight: bold;"><br><br>
3. Items in square brackets denote an optional part of syntax (eg. [,1no]). When an optional item is
followed by (...) the item(s) may be repeated as many times as needed.<br><br>
&nbsp; &nbsp; &nbsp; &nbsp; Example: .WORD exp [,exp ...]<br>
<br><br>
4. Items in parentheses indicate that any one of the items may be used, eg. (,Q) (,A).<br>
<br><br></a></td></tr></table></td></tr></table>
<table align="center">
<tr><td align="center"><a style="color: #0404a0; font-size: x-small; font-family: system; font-weight: normal; font-style: normal; text-decoration: none; text-align: center;" href="mac65.htm#backupcopy"><img src="decor/l_arrow.gif" alt="Back-up Copy" border=0 height=13 width=13>
back-up copy&nbsp; &nbsp; &nbsp; &nbsp;</a></td>
<td><a style="color: #0404a0; font-size: x-small; font-family: system; font-weight: normal; font-style: normal; text-decoration: none; text-align: center;" href="mac65.htm#tableofcontents"><img src="decor/u_arrow.gif" alt="Table of Contents" border=0 height=13 width=13>
Table of Contents</a></td></tr></table>
<hr width="96%" size="4" color="#FFFFFF"><br>

<table width="100%"><tr><td align="right"><table width="99%"><tr><td>
<a name="chapter1" style="font-size: large; font-family: Arial; color: #366636; font-weight: bold;">
CHAPTER 1: &nbsp; </a>
<a name=" " style="font-size: large; font-family: Arial Black; color: #a62626; font-weight: bold;">
THE EDITOR</a><br>
<a style="font-size: small; font-family: Courier; color: #121212; font-weight: bold;"><br>
The Editor allows the user to enter and edit MAC/65 source code or ordinary ASCII text files.<br><br>
To the Editor, there is a real distinction between the two types of files; so much that there are
actually two modes accessible to the user, EDIT mode and TEXTMODE. However, for either mode, source
code/text must begin with a line number between 0 and 65535 inclusive, followed by one space.<br><br>
&nbsp; Examples: 10 LABEL LDA  #$32<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 3020 This is valid in TEXT MODE<br><br>
The first example  would be valid in either EDIT or TEXTMODE, while the second example would only be
valid in TEXTMODE.<br><br>
The user chooses which mode he/she wishes to use for editing by selecting NEW (which allows general
text entry). There is more discussion of the impact of these two modes below; but, first, there are
several points in common to the two modes.
<br><br></a></td></tr></table></td></tr></table>
<table align="center">
<tr><td><a style="color: #0404a0; font-size: x-small; font-family: system; font-weight: normal; font-style: normal; text-decoration: none; text-align: center;" href="mac65.htm#tableofcontents"><img src="decor/u_arrow.gif" alt="Table of Contents" border=0 height=13 width=13>
Table of Contents</a></td></tr></table>
<hr width="96%" size="1" color="#FFFFFF"><br>

<table width="100%"><tr><td align="right"><table width="99%"><tr><td>
<a name="generaleditorusage" style="font-size: large; font-family: Arial Black; color: #a62626; font-weight: bold;">
1.1 GENERAL EDITOR USAGE</a><br>
<a style="font-size: small; font-family: Courier; color: #121212; font-weight: bold;"><br>
The source file is manipulated by Editor commands. Since the Editor recognizes a command by the
absence of a line number, a line beginning with a line number is assumed to be a valid source/text
line. As such, it is merged with, added to, or inserted into the source/text lines already in memory
in accordance with its line number. An entered line which has the same line number as one already in
memory will replace the line in memory.<br><br>
Also, as a special case of the above, a source line can be deleted from memory by entering its line
number only. (And also see DEL command for deleting a group of lines.)<br><br>
Any line that does not start with a line number is assumed to be command line. The Editor will
examine the line to determine what function is to be performed. If the line is a valid command, the
Editor will execute the command. The Editor will prompt the user each time a command has been executed
or terminated by printing:<br><br>
&nbsp; &nbsp; EDIT &nbsp; for syntax (MAC/65 source) mode<br>
TEXTMODE &nbsp; for text mode<br><br>
The cursor will appear on the following line. Since some commands may take a while to execute, the
prompt signals the user that more input is allowed. The user can terminate a command before completion
by hitting the break key (escape key on Apple II).<br><br>
And one last point:  If the line is neither a source line or a valid command. The Editor will print:
<br><br>
&nbsp; &nbsp; What?
<br><br></a></td></tr></table></td></tr></table>
<table align="center">
<tr><td align="center"><a style="color: #0404a0; font-size: x-small; font-family: system; font-weight: normal; font-style: normal; text-decoration: none; text-align: center;" href="mac65.htm#chapter1"><img src="decor/l_arrow.gif" alt="Chapter 1" border=0 height=13 width=13>
chapter 1&nbsp; &nbsp; &nbsp; &nbsp;</a></td>
<td><a style="color: #0404a0; font-size: x-small; font-family: system; font-weight: normal; font-style: normal; text-decoration: none; text-align: center;" href="mac65.htm#tableofcontents"><img src="decor/u_arrow.gif" alt="Table of Contents" border=0 height=13 width=13>
Table of Contents</a></td></tr></table>
<hr width="96%" size="1" color="#FFFFFF"><br>

<table width="100%"><tr><td align="right"><table width="99%"><tr><td>
<a name="textmode" style="font-size: large; font-family: Arial Black; color: #a62626; font-weight: bold;">
1.2 TEXT MODE</a><br>
<a style="font-size: small; font-family: Courier; color: #121212; font-weight: bold;"><br>
The Editor supports a text mode. The text mode is entered with the command TEXT. This mode will NOT
syntax check lines entered, allowing the user to enter and edit non-assembly language files. All
Editor commands function in text mode.<br><br>
Remember, though, that all text lines must begin with a line number; and, even in TEXTMODE, the space
following the line number is necessary.
<br><br></a></td></tr></table></td></tr></table>
<table align="center">
<tr><td align="center"><a style="color: #0404a0; font-size: x-small; font-family: system; font-weight: normal; font-style: normal; text-decoration: none; text-align: center;" href="mac65.htm#chapter1"><img src="decor/l_arrow.gif" alt="Chapter 1" border=0 height=13 width=13>
chapter 1&nbsp; &nbsp; &nbsp; &nbsp;</a></td>
<td><a style="color: #0404a0; font-size: x-small; font-family: system; font-weight: normal; font-style: normal; text-decoration: none; text-align: center;" href="mac65.htm#tableofcontents"><img src="decor/u_arrow.gif" alt="Table of Contents" border=0 height=13 width=13>
Table of Contents</a></td></tr></table>
<hr width="96%" size="1" color="#FFFFFF"><br>

<table width="100%"><tr><td align="right"><table width="99%"><tr><td>
<a name="editmode" style="font-size: large; font-family: Arial Black; color: #a62626; font-weight: bold;">
1.3 EDIT MODE</a><br>
<a style="font-size: small; font-family: Courier; color: #121212; font-weight: bold;"><br>
MAC/65 is nearly unique among assembler/editor systems in that it allows the assembly language user to
enter source code and have it IMMEDIATELY checked for syntax validity. Of course, since assembly
language syntax is fairly flexible (especially when macros are allowable, as they are with MAC/65),
syntax checking will by no means catch all errors in user source code. For example, the existence of
and validity of labels and/or zero page locations is not and can not be checked until assembly time.
However, we still feel that this syntax checking will be a boon to the beginner and experienced
programmer alike.<br><br>
Again, remember that source lines must begin with a line number which must, in turn, be followed by
one space. Then, the second space after the line number is the label column. The label must start in
this column. The third space after the line number is the instruction column. Instructions may either
start in at least the third column after the line number or at least one space after the label. The
operand may begin any where after the instruction, and comments may begin any where after the operand
or instruction. Refer to Assembler Section for specific instruction syntax.<br><br>
As noted, the Editor syntax checks each source line at entry. If the syntax of a line is in error, the
Editor will list the line with a cursor turned on (i.e., by using an inverse or blinking character) at
the point of error.<br><br>
The source lines are tokenized and stored in memory, starting at an address in low memory and building
towards high memory. The resultant tokenized file is 60% to 80% smaller than its ASCII counterpart,
thus allowing larger programs to be entered and edited in memory.<br><br>
SPECIAL NOTE: If, upon entry, a source line contains a syntax error and is so flagged by the Editor,
the line is entered into Editor memory anyway. This feature allows raw ASCII text files (possibly from
other assemblers and possibly containing one or several syntax errors as far as MAC/65 is concerned)
to be ENTERed into the Editor without losing any lines. The user can note the lines with errors and
then edit them later.
<br><br></a></td></tr></table></td></tr></table>
<table align="center">
<tr><td align="center"><a style="color: #0404a0; font-size: x-small; font-family: system; font-weight: normal; font-style: normal; text-decoration: none; text-align: center;" href="mac65.htm#chapter1"><img src="decor/l_arrow.gif" alt="Chapter 1" border=0 height=13 width=13>
chapter 1&nbsp; &nbsp; &nbsp; &nbsp;</a></td>
<td><a style="color: #0404a0; font-size: x-small; font-family: system; font-weight: normal; font-style: normal; text-decoration: none; text-align: center;" href="mac65.htm#tableofcontents"><img src="decor/u_arrow.gif" alt="Table of Contents" border=0 height=13 width=13>
Table of Contents</a></td></tr></table>
<hr width="96%" size="4" color="#FFFFFF"><br>

<table width="100%"><tr><td align="right"><table width="99%"><tr><td>
<a name="chapter2" style="font-size: large; font-family: Arial; color: #366636; font-weight: bold;">
CHAPTER 2: &nbsp; </a>
<a style="font-size: large; font-family: Arial Black; color: #a62626; font-weight: bold;">
EDITOR COMMANDS</a><br>
<a style="font-size: small; font-family: Courier; color: #121212; font-weight: bold;"><br>
This chapter lists all the valid Editor-level commands, in alphabetical order, along with a short
description of the purpose and function of each.<br><br>
Again, remember that when the &quot;TEXTMODE&quot; or &quot;EDIT&quot; prompt is present any input
line not preceded by a line number is presumed to be an Editor command.<br><br>
If in the process of executing a command any error is encountered, the Editor will abort execution and
return to the user, displaying the error number and descriptive message of the error before
re-prompting the user. Refer to Appendix for possible causes of </a>
<a style="font-size: small; font-family: Arial; color: #0404c0; text-decoration: underline;" href="mac65.htm#chapter9">
 errors.
<br><br></a></td></tr></table></td></tr></table>
<table align="center">
<tr><td align="center"><a style="color: #0404a0; font-size: x-small; font-family: system; font-weight: normal; font-style: normal; text-decoration: none; text-align: center;" href="mac65.htm#chapter1"><img src="decor/l_arrow.gif" alt="Chapter 1" border=0 height=13 width=13>
chapter 1&nbsp; &nbsp; &nbsp; &nbsp;</a></td>
<td><a style="color: #0404a0; font-size: x-small; font-family: system; font-weight: normal; font-style: normal; text-decoration: none; text-align: center;" href="mac65.htm#tableofcontents"><img src="decor/u_arrow.gif" alt="Table of Contents" border=0 height=13 width=13>
Table of Contents</a></td></tr></table>
<hr width="96%" size="1" color="#FFFFFF"><br>

<table width="100%"><tr><td align="right"><table width="99%"><tr><td>
<a name="asm" style="font-size: large; font-family: Arial Black; color: #a62626; font-weight: bold;">
Section 2.1 </a>
<a style="font-size: medium; font-family: Courier New; color: #4646b6; font-weight: bold;">
&nbsp; (ASM)</a><br>
<a style="font-size: small; font-family: Courier; color: #121212; font-weight: bold;"><br>
&nbsp; edit command: ASM
<br><br>
&nbsp; &nbsp;&nbsp; &nbsp; purpose: ASseMble MAC/65 source files
<br><br>
&nbsp; &nbsp; &nbsp;&nbsp; &nbsp; usage: ASM [#file1],[#file2],[#file3],[#file4]
<br><br>
&nbsp; &nbsp; &nbsp;&nbsp; &nbsp; </a>
<a style="font-size: small; font-family: Courier; color: #080850; font-weight: bold;background-color: #f0f0b0">
usage: ASM [#fspec1],[#fspec2],[#fspec3],[#fspec4]</a>
<a style="font-size: small; font-family: Courier; color: #121212; font-weight: bold;"><br><br>
ASM will assemble the specified source file and will produce a listing and object code output; the
listing may include a full cross reference of all non-local labels. File1 is the source device, file2
is the list device, file3 is the object device, and file4 is a temporary file used to help generate
the cross reference listing.<br><br>
Any or all of the four filespec's may be omitted, in which case MAC/65 assumes the following default
filespec(s) are to be used:
<br><br>
&nbsp; &nbsp; file1 - user source memory<br>
&nbsp; &nbsp; file2 - screen editor.<br>
&nbsp; &nbsp; file3 - memory (CAUTION: see below)<br>
&nbsp; &nbsp; file4 - none, therefore no cross reference<br>
<br><br>
A filespec (#file1, #file3, etc.) can be omitted by substituting a comma in which case the respective
default will be used.<br><br>
&nbsp; &nbsp; Example: ASM #D2:SOURCE,#D:LIST,#D2:OBJECT<br><br>
In this example, the source will come from D:SOURCE, the assembler will list to D:LIST, and the object
code will be written to D:OBJECT.<br><br>
&nbsp; &nbsp; Example: ASM #D:SOURCE,,#D:OBJECT<br><br>
In this example, the source will be read from D:SOURCE and the object will be written to D:OBJECT.
The assembly listing will be written to the screen.<br><br>
&nbsp; &nbsp; Example: ASM,#P:,,#D:TEMP<br><br>
In this example, the source will be read from memory, the object will be written to memory (but ONLY
if the &quot;.OPT OBJ&quot; directive is in the source), and the assembly listing will be written to
the printer along with the complete label cross reference. The file TEMP on disk drive 1 will be
created and used as a temporary file for the cross reference.<br><br>
&nbsp; &nbsp; Example: ASM #D:SOURCE,#P:<br><br>
In this example, the source will be read from D:SOURCE and the assembly listing will be written to the
printer. If the &quot;.OPT OBJ&quot; directive has been selected in the source, the object code will
be placed in memory.<br><br>&nbsp; &nbsp; </a>
<a style="font-size: small; font-family: Courier; color: #080850; font-weight: bold;background-color: #f0f0b0">
Example: ASM,#-</a><br><br>
<a style="font-size: small; font-family: Courier; color: #080850; font-weight: bold;background-color: #f0f0b0">
This produces what is probably the fastest possible MAC/65 assembly. Source code is read from memory
and no listing is produced (because of the &quot;#-&quot;). If your program does not contain an &quot;.OPT OBJ&quot;
line, this becomes what is essentially simply an error checking assembly. (Though even if you ARE
producing object code, the assembly speed is extremely fast.)</a><br><br>
<a style="font-size: small; font-family: Courier; color: #121212; font-weight: bold;"><br><br>
Note: If assembling from a &quot;filespec&quot;, the source MUST have been a SAVEd file.<br><br>
Note: Refer to the .OPT directive for specific information on assembler listing and object output.<br><br>
Note: The object code file will have the format of compound files created by the DOSXL SAVE command.
See the DOSXL manual for a discussion of LOAD and SAVE file formats.<br><br></a>
<a style="font-size: small; font-family: Courier; color: #080850; font-weight: bold;background-color: #f0f0b0">
NOTE: You may use #C: as a device for the listing or object files. You may NOT use #C: for the source
or cross-reference files (you will not get a cross-reference unless you use a disk drive). HOWEVER,
we do not recommend using the cassette as the object file device, since you may get an excessively
long leader tone (which will be difficult to re-BLOAD later). Instead, we suggest using BSAVE (after
assembling directly to memory) whenever practicable. </a>
</td></tr></table><br></td></tr></table>
<table align="center">
<tr><td align="center"><a style="color: #0404a0; font-size: x-small; font-family: system; font-weight: normal; font-style: normal; text-decoration: none; text-align: center;" href="mac65.htm#chapter2"><img src="decor/l_arrow.gif" alt="Chapter 2" border=0 height=13 width=13>
chapter 2&nbsp; &nbsp; &nbsp; &nbsp;</a></td>
<td><a style="color: #0404a0; font-size: x-small; font-family: system; font-weight: normal; font-style: normal; text-decoration: none; text-align: center;" href="mac65.htm#tableofcontents"><img src="decor/u_arrow.gif" alt="Table of Contents" border=0 height=13 width=13>
Table of Contents</a></td></tr></table>
<hr width="96%" size="1" color="#FFFFFF"><br>

<table width="100%"><tr><td align="right"><table width="99%"><tr><td>
<a name="bload" style="font-size: large; font-family: Arial Black; color: #a62626; font-weight: bold;">
Section 2.2 </a>
<a style="font-size: medium; font-family: Courier New; color: #4646b6; font-weight: bold;">
&nbsp; (BLOAD)</a><br>
<a style="font-size: small; font-family: Courier; color: #121212; font-weight: bold;"><br>
&nbsp; edit command: BLOAD
<br><br>
&nbsp; &nbsp; &nbsp;&nbsp; purpose: allows user to LOAD Binary (memory image)<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; files from disk into memory
<br><br>
&nbsp; &nbsp;&nbsp; &nbsp; &nbsp; usage: BLOAD #filespec
<br><br>
The BLOAD command will load a previously BSAVEd binary file, an assembled object file, or a binary
file created with DOSXL SAVe command.<br><br>
&nbsp; Example: BLOAD #D:OBJECT
<br><br>
This example will load the binary file &quot;OBJECT&quot; to memory at the address where it was
previously saved from or assembled for.<br><br>
CAUTION: it is suggested that the user only BLOAD files which were assembled into MAC/65's free area
(as shown by the SIZE command) or which will load into known safe areas of memory.
<br><br></a></td></tr></table></td></tr></table>
<table align="center">
<tr><td align="center"><a style="color: #0404a0; font-size: x-small; font-family: system; font-weight: normal; font-style: normal; text-decoration: none; text-align: center;" href="mac65.htm#chapter2"><img src="decor/l_arrow.gif" alt="Chapter 2" border=0 height=13 width=13>
chapter 2&nbsp; &nbsp; &nbsp; &nbsp;</a></td>
<td><a style="color: #0404a0; font-size: x-small; font-family: system; font-weight: normal; font-style: normal; text-decoration: none; text-align: center;" href="mac65.htm#tableofcontents"><img src="decor/u_arrow.gif" alt="Table of Contents" border=0 height=13 width=13>
Table of Contents</a></td></tr></table>
<hr width="96%" size="1" color="#FFFFFF"><br>

<table width="100%"><tr><td align="right"><table width="99%"><tr><td>
<a name="bsave" style="font-size: large; font-family: Arial Black; color: #a62626; font-weight: bold;">
Section 2.3 </a>
<a style="font-size: medium; font-family: Courier New; color: #4646b6; font-weight: bold;">
&nbsp; (BSAVE)</a><br>
<a style="font-size: small; font-family: Courier; color: #121212; font-weight: bold;"><br>
&nbsp; edit command: BSAVE
<br><br>
&nbsp; &nbsp; &nbsp;&nbsp; purpose: SAVE a Binary image of a portion of<br>
&nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp; memory. Same as DOSXL SAVE command
<br><br>
&nbsp; &nbsp;&nbsp; &nbsp; &nbsp; usage: BSAVE #filespec &lt; hxnum1 ,hxnum2
<br><br>
The BSAVE command will save the memory addresses from hxnum1 through hxnum2 to the specified device.
The binary file created is compatible with the DOSXL SAVe command.<br><br>
&nbsp; Example: BSAVE #D:OBJECT&lt;5000,5100
<br><br>
This example will save the memory addresses from $5000 through $5100 to the file
&quot;OBJECT&quot;.<br><br></a></td></tr></table></td></tr></table>
<table align="center">
<tr><td align="center"><a style="color: #0404a0; font-size: x-small; font-family: system; font-weight: normal; font-style: normal; text-decoration: none; text-align: center;" href="mac65.htm#chapter2"><img src="decor/l_arrow.gif" alt="Chapter 2" border=0 height=13 width=13>
chapter 2&nbsp; &nbsp; &nbsp; &nbsp;</a></td>
<td><a style="color: #0404a0; font-size: x-small; font-family: system; font-weight: normal; font-style: normal; text-decoration: none; text-align: center;" href="mac65.htm#tableofcontents"><img src="decor/u_arrow.gif" alt="Table of Contents" border=0 height=13 width=13>
Table of Contents</a></td></tr></table>
<hr width="96%" size="1" color="#FFFFFF"><br>

<table width="100%"><tr><td align="right"><table width="99%"><tr><td>
<a name="bye" style="font-size: large; font-family: Arial Black; color: #a62626; font-weight: bold;">
Section 2.4 </a>
<a style="font-size: medium; font-family: Courier New; color: #4646b6; font-weight: bold;">
&nbsp; (BYE)</a><br>
<a style="font-size: small; font-family: Courier; color: #121212; font-weight: bold;"><br>
&nbsp; edit command: BYE<br><br>
&nbsp; &nbsp;&nbsp; &nbsp; purpose: exit to system monitor level<br><br>
&nbsp; &nbsp;&nbsp; &nbsp; &nbsp; usage: BYE<br><br>
BYE will put the user to the Atari Memo Pad or Apple II monitor, as appropriate.
<br><br></a></td></tr></table></td></tr></table>
<table align="center">
<tr><td align="center"><a style="color: #0404a0; font-size: x-small; font-family: system; font-weight: normal; font-style: normal; text-decoration: none; text-align: center;" href="mac65.htm#chapter2"><img src="decor/l_arrow.gif" alt="Chapter 2" border=0 height=13 width=13>
chapter 2&nbsp; &nbsp; &nbsp; &nbsp;</a></td>
<td><a style="color: #0404a0; font-size: x-small; font-family: system; font-weight: normal; font-style: normal; text-decoration: none; text-align: center;" href="mac65.htm#tableofcontents"><img src="decor/u_arrow.gif" alt="Table of Contents" border=0 height=13 width=13>
Table of Contents</a></td></tr></table>
<hr width="96%" size="1" color="#FFFFFF"><br>

<table width="100%"><tr><td align="right"><table width="99%"><tr><td>
<a name="changememory" style="font-size: large; font-family: Arial Black; color: #a62626; font-weight: bold;">
Section 2.5 </a>
<a style="font-size: medium; font-family: Courier New; color: #4646b6; font-weight: bold;">
&nbsp; (Change Memory)</a><br>
<a style="font-size: small; font-family: Courier; color: #121212; font-weight: bold;"><br>
&nbsp; edit command: C<br><br>
&nbsp; &nbsp;&nbsp; &nbsp; purpose: Change memory contents<br><br>
&nbsp; &nbsp;&nbsp; &nbsp; &nbsp; usage: c hxnum1 &lt; (,)(hxnum) [(,)(,hxnum) ...]<br><br>
Although MAC/65 does not included a debug capability, there are a few machine level commands included
for the convenience of the user who would, for example, like to change system registers and the like
(screen color, margins, etc.). The C command is provided for this purpose.<br><br>
C allows the user to modify memory. Hxnum1 is the change start address. The remaining hxnum(s) are the
change bytes. The comma will skip an address.<br><br>
&nbsp; Example:  C 50000&lt;20,00,D8,,5<br><br>
The example will change the memory addresses as follows: 5000 to 20, 5001 to 00, 5002 to D8, skip
5003, and change 5004 to 5.
<br><br></a></td></tr></table></td></tr></table>
<table align="center">
<tr><td align="center"><a style="color: #0404a0; font-size: x-small; font-family: system; font-weight: normal; font-style: normal; text-decoration: none; text-align: center;" href="mac65.htm#chapter2"><img src="decor/l_arrow.gif" alt="Chapter 2" border=0 height=13 width=13>
chapter 2&nbsp; &nbsp; &nbsp; &nbsp;</a></td>
<td><a style="color: #0404a0; font-size: x-small; font-family: system; font-weight: normal; font-style: normal; text-decoration: none; text-align: center;" href="mac65.htm#tableofcontents"><img src="decor/u_arrow.gif" alt="Table of Contents" border=0 height=13 width=13>
Table of Contents</a></td></tr></table>
<hr width="96%" size="1" color="#FFFFFF"><br>

<table width="100%"><tr><td align="right"><table width="99%" ><tr><td>
<a name="displaymemory" style="font-size: large; font-family: Arial Black; color: #a62626; font-weight: bold;">
Section 2.6 </a>
<a style="font-size: medium; font-family: Courier New; color: #4646b6; font-weight: bold;">
&nbsp; (Display Memory)</a><br>
<a style="font-size: small; font-family: Courier; color: #121212; font-weight: bold;"><br>
&nbsp; edit command: D<br><br>
&nbsp; &nbsp;&nbsp; &nbsp; purpose: Display contents of memory location(s)<br><br>
&nbsp; &nbsp;&nbsp; &nbsp; &nbsp; usage: D hxnum1 [ ,hxnum2 ]<br><br>
D allows the user to examine memory. If hxnum2 is specified, the memory locations between hxnum1 and
hxnum2 will be displayed, else only hxnum1 through hxnum1 +8 will be displayed.
<br><br></a></td></tr></table></td></tr></table>
<table align="center">
<tr><td align="center"><a style="color: #0404a0; font-size: x-small; font-family: system; font-weight: normal; font-style: normal; text-decoration: none; text-align: center;" href="mac65.htm#chapter2"><img src="decor/l_arrow.gif" alt="Chapter 2" border=0 height=13 width=13>
chapter 2&nbsp; &nbsp; &nbsp; &nbsp;</a></td>
<td><a style="color: #0404a0; font-size: x-small; font-family: system; font-weight: normal; font-style: normal; text-decoration: none; text-align: center;" href="mac65.htm#tableofcontents"><img src="decor/u_arrow.gif" alt="Table of Contents" border=0 height=13 width=13>
Table of Contents</a></td></tr></table>
<hr width="96%" size="1" color="#FFFFFF"><br>

<table width="100%"><tr><td align="right"><table width="98%" bgcolor="#f0f0b0"><tr><td>
<a name="ddt" style="font-size: large; font-family: Arial Black; color: #a62626; font-weight: bold;">
Section 2.x </a>
<a style="font-size: medium; font-family: Courier New; color: #4646b6; font-weight: bold;">
&nbsp; (DDT)</a><br>
<a style="font-size: small; font-family: Courier; color: #080850; font-weight: bold;"><br>
&nbsp; edit command: DDT<br><br>
&nbsp; &nbsp;&nbsp; &nbsp; purpose: enter the DDT debug package, which<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; is part of the MAC/65 cartridge.<br><br>
&nbsp; &nbsp;&nbsp; &nbsp; &nbsp; usage: DDT<br><br>
Once you have entered this command, DDT is entered and has control of the system. However, DDT saves
enough of MAC/65's vital memory that, if you follow certain simple rules, you may return to MAC/65
from DDT with your source program still intact. The DDT manual gives more information on this subject,
but as a general guide you must avoid locations $80 through $AF (in zero page) and the memory location
located within the bounds displayed by the SIZE command. See the </a>
<a style="font-size: small; font-family: Arial; color: #040480; text-decoration: underline;" href="http://www7.brinkster.com/atari/ddt.htm">
DDT manual </a>
<a style="font-size: small; font-family: Courier; color: #080850; font-weight: bold;"> 
&nbsp;(which is bound with but after this MAC/65 manual) for many, many more details.
</a></td></tr></table><br></td></tr></table>
<table align="center">
<tr><td align="center"><a style="color: #0404a0; font-size: x-small; font-family: system; font-weight: normal; font-style: normal; text-decoration: none; text-align: center;" href="mac65.htm#chapter2"><img src="decor/l_arrow.gif" alt="Chapter 2" border=0 height=13 width=13>
chapter 2&nbsp; &nbsp; &nbsp; &nbsp;</a></td>
<td><a style="color: #0404a0; font-size: x-small; font-family: system; font-weight: normal; font-style: normal; text-decoration: none; text-align: center;" href="mac65.htm#tableofcontents"><img src="decor/u_arrow.gif" alt="Table of Contents" border=0 height=13 width=13>
Table of Contents</a></td></tr></table>
<hr width="96%" size="1" color="#FFFFFF"><br>

<table width="100%"><tr><td align="right"><table width="99%"><tr><td>
<a name="del" style="font-size: large; font-family: Arial Black; color: #a62626; font-weight: bold;">
Section 2.7 </a>
<a style="font-size: medium; font-family: Courier New; color: #4646b6; font-weight: bold;">
&nbsp; (DEL)</a><br>
<a style="font-size: small; font-family: Courier; color: #121212; font-weight: bold;"><br>
&nbsp; edit command:  DEL<br><br>
&nbsp; &nbsp;&nbsp; &nbsp; purpose: DELetes a line or group of lines from<br>
&nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; the source/text in memory.<br><br>
&nbsp; &nbsp;&nbsp; &nbsp; &nbsp; usage: DEL 1nol [ ,1no2 ]<br><br>
DEL deletes source lines from memory. If only one 1no is entered, only the line will be deleted. If
two 1nos are entered, all lines between and including 1no1 and 1no2 will be deleted.<br><br>
Note: 1no1 must be present in memory for DEL to execute.
<br><br></a></td></tr></table></td></tr></table>
<table align="center">
<tr><td align="center"><a style="color: #0404a0; font-size: x-small; font-family: system; font-weight: normal; font-style: normal; text-decoration: none; text-align: center;" href="mac65.htm#chapter2"><img src="decor/l_arrow.gif" alt="Chapter 2" border=0 height=13 width=13>
chapter 2&nbsp; &nbsp; &nbsp; &nbsp;</a></td>
<td><a style="color: #0404a0; font-size: x-small; font-family: system; font-weight: normal; font-style: normal; text-decoration: none; text-align: center;" href="mac65.htm#tableofcontents"><img src="decor/u_arrow.gif" alt="Table of Contents" border=0 height=13 width=13>
Table of Contents</a></td></tr></table>
<hr width="96%" size="1" color="#FFFFFF"><br>

<table width="100%"><tr><td align="right"><table width="99%"><tr><td>
<a name="dos" style="font-size: large; font-family: Arial Black; color: #a62626; font-weight: bold;">
Section 2.8 </a>
<a style="font-size: medium; font-family: Courier New; color: #4646b6; font-weight: bold;">
&nbsp; (DOS)</a><br>
<a style="font-size: small; font-family: Courier; color: #121212; font-weight: bold;"><br>
&nbsp; edit command: DOS&nbsp; [ or, equivalently, CP ]<br><br>
&nbsp; &nbsp;&nbsp; &nbsp; purpose: exit from MAC/65 to the CP of DOS XL.<br><br>
&nbsp; &nbsp;&nbsp; &nbsp; &nbsp; usage: DOS<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; or<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; CP<br><br>
Either DOS or CP returns the user to DOSXL.
<br><br></a></td></tr></table></td></tr></table>
<table align="center">
<tr><td align="center"><a style="color: #0404a0; font-size: x-small; font-family: system; font-weight: normal; font-style: normal; text-decoration: none; text-align: center;" href="mac65.htm#chapter2"><img src="decor/l_arrow.gif" alt="Chapter 2" border=0 height=13 width=13>
chapter 2&nbsp; &nbsp; &nbsp; &nbsp;</a></td>
<td><a style="color: #0404a0; font-size: x-small; font-family: system; font-weight: normal; font-style: normal; text-decoration: none; text-align: center;" href="mac65.htm#tableofcontents"><img src="decor/u_arrow.gif" alt="Table of Contents" border=0 height=13 width=13>
Table of Contents</a></td></tr></table>
<hr width="96%" size="1" color="#FFFFFF"><br>

<table width="100%"><tr><td align="right"><table width="99%"><tr><td>
<a name="enter" style="font-size: large; font-family: Arial Black; color: #a62626; font-weight: bold;">
Section 2.9 </a>
<a style="font-size: medium; font-family: Courier New; color: #4646b6; font-weight: bold;">
&nbsp; (ENTER)</a><br>
<a style="font-size: small; font-family: Courier; color: #121212; font-weight: bold;"><br>
&nbsp; edit command: ENTER<br><br>
&nbsp; &nbsp;&nbsp; &nbsp; purpose: allow entry of ASCII (or ATASCII)<br>
&nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp; text files into MAC/65 editor memory<br><br>
&nbsp; &nbsp;&nbsp; &nbsp; &nbsp; usage: ENTER #filespec [ (,M) (,A) ]<br><br>
ENTER will cause the Editor to get ASCII text from the specified device. ENTER will clear the text
area before entering from the filespec. That is any user program is memory at the time the ENTER
command is given will be erased.<br><br>
The parameter &quot;M&quot; (MERGE) will cause MAC/65 to NOT clear the text area before entering from
the file, text entered will be merged with the text in memory. If a line is entered which has the same
line number of a line in memory, the line from the device will overwrite the line in memory.<br><br>
The parameter &quot;A&quot; allows the user to enter un-numbered text from the specified device. The
Editor will number the incoming text starting at line 10, in increments of 10.<br><br>
CAUTION: The &quot;A&quot; option will always clear the text area before entering from the filespec.
<br><br></a></td></tr></table></td></tr></table>
<table align="center">
<tr><td align="center"><a style="color: #0404a0; font-size: x-small; font-family: system; font-weight: normal; font-style: normal; text-decoration: none; text-align: center;" href="mac65.htm#chapter2"><img src="decor/l_arrow.gif" alt="Chapter 2" border=0 height=13 width=13>
chapter 2&nbsp; &nbsp; &nbsp; &nbsp;</a></td>
<td><a style="color: #0404a0; font-size: x-small; font-family: system; font-weight: normal; font-style: normal; text-decoration: none; text-align: center;" href="mac65.htm#tableofcontents"><img src="decor/u_arrow.gif" alt="Table of Contents" border=0 height=13 width=13>
Table of Contents</a></td></tr></table>
<hr width="96%" size="1" color="#FFFFFF"><br>

<table width="100%"><tr><td align="right"><table width="99%"><tr><td>
<a name="find" style="font-size: large; font-family: Arial Black; color: #a62626; font-weight: bold;">
Section 2.10 </a>
<a style="font-size: medium; font-family: Courier New; color: #4646b6; font-weight: bold;">
&nbsp; (FIND)</a><br>
<a style="font-size: small; font-family: Courier; color: #121212; font-weight: bold;"><br>
&nbsp; edit command: FIND<br><br>
&nbsp; &nbsp;&nbsp; &nbsp; purpose: to FIND a string of characters some where<br>
&nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp; in MAC/65's editor buffer.<br><br>
&nbsp; &nbsp;&nbsp; &nbsp; &nbsp; usage: FIND / string/ [ 1no1 [ ,1no2 ] ] [ ,A ]<br><br>
The FIND command will search all lines in memory or the specified line(s) (1no1 through 1no2) for the
&quot;string&quot; given between the matching delimiter. The delimiter may be any character except a
space. If a match is found, the line containing the match will be listed to the screen.<br><br>
Note: do NOT enclose a string in double quotes.<br><br>
&nbsp; Example: FIND/LDX/<br><br>
This example will search for the first occurance of &quot;LDX&quot;.<br><br>
&nbsp; Example: FIND\Label\25,80<br><br>
This example will search for the first occurance of &quot;Label&quot; in lines 25 through 80.<br><br>
If the option &quot;A&quot; is specified, all matches within the specified line range will be listed
to the screen. Remember, if no line numbers are given, the range is the entire program.
<br><br></a></td></tr></table></td></tr></table>
<table align="center">
<tr><td align="center"><a style="color: #0404a0; font-size: x-small; font-family: system; font-weight: normal; font-style: normal; text-decoration: none; text-align: center;" href="mac65.htm#chapter2"><img src="decor/l_arrow.gif" alt="Chapter 2" border=0 height=13 width=13>
chapter 2&nbsp; &nbsp; &nbsp; &nbsp;</a></td>
<td><a style="color: #0404a0; font-size: x-small; font-family: system; font-weight: normal; font-style: normal; text-decoration: none; text-align: center;" href="mac65.htm#tableofcontents"><img src="decor/u_arrow.gif" alt="Table of Contents" border=0 height=13 width=13>
Table of Contents</a></td></tr></table>
<hr width="96%" size="1" color="#FFFFFF"><br>

<table width="100%"><tr><td align="right"><table width="99%"><tr><td>
<a name="list" style="font-size: large; font-family: Arial Black; color: #a62626; font-weight: bold;">
Section 2.11 </a>
<a style="font-size: medium; font-family: Courier New; color: #4646b6; font-weight: bold;">
&nbsp; (LIST)</a><br>
<a style="font-size: small; font-family: Courier; color: #121212; font-weight: bold;"><br>
&nbsp; edit command: LIST<br><br>
&nbsp; &nbsp;&nbsp; &nbsp; purpose: to LIST the contents of all or part of<br>
&nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp; MAC/65's editor buffer in ASCII (ATASCII)<br>
&nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp; form to a disk or device.<br><br>
&nbsp; &nbsp;&nbsp; &nbsp; &nbsp; usage: LIST [ #filespec, ] [ 1no1 [ ,1no2 ] ]<br><br>
LIST lists the source  file to the screen, or device when &quot;#filespec&quot; is specified. If no
1nos are specified, listing will begin at the first line in memory and end with the last line in
memory.<br><br>
If only 1no1 is specified, that line will be listed if it is in memory. If 1no1 and 1no2 are specified,
all lines between and including 1no1 and 1no2 will be listed. When 1no1 and 1no2 are specified,
neither one has to be in memory as LIST will search for the first line in memory greater than or equal
to 1no1, and will stop listing when the line in memory is greater than 1no2.<br><br>
&nbsp; EXAMPLE:  LIST #P:<br>
&nbsp; &nbsp; &nbsp; &nbsp;  will list the current contents<br>
&nbsp; &nbsp; &nbsp; &nbsp;  of the editor memory to the P:<br>
&nbsp; &nbsp; &nbsp; &nbsp; (printer) device.<br><br>
&nbsp; EXAMPLE: LIST #D2:TEMP, 1030, 1000<br>
&nbsp; &nbsp; &nbsp; &nbsp; lists only those lines lying<br>
&nbsp; &nbsp; &nbsp; &nbsp; in the line number range from<br>
&nbsp; &nbsp; &nbsp; &nbsp; 1030 to 1800, inclusive, to the<br>
&nbsp; &nbsp; &nbsp; &nbsp; disk file named &quot;TEMP&quot; on disk<br>
&nbsp; &nbsp; &nbsp; &nbsp; drive 2.<br><br>
NOTE: The second example points out a method of moving or duplicating large portions of text or source
via the use of temporary disk files. By suitably RENumbering the in-memory text before and after the
LIST, and by then using ENTER with the Merge option, quite complex movements are possible.
<br><br></a></td></tr></table></td></tr></table>
<table align="center">
<tr><td align="center"><a style="color: #0404a0; font-size: x-small; font-family: system; font-weight: normal; font-style: normal; text-decoration: none; text-align: center;" href="mac65.htm#chapter2"><img src="decor/l_arrow.gif" alt="Chapter 2" border=0 height=13 width=13>
chapter 2&nbsp; &nbsp; &nbsp; &nbsp;</a></td>
<td><a style="color: #0404a0; font-size: x-small; font-family: system; font-weight: normal; font-style: normal; text-decoration: none; text-align: center;" href="mac65.htm#tableofcontents"><img src="decor/u_arrow.gif" alt="Table of Contents" border=0 height=13 width=13>
Table of Contents</a></td></tr></table>
<hr width="96%" size="1" color="#FFFFFF"><br>

<table width="100%"><tr><td align="right"><table width="99%"><tr><td>
<a name="load" style="font-size: large; font-family: Arial Black; color: #a62626; font-weight: bold;">
Section 2.12 </a>
<a style="font-size: medium; font-family: Courier New; color: #4646b6; font-weight: bold;">
&nbsp; (LOAD)</a><br>
<a style="font-size: small; font-family: Courier; color: #121212; font-weight: bold;"><br>
&nbsp; edit command: LOAD<br><br>
&nbsp; &nbsp;&nbsp; &nbsp; purpose: to reLOAD a previously SAVEd MAC/65 token<br>
&nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp; file from disk to editor memory.<br><br>
&nbsp; &nbsp;&nbsp; &nbsp; &nbsp; usage: LOAD #filespec [ ,A ]<br><br>
LOAD will reload a previously SAVEd tokenized file into memory. LOAD will clear the user memory before
loading from the specified device unless the &quot;,A&quot; parameter is appended.<br><br>
The parameter &quot;A&quot; (for APPEND) causes the Editor to NOT clear the text area before loading
from the file. Instead, the load file will be appended with the current file in memory.<br><br>
Note: The Append option will NOT renumber the file after loading. It is possible to have DUPLICATE
LINE NUMBERS. Use the REN command if there are duplicate line numbers.
<br><br></a></td></tr></table></td></tr></table>
<table align="center">
<tr><td align="center"><a style="color: #0404a0; font-size: x-small; font-family: system; font-weight: normal; font-style: normal; text-decoration: none; text-align: center;" href="mac65.htm#chapter2"><img src="decor/l_arrow.gif" alt="Chapter 2" border=0 height=13 width=13>
chapter 2&nbsp; &nbsp; &nbsp; &nbsp;</a></td>
<td><a style="color: #0404a0; font-size: x-small; font-family: system; font-weight: normal; font-style: normal; text-decoration: none; text-align: center;" href="mac65.htm#tableofcontents"><img src="decor/u_arrow.gif" alt="Table of Contents" border=0 height=13 width=13>
Table of Contents</a></td></tr></table>
<hr width="96%" size="1" color="#FFFFFF"><br>

<table width="100%"><tr><td align="right"><table width="99%"><tr><td>
<a name="lomem" style="font-size: large; font-family: Arial Black; color: #a62626; font-weight: bold;">
Section 2.13 </a>
<a style="font-size: medium; font-family: Courier New; color: #4646b6; font-weight: bold;">
&nbsp; (LOMEM)</a><br>
<a style="font-size: small; font-family: Courier; color: #121212; font-weight: bold;"><br>
&nbsp; edit command: LOMEM<br><br>
&nbsp; &nbsp;&nbsp; &nbsp; purpose: change the lower bound of editor memory<br>
&nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp; usable by MAC/65.<br><br>
&nbsp; &nbsp;&nbsp; &nbsp; &nbsp; usage: LOMEM hxnum<br><br>
LOMEM allows the user to select the address where the source program begins. Executing LOMEM clears
out any source currently in memory; as if the user had typed &quot;NEW&quot;.
<br><br></a></td></tr></table></td></tr></table>
<table align="center">
<tr><td align="center"><a style="color: #0404a0; font-size: x-small; font-family: system; font-weight: normal; font-style: normal; text-decoration: none; text-align: center;" href="mac65.htm#chapter2"><img src="decor/l_arrow.gif" alt="Chapter 2" border=0 height=13 width=13>
chapter 2&nbsp; &nbsp; &nbsp; &nbsp;</a></td>
<td><a style="color: #0404a0; font-size: x-small; font-family: system; font-weight: normal; font-style: normal; text-decoration: none; text-align: center;" href="mac65.htm#tableofcontents"><img src="decor/u_arrow.gif" alt="Table of Contents" border=0 height=13 width=13>
Table of Contents</a></td></tr></table>
<hr width="96%" size="1" color="#FFFFFF"><br>

<table width="100%"><tr><td align="right"><table width="99%"><tr><td>
<a name="new" style="font-size: large; font-family: Arial Black; color: #a62626; font-weight: bold;">
Section 2.14 </a>
<a style="font-size: medium; font-family: Courier New; color: #4646b6; font-weight: bold;">
&nbsp; (NEW)</a><br>
<a style="font-size: small; font-family: Courier; color: #121212; font-weight: bold;"><br>
&nbsp; edit command: NEW<br><br>
&nbsp; &nbsp;&nbsp; &nbsp; purpose: clears out all editor memory, sets<br>
&nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp; syntax checking mode.<br><br>
&nbsp; &nbsp;&nbsp; &nbsp; &nbsp; usage: NEW<br><br>
NEW will clear all user source code from memory and reset the Editor to syntax mode. The &quot;EDIT&quot;
prompt appears, reminding the user that syntax checking is now active. If the user needs to defeat the
syntax checking, he/she must use the TEXT command.
<br><br></a></td></tr></table></td></tr></table>
<table align="center">
<tr><td align="center"><a style="color: #0404a0; font-size: x-small; font-family: system; font-weight: normal; font-style: normal; text-decoration: none; text-align: center;" href="mac65.htm#chapter2"><img src="decor/l_arrow.gif" alt="Chapter 2" border=0 height=13 width=13>
chapter 2&nbsp; &nbsp; &nbsp; &nbsp;</a></td>
<td><a style="color: #0404a0; font-size: x-small; font-family: system; font-weight: normal; font-style: normal; text-decoration: none; text-align: center;" href="mac65.htm#tableofcontents"><img src="decor/u_arrow.gif" alt="Table of Contents" border=0 height=13 width=13>
Table of Contents</a></td></tr></table>
<hr width="96%" size="1" color="#FFFFFF"><br>

<table width="100%"><tr><td align="right"><table width="99%"><tr><td>
<a name="num" style="font-size: large; font-family: Arial Black; color: #a62626; font-weight: bold;">
Section 2.15 </a>
<a style="font-size: medium; font-family: Courier New; color: #4646b6; font-weight: bold;">
&nbsp; (NUM)</a><br>
<a style="font-size: small; font-family: Courier; color: #121212; font-weight: bold;"><br>
&nbsp; edit command: NUM<br><br>
&nbsp; &nbsp;&nbsp; &nbsp; purpose: initiates automatic line NUMbering mode<br><br>
&nbsp; &nbsp;&nbsp; &nbsp; &nbsp; usage: NUM [ dcnum1 [ ,dcnum2 ] ]<br><br>
NUM will cause the Editor to auto-number the incoming text from the Screen Editor (E:). A space is
automatically printed after the line number. If no dcnums are specified, NUM will start at the last
line number plus 10. NUM dcnum1 will start at the last line number plus &quot;dcnum1&quot; in
increments of &quot;dcnum1&quot;. NUM dcnum1&quot;.  NUM dcnum1, dcnum2 will start at
&quot;dcnum1&quot; in increments of &quot;dcnum2&quot;.<br><br>
&nbsp; EXAMPLE: NUM 1000,20<br>
&nbsp; &nbsp; &nbsp; &nbsp; will cause the Editor to prompt the user with<br>
&nbsp; &nbsp; &nbsp; &nbsp; the number &quot;1000&quot; followed by a space. When<br>
&nbsp; &nbsp; &nbsp; &nbsp; the user has entered a line, the next prompt<br>
&nbsp; &nbsp; &nbsp; &nbsp; will be &quot;1020&quot;, etc.<br><br>
The NUM mode will terminate if the line number which would be next in sequence is present in memory.<br><br>
The user may terminate NUM mode on the Atari by pressing the BREAK key or by typing a CONTROL-3. On
the Apple, the user may terminate the NUM mode by pressing CONTROL-C followed by RETURN.
<br><br></a></td></tr></table></td></tr></table>
<table align="center">
<tr><td align="center"><a style="color: #0404a0; font-size: x-small; font-family: system; font-weight: normal; font-style: normal; text-decoration: none; text-align: center;" href="mac65.htm#chapter2"><img src="decor/l_arrow.gif" alt="Chapter 2" border=0 height=13 width=13>
chapter 2&nbsp; &nbsp; &nbsp; &nbsp;</a></td>
<td><a style="color: #0404a0; font-size: x-small; font-family: system; font-weight: normal; font-style: normal; text-decoration: none; text-align: center;" href="mac65.htm#tableofcontents"><img src="decor/u_arrow.gif" alt="Table of Contents" border=0 height=13 width=13>
Table of Contents</a></td></tr></table>
<hr width="96%" size="1" color="#FFFFFF"><br>

<table width="100%"><tr><td align="right"><table width="99%"><tr><td>
<a name="print" style="font-size: large; font-family: Arial Black; color: #a62626; font-weight: bold;">
Section 2.16 </a>
<a style="font-size: medium; font-family: Courier New; color: #4646b6; font-weight: bold;">
&nbsp; (PRINT)</a><br>
<a style="font-size: small; font-family: Courier; color: #121212; font-weight: bold;"><br>
&nbsp; edit command: PRINT<br><br>
&nbsp; &nbsp;&nbsp; &nbsp; purpose: to PRINT all or part of the Editor text<br>
&nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp; or source to a disk file or a device.<br><br>
&nbsp; &nbsp;&nbsp; &nbsp; &nbsp; usage: PRINT [ #filespec, ] [ 1no1 [ ,1no2 ] ]<br><br>
Print is exactly like LIST except that the line numbers are not listed. If a file is PRINTed to a disk,
it may be reENTERed into the MAC/65 memory using the ENTER command with the Append line number option.
<br><br></a></td></tr></table></td></tr></table>
<table align="center">
<tr><td align="center"><a style="color: #0404a0; font-size: x-small; font-family: system; font-weight: normal; font-style: normal; text-decoration: none; text-align: center;" href="mac65.htm#chapter2"><img src="decor/l_arrow.gif" alt="Chapter 2" border=0 height=13 width=13>
chapter 2&nbsp; &nbsp; &nbsp; &nbsp;</a></td>
<td><a style="color: #0404a0; font-size: x-small; font-family: system; font-weight: normal; font-style: normal; text-decoration: none; text-align: center;" href="mac65.htm#tableofcontents"><img src="decor/u_arrow.gif" alt="Table of Contents" border=0 height=13 width=13>
Table of Contents</a></td></tr></table>
<hr width="96%" size="1" color="#FFFFFF"><br>

<table width="100%"><tr><td align="right"><table width="99%"><tr><td>
<a name="ren" style="font-size: large; font-family: Arial Black; color: #a62626; font-weight: bold;">
Section 2.17 </a>
<a style="font-size: medium; font-family: Courier New; color: #4646b6; font-weight: bold;">
&nbsp; (REN)</a><br>
<a style="font-size: small; font-family: Courier; color: #121212; font-weight: bold;"><br>
&nbsp; edit command: REN<br><br>
&nbsp; &nbsp;&nbsp; &nbsp; purpose: RENumber all lines in Editor memory.<br><br>
&nbsp; &nbsp;&nbsp; &nbsp; &nbsp; usage: REN [ dcnum1 [ ,dcnum2 ]]<br><br>
REN renumbers the source lines in memory. If no dcnums are specified, REN will renumber the program
stating at line 10 in increments of 10. REN dcnum1 will renumber the lines starting at line 10 in
increments of dcnum1. REN dcnum1, dcnum2 will renumber starting at dcnum1 in increments of dcnum2.
<br><br></a></td></tr></table></td></tr></table>
<table align="center">
<tr><td align="center"><a style="color: #0404a0; font-size: x-small; font-family: system; font-weight: normal; font-style: normal; text-decoration: none; text-align: center;" href="mac65.htm#chapter2"><img src="decor/l_arrow.gif" alt="Chapter 2" border=0 height=13 width=13>
chapter 2&nbsp; &nbsp; &nbsp; &nbsp;</a></td>
<td><a style="color: #0404a0; font-size: x-small; font-family: system; font-weight: normal; font-style: normal; text-decoration: none; text-align: center;" href="mac65.htm#tableofcontents"><img src="decor/u_arrow.gif" alt="Table of Contents" border=0 height=13 width=13>
Table of Contents</a></td></tr></table>
<hr width="96%" size="1" color="#FFFFFF"><br>

<table width="100%"><tr><td align="right"><table width="99%"><tr><td>
<a name="rep" style="font-size: large; font-family: Arial Black; color: #a62626; font-weight: bold;">
Section 2.18 </a>
<a style="font-size: medium; font-family: Courier New; color: #4646b6; font-weight: bold;">
&nbsp; (REP)</a><br>
<a style="font-size: small; font-family: Courier; color: #121212; font-weight: bold;"><br>
&nbsp; edit command: REP<br><br>
&nbsp; &nbsp;&nbsp; &nbsp; purpose: REPlaces occurrence(s) of a given string<br>
&nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp; with another given string.<br><br>
&nbsp; &nbsp;&nbsp; &nbsp; &nbsp; usage:<br>
&nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp; REP/old string/new string/ [1no1 [,1no2 ]] [(,A)(,Q)]<br><br>
The REP command will search the specified lines (all or 1no1 through 1no2) for the &quot;old string&quot;.
<br><br>
The &quot;A&quot; option will cause all occurrences of &quot;old string&quot; to be replaced with
&quot;new string&quot;.  The &quot;Q&quot; option will list the line containing the match and prompt
the user for the change (Y followed by RETURN for change, RETURN for skip this occurance.) If neither
&quot;A&quot; or &quot;Q&quot; is specified, only the first occurrence of &quot;old String&quot; will
be replaced with &quot;new string&quot;. Each time a change is made, the line is listed.<br><br>
&nbsp; Example: REP/LDY/LDA/100,250,Q<br><br>
This example will search for the string &quot;LDY&quot; between the lines 200 and 250, inclusive, and
prompt the user at each occurrence to change or skip.<br><br>
Note: Hitting BREAK (ESCape on Apple Ii) will terminate the REP mode and return to the Editor.<br><br>
Note: If a change causes a syntax error in the line, the REP mode will be terminated and control will 
return to the Editor. Of course, if TEXTMODE is selected, there can be no syntax errors.
<br><br></a></td></tr></table></td></tr></table>
<table align="center">
<tr><td align="center"><a style="color: #0404a0; font-size: x-small; font-family: system; font-weight: normal; font-style: normal; text-decoration: none; text-align: center;" href="mac65.htm#chapter2"><img src="decor/l_arrow.gif" alt="Chapter 2" border=0 height=13 width=13>
chapter 2&nbsp; &nbsp; &nbsp; &nbsp;</a></td>
<td><a style="color: #0404a0; font-size: x-small; font-family: system; font-weight: normal; font-style: normal; text-decoration: none; text-align: center;" href="mac65.htm#tableofcontents"><img src="decor/u_arrow.gif" alt="Table of Contents" border=0 height=13 width=13>
Table of Contents</a></td></tr></table>
<hr width="96%" size="1" color="#FFFFFF"><br>

<table width="100%"><tr><td align="right"><table width="99%"><tr><td>
<a name="save" style="font-size: large; font-family: Arial Black; color: #a62626; font-weight: bold;">
Section 2.19 </a>
<a style="font-size: medium; font-family: Courier New; color: #4646b6; font-weight: bold;">
&nbsp; (SAVE)</a><br>
<a style="font-size: small; font-family: Courier; color: #121212; font-weight: bold;"><br>
&nbsp; edit command: SAVE<br><br>
&nbsp; &nbsp;&nbsp; &nbsp; purpose: SAVEs the internal (tokenized) form<br>
&nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp; of the user's in-memory text/source<br>
&nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp; to a disk file.<br><br>
&nbsp; &nbsp;&nbsp; &nbsp; &nbsp; usage: SAVE #filespec<br><br>
SAVE will save the tokenized user source file to the specified device. The format of a tokenized file
is as follows:<br><br>
File Header<br>
&nbsp; Two byte number (LSB,MSB) specifies the<br>
&nbsp; size of the file in bytes.<br><br>
For each line in the file:<br>
&nbsp; Two byte line number (LSB,MSB)<br>
&nbsp; followed by<br>
&nbsp; One byte length of line (actually offset to next line)<br>
&nbsp; followed by<br>
&nbsp; The tokenized line<br>
<br><br></a></td></tr></table></td></tr></table>
<table align="center">
<tr><td align="center"><a style="color: #0404a0; font-size: x-small; font-family: system; font-weight: normal; font-style: normal; text-decoration: none; text-align: center;" href="mac65.htm#chapter2"><img src="decor/l_arrow.gif" alt="Chapter 2" border=0 height=13 width=13>
chapter 2&nbsp; &nbsp; &nbsp; &nbsp;</a></td>
<td><a style="color: #0404a0; font-size: x-small; font-family: system; font-weight: normal; font-style: normal; text-decoration: none; text-align: center;" href="mac65.htm#tableofcontents"><img src="decor/u_arrow.gif" alt="Table of Contents" border=0 height=13 width=13>
Table of Contents</a></td></tr></table>
<hr width="96%" size="1" color="#FFFFFF"><br>

<table width="100%"><tr><td align="right"><table width="99%"><tr><td>
<a name="size" style="font-size: large; font-family: Arial Black; color: #a62626; font-weight: bold;">
Section 2.20 </a>
<a style="font-size: medium; font-family: Courier New; color: #4646b6; font-weight: bold;">
&nbsp; (SIZE)</a><br>
<a style="font-size: small; font-family: Courier; color: #121212; font-weight: bold;"><br>
edit command: SIZE<br><br>
&nbsp; &nbsp;&nbsp; &nbsp; purpose: determines and displays the SIZE of<br>
&nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp; various portions of memory used by<br>
&nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp; the MAC/65 Editor.<br><br>
&nbsp; &nbsp;&nbsp; &nbsp; &nbsp; usage: SIZE<br><br>
SIZE will print the user LOMEM address, the highest used memory address, and the highest usable memory
address, in that order, using hexadecimal notation for the addresses.
<br><br></a></td></tr></table></td></tr></table>
<table align="center">
<tr><td align="center"><a style="color: #0404a0; font-size: x-small; font-family: system; font-weight: normal; font-style: normal; text-decoration: none; text-align: center;" href="mac65.htm#chapter2"><img src="decor/l_arrow.gif" alt="Chapter 2" border=0 height=13 width=13>
chapter 2&nbsp; &nbsp; &nbsp; &nbsp;</a></td>
<td><a style="color: #0404a0; font-size: x-small; font-family: system; font-weight: normal; font-style: normal; text-decoration: none; text-align: center;" href="mac65.htm#tableofcontents"><img src="decor/u_arrow.gif" alt="Table of Contents" border=0 height=13 width=13>
Table of Contents</a></td></tr></table>
<hr width="96%" size="1" color="#FFFFFF"><br>

<table width="100%"><tr><td align="right"><table width="99%"><tr><td>
<a name="text" style="font-size: large; font-family: Arial Black; color: #a62626; font-weight: bold;">
Section 2.21 </a>
<a style="font-size: medium; font-family: Courier New; color: #4646b6; font-weight: bold;">
&nbsp; (TEXT)</a><br>
<a style="font-size: small; font-family: Courier; color: #121212; font-weight: bold;"><br>
&nbsp; edit command: TEXT<br><br>
&nbsp; &nbsp;&nbsp; &nbsp; purpose: allow entry of arbitrary ASCII (ATASCII)<br>
&nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp; text without syntax checking.<br><br>
&nbsp; &nbsp;&nbsp; &nbsp; &nbsp; usage: TEXT<br><br>
TEXT will clear all user source code from memory and put the Editor in the textmode. After this
command is used, the Editor will prompt the user for new commands and text with the word
&quot;TEXTMODE&quot; (instead of &quot;EDIT&quot;), indicating that no syntax checking is taking
place.<br><br>
TEXTMODE may be terminated by the NEW command. CAUTION: there is no way to go back and forth between
syntax (EDIT) mode and TEXTMODE without clearing the Editor's memory each time.
<br><br></a></td></tr></table></td></tr></table>
<table align="center">
<tr><td align="center"><a style="color: #0404a0; font-size: x-small; font-family: system; font-weight: normal; font-style: normal; text-decoration: none; text-align: center;" href="mac65.htm#chapter2"><img src="decor/l_arrow.gif" alt="Chapter 2" border=0 height=13 width=13>
chapter 2&nbsp; &nbsp; &nbsp; &nbsp;</a></td>
<td><a style="color: #0404a0; font-size: x-small; font-family: system; font-weight: normal; font-style: normal; text-decoration: none; text-align: center;" href="mac65.htm#tableofcontents"><img src="decor/u_arrow.gif" alt="Table of Contents" border=0 height=13 width=13>
Table of Contents</a></td></tr></table>
<hr width="96%" size="1" color="#FFFFFF"><br>

<table width="100%"><tr><td align="right"><table width="99%"><tr><td>
<a name="hexdecconvert" style="font-size: large; font-family: Arial Black; color: #a62626; font-weight: bold;">
Section 2.22 </a>
<a style="font-size: medium; font-family: Courier New; color: #4646b6; font-weight: bold;">
&nbsp; (HEX/DEC Convert)</a><br>
<a style="font-size: small; font-family: Courier; color: #121212; font-weight: bold;"><br>
&nbsp; edit command: ?<br><br>
&nbsp; &nbsp;&nbsp; &nbsp; purpose: makes hexadecimal/decimal conversions<br><br>
&nbsp; &nbsp;&nbsp; &nbsp; &nbsp; usage: ? ($hxnum) (dcnum)<br><br>
? is the resident hex/decimal decimal/hex converter. Numbers in the range 0 - 65535 decimal (0000 to
FFFF hex) may be converted.<br><br>
&nbsp; Example: ? $1200 will print =4600<br>
&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp; ? 8190 will print =$1FFE
<br><br></a></td></tr></table></td></tr></table>
<table align="center">
<tr><td align="center"><a style="color: #0404a0; font-size: x-small; font-family: system; font-weight: normal; font-style: normal; text-decoration: none; text-align: center;" href="mac65.htm#chapter2"><img src="decor/l_arrow.gif" alt="Chapter 2" border=0 height=13 width=13>
chapter 2&nbsp; &nbsp; &nbsp; &nbsp;</a></td>
<td><a style="color: #0404a0; font-size: x-small; font-family: system; font-weight: normal; font-style: normal; text-decoration: none; text-align: center;" href="mac65.htm#tableofcontents"><img src="decor/u_arrow.gif" alt="Table of Contents" border=0 height=13 width=13>
Table of Contents</a></td></tr></table>
<hr width="96%" size="4" color="#FFFFFF"><br>

<table width="100%"><tr><td align="right"><table width="99%"><tr><td>
<a name="chapter3" style="font-size: large; font-family: Arial; color: #366636; font-weight: bold;">
CHAPTER 3: &nbsp; </a>
<a style="font-size: large; font-family: Arial Black; color: #a62626; font-weight: bold;">
THE MACRO ASSEMBLER</a><br>
<a style="font-size: small; font-family: Courier; color: #121212; font-weight: bold;"><br>
Usually, the Assembler is entered from MAC/65 with the command ASM. For ASM command syntax, refer to </a>
<a style="font-size: small; font-family: Arial; color: #0404c0; text-decoration: underline;" href="mac65.htm#asm">
section 2.1 </a>
<a style="font-size: small; font-family: Courier; color: #121212; font-weight: bold;">
(in the Editor commands). Assembly may be terminated by hitting the BREAK key (ESCape key on the
Apple II).<br>
However, MAC/65 also offers the DOSXL command line level an optional ability to bypass the Editor
phase entirely. This is especially useful when doing assemblies during the processing of an EXeCution
file. To invoke the assembler directly, simply include one or more file names on the same DOSXL
command line as the &quot;MAC65&quot; command. The formal usage is as follows:<br><br>
&nbsp; MAC65 [file1 [file2 [file3 [file4 ] ] ] [-A][-D] ]<br><br>
where &quot;file1&quot;, &quot;file2&quot;, &quot;file3&quot; and &quot;file4&quot; are legal DOSXL
file or device names and &quot;-A&quot; and &quot;-D&quot; are option specifiers. Thus the arguments are
an optional set of one to four filenames, construed to be the source, listing, object, and
cross-reference files (respectively) of a MAC/65 assembly.<br><br>
And the options avaliable are:<br><br>
&nbsp; &nbsp; -A source file is Ascii<br>
&nbsp; &nbsp; -D assembly must be Disk-to-Disk<br><br>
Remember, if no filenames are given, MAC/65 will be invoked in it's interactive (Editor) mode. But, if
one or more files are specified, MAC/65 will be invoked in its &quot;batch&quot; mode. That is, it will
perform a single assembly and then return to DOSXL. Generally, this command line will perform the
assembly in a manner equivalent to giving the &quot;ASM&quot; command from the MAC/65 Editor. That is,
if only one filename is given, it is assumed to be the source file, implying that the listing will go
to the screen and the object code will be placed in memory (but only if requested by the .OPT OBJ
directive). If a second filename is given, it is assumed to be the name of the listing file. Only if
three or four filenames are given will the object code be directed to the file specified. And, finally,
if the fourth filename is given it must be a disk filename and will be used as a temporary file for
the cross reference listing.<br><br>
Note: if an assembly needs no listing but does need an object file, the user may specify
&quot;-&quot; as the listing file.<br><br>
And some notes on the options:<br><br>
The -A option is used to specify that the source file is not a standard MAC/65 SAVEd file but is
instead an Ascii (or Atascii) file. This is equivalent to using the interactive Editor mode of MAC/65
to use the sequence of commands &quot;ENTER #D...&quot; and &quot;ASM ,...&quot;.<br><br>
The -D option is used to specify that the assembly MUST proceed from disk to disk. If this option is
not given, the source file is LOADed (or ENTERed) before the assembly, and then the assembly proceeds
with the source in memory (generally producing improved speed of assembly). If, however, the source
file is too large to be assembled in memory, the user may use this option to allow assembly of even
very large programs. (And remember, even if the source fits, the macro and symbol tables must reside
in memory during assembly also.)<br><br>
NOTE: the -D option can NOT be used in conjunction with the -A option. The source file assembled under
the -D option MUST be a properly SAVEd (tokenized) file.<br><br>
EXAMPLES:<br><br>
&nbsp; MAC65 JUNK.M65 - JUNK.COM<br>
&nbsp; &nbsp; will assemble JUNK.M65, producing no<br>
&nbsp; &nbsp; listing but sending the object code<br>
&nbsp; &nbsp; to the file JUNK.COM<br><br>
&nbsp;  MAC65 TEST.LIS P: TEST.OBJ TEST.XRF<br>
&nbsp; &nbsp; will assemble TEST,LIS, which is an<br>
&nbsp; &nbsp; ASCII file, sending the listing to<br>
&nbsp; &nbsp; the printer (P:) and the object to<br>
&nbsp; &nbsp; the file TEST.OBJ.  A cross reference<br>
&nbsp; &nbsp; of all labels will be appended to the<br>
&nbsp; &nbsp; printer listing, and the file TEST.XRF<br>
&nbsp; &nbsp; will be used by MAC/65 as a temporary<br>
&nbsp; &nbsp; file for this purpose.
<br><br></a></td></tr></table></td></tr></table>
<table align="center">
<tr><td align="center"><a style="color: #0404a0; font-size: x-small; font-family: system; font-weight: normal; font-style: normal; text-decoration: none; text-align: center;" href="mac65.htm#chapter2"><img src="decor/l_arrow.gif" alt="Chapter 2" border=0 height=13 width=13>
chapter 2&nbsp; &nbsp; &nbsp; &nbsp;</a></td>
<td><a style="color: #0404a0; font-size: x-small; font-family: system; font-weight: normal; font-style: normal; text-decoration: none; text-align: center;" href="mac65.htm#tableofcontents"><img src="decor/u_arrow.gif" alt="Table of Contents" border=0 height=13 width=13>
Table of Contents</a></td></tr></table>
<hr width="96%" size="1" color="#FFFFFF"><br>

<table width="100%"><tr><td align="right"><table width="99%"><tr><td>
<a name="assemblerinput" style="font-size: large; font-family: Arial Black; color: #a62626; font-weight: bold;">
Section 3.1 </a>
<a style="font-size: medium; font-family: Courier New; color: #4646b6; font-weight: bold;">
&nbsp; (Assembler Input)</a><br>
<a style="font-size: small; font-family: Courier; color: #121212; font-weight: bold;"><br>
The Assembler will get a line at a time from the specified device or from memory. If assembling from a
device, the file must have been previously SAVEd by the Editor. All discussions of source lines and
syntax will be at the Editor line entry level. The tokenized (SAVEd) form is discussed in general terms
under the SAVE command, </a>
<a name=" " style="font-size: small; font-family: Arial; color: #0404c0; text-decoration: underline;" href="mac65.htm#save">
section 2.19 </a>
<a style="font-size: small; font-family: Courier; color: #121212; font-weight: bold;"><br><br>
Source lines are in the forms:<br><br>
&nbsp; line number + mandatory space + source statement<br><br>
The source statement may be in one of the following forms:<br><br>
[label] [ (6502 instruction) (directive) ] [comment]<br><br>
The following examples are valid source lines:<br><br>
&nbsp; 100 LABEL<br>
&nbsp; 120 ;Comment line<br>
&nbsp; 140 LDA #5 and then any comment at all<br>
&nbsp; 150 DEY<br>
&nbsp; 160 ASL A double number in accumulator<br>
&nbsp; 170 GETNUM LDA (ADDRESS),Y<br>
&nbsp; 180 .PAGE &quot;directives are legal, too&quot;<br><br>
In general, the format is as specified in the MOS Technology 6502 Programming Manual. We recommend that
the user unfamiliar with 6502 assembly language programming should purchase:<br><br>
&nbsp; &quot;Machine Language for Beginners&quot; by R. Mansfield<br>or<br>
&nbsp; &quot;Programming the 6502&quot; by Rodney Zake<br>or<br>
&nbsp;  any other book which seems compatible with the<br>
&nbsp;  users current knowledge of assembly language.<br><br>
Special Note:<br>
The assembler of MAC/65 understands only upper case labels, op codes, etc. HOWEVER, the editor
(see especially </a>
<a style="font-size: small; font-family: Arial; color: #0404c0; text-decoration: underline;" href="mac65.htm#editmode">
section 1.3 </a>
<a style="font-size: small; font-family: Courier; color: #121212; font-weight: bold;">
) will convert all lower case to upper case (except in comments and quoted strings), so the user may
feel free to type and edit in which ever case he/she feels most comfortable with.
<br><br></a></td></tr></table></td></tr></table>
<table align="center">
<tr><td align="center"><a style="color: #0404a0; font-size: x-small; font-family: system; font-weight: normal; font-style: normal; text-decoration: none; text-align: center;" href="mac65.htm#chapter3"><img src="decor/l_arrow.gif" alt="Chapter 3" border=0 height=13 width=13>
chapter 3&nbsp; &nbsp; &nbsp; &nbsp;</a></td>
<td><a style="color: #0404a0; font-size: x-small; font-family: system; font-weight: normal; font-style: normal; text-decoration: none; text-align: center;" href="mac65.htm#tableofcontents"><img src="decor/u_arrow.gif" alt="Table of Contents" border=0 height=13 width=13>
Table of Contents</a></td></tr></table>
<hr width="96%" size="1" color="#FFFFFF"><br>

<table width="100%"><tr><td align="right"><table width="99%"><tr><td>
<a name="instructionformat" style="font-size: large; font-family: Arial Black; color: #a62626; font-weight: bold;">
Section 3.2 </a>
<a style="font-size: medium; font-family: Courier New; color: #4646b6; font-weight: bold;">
&nbsp; (Instruction Format)</a><br>
<a style="font-size: small; font-family: Courier; color: #121212; font-weight: bold;"><br>
A) Instruction mnemonics are as described in the MOS Technology Programming Manual.<br><br>
B) Immediate operands begin with &quot;#&quot;.<br><br>
C) &quot;(operand,X)&quot; and &quot;(operand),Y&quot; designate indirect addressing.<br><br>
D) &quot;operand,X&quot; and &quot;operand,Y&quot; designate indexed addressing.<br><br>
E) Zero page operands cannot be forward referenced.  Attempting to do so will
usually result in a &quot;PHASE ERROR&quot; message.<br><br>
F) Forward equates are evaluated within the limits of a two pass assembler.<br><br>
G) &quot;*&quot; designates the current location counter.<br><br>
H) Comment lines may begin with &quot;;&quot; or &quot;*&quot;.<br><br>
I) Hex constants begin with &quot;$&quot;.<br><br>
J) The &quot;A&quot; operand is reserved for accumulator addressing.<br><br></a></td></tr>

<tr><td bgcolor="#f0f0b0">
<a style="font-size: small; font-family: Courier; color: #080850; font-weight: bold;">
K) A semicolon &quot;;&quot; anywhere in a line indicates the beginning of the comment field for that
line.<br><br>
L) The addressing formats available are extended to allow the new addressing modes available with the
NCR 65C02 microprocessor. See Chapter 7 for the descriptions of 65C02 instructions not included in the
standard 6502 set. The extensions include:<br><br>
1: &quot;(operand)&quot;, indicating indirect addressing, is now legal with ADC, AND, CMP, EOR, LDA,
ORA, SBC, and STA.  The operand must be in zero page.<br><br>
2: &quot;(operand,X)&quot; is now legal when used with JMP. The operand here may be any absolute
address.<br><br>
3: The BIT instruction is allowed the addressing mode &quot;operand,X&quot;. The operand may be either
a zero page or absolute address.<br><br>
4: The mnemonics BRA, DEA, INA, PHX, PHY, PLX, PLY, STZ, TRB, and TSB are now recognized.
</a></td></tr></table><br></td></tr></table>
<table align="center">
<tr><td align="center"><a style="color: #0404a0; font-size: x-small; font-family: system; font-weight: normal; font-style: normal; text-decoration: none; text-align: center;" href="mac65.htm#chapter3"><img src="decor/l_arrow.gif" alt="Chapter 3" border=0 height=13 width=13>
chapter 3&nbsp; &nbsp; &nbsp; &nbsp;</a></td>
<td><a style="color: #0404a0; font-size: x-small; font-family: system; font-weight: normal; font-style: normal; text-decoration: none; text-align: center;" href="mac65.htm#tableofcontents"><img src="decor/u_arrow.gif" alt="Table of Contents" border=0 height=13 width=13>
Table of Contents</a></td></tr></table>
<hr width="96%" size="1" color="#FFFFFF"><br>

<table width="100%"><tr><td align="right"><table width="99%"><tr><td>
<a name="labels" style="font-size: large; font-family: Arial Black; color: #a62626; font-weight: bold;">
Section 3.3 </a>
<a style="font-size: medium; font-family: Courier New; color: #4646b6; font-weight: bold;">
&nbsp; (LABELS)</a><br><br>
<a style="font-size: small; font-family: Courier; color: #121212; font-weight: bold;">
Labels must begin with an Alpha character, &quot;@&quot;. or &quot;?&quot;. The remaining characters
may be as the first or may be &quot;0&quot; to &quot;9&quot; or &quot;.&quot;. The characters must be
uppercase and cannot be broken by a space. The maximum number of characters in a label is 127, and ALL
are significant.<br><br>
Labels beginning with a question mark (&quot;?&quot;) are assumed to be &quot;LOCAL&quot; labels. Such
labels are &quot;visible&quot; only to code encountered within the current local region. Local regions
are delimited by successive occurrences of the .LOCAL directive, with the first region assumed to start
at the beginning of the assembly source, whether or not a .LOCAL is coded there or not. There are a
maximum of 62 local regions in any one assembly. Of course, if a .LOCAL is not encountered any where
in the assembly, then all labels are accessible at all times. In any case, labels beginning with a
question mark will NOT be listed in the symbol table.<br><br>
The following are examples of valid labels:<br><br>
&nbsp; &nbsp; TEST1 @.INC LOCATION LOC22A WHAT?<br>
&nbsp; &nbsp; ADDRESS1.1 EXP.. SINE45TAB.<br><br></a></td></tr></table></td></tr></table>
<table align="center">
<tr><td align="center"><a style="color: #0404a0; font-size: x-small; font-family: system; font-weight: normal; font-style: normal; text-decoration: none; text-align: center;" href="mac65.htm#chapter3"><img src="decor/l_arrow.gif" alt="Chapter 3" border=0 height=13 width=13>
chapter 3&nbsp; &nbsp; &nbsp; &nbsp;</a></td>
<td><a style="color: #0404a0; font-size: x-small; font-family: system; font-weight: normal; font-style: normal; text-decoration: none; text-align: center;" href="mac65.htm#tableofcontents"><img src="decor/u_arrow.gif" alt="Table of Contents" border=0 height=13 width=13>
Table of Contents</a></td></tr></table>
<hr width="96%" size="1" color="#FFFFFF"><br>

<table width="100%"><tr><td align="right"><table width="99%"><tr><td>
<a name="operands" style="font-size: large; font-family: Arial Black; color: #a62626; font-weight: bold;">
Section 3.4 </a>
<a style="font-size: medium; font-family: Courier New; color: #4646b6; font-weight: bold;">
&nbsp; (OPERANDS)</a><br><br>
<a style="font-size: small; font-family: Courier; color: #121212; font-weight: bold;">
An operand can be a label, a Macro parameter, a numeric constant, the current program counter (*),
&quot;A&quot; for accumulator addressing, an expression, or an ASCII character. The following are
examples of the various types of operands:<br><br>
&nbsp; 10 LDA #VALUE &nbsp;&nbsp; ; label<br>
&nbsp; 15 ROR A &nbsp; &nbsp; &nbsp; &nbsp; ; accumulator addressing<br>
&nbsp; 20 .BYTE 123,$45 ; numeric constants<br>
&nbsp; 25 .IF %0 &nbsp; &nbsp; &nbsp;&nbsp; ; Macro parameter<br>
&nbsp; 30 CMP #'A &nbsp; &nbsp; &nbsp; ; ASCII character<br>
&nbsp; 35 THISLOC = * &nbsp; ; current PC<br>
&nbsp; 40 .WORD PMBASE+[PLNO+4]*256 ; expression<br><br></a></td></tr></table></td></tr></table>
<table align="center">
<tr><td align="center"><a style="color: #0404a0; font-size: x-small; font-family: system; font-weight: normal; font-style: normal; text-decoration: none; text-align: center;" href="mac65.htm#chapter3"><img src="decor/l_arrow.gif" alt="Chapter 3" border=0 height=13 width=13>
chapter 3&nbsp; &nbsp; &nbsp; &nbsp;</a></td>
<td><a style="color: #0404a0; font-size: x-small; font-family: system; font-weight: normal; font-style: normal; text-decoration: none; text-align: center;" href="mac65.htm#tableofcontents"><img src="decor/u_arrow.gif" alt="Table of Contents" border=0 height=13 width=13>
Table of Contents</a></td></tr></table>
<hr width="96%" size="1" color="#FFFFFF"><br>

<table width="100%"><tr><td align="right"><table width="99%"><tr><td>
<a name="operators" style="font-size: large; font-family: Arial Black; color: #a62626; font-weight: bold;">
Section 3.5 </a>
<a style="font-size: medium; font-family: Courier New; color: #4646b6; font-weight: bold;">
&nbsp; (OPERATORS)</a><br><br>
<a style="font-size: small; font-family: Courier; color: #121212; font-weight: bold;">
The following are the operators currently supported by MAC/65:<br></a>

<table width="78%" align="center" bgcolor="#D6D6F2">
<tr><td><a style="color: #1414c0; font-size: x-small; font-family: Courier; font-style: normal;" href="mac65.htm#operators+">
3.5.1&nbsp; + - * /</a></td>
<td> &nbsp; &nbsp; </td>
<td><a style="color: #1414c0; font-size: x-small; font-family: Courier; font-style: normal; " href="mac65.htm#operators&">
3.5.2&nbsp; & ! ^</a></td>
<td> &nbsp; &nbsp; </td>
<td><a style="color: #1414c0; font-size: x-small; font-family: Courier; font-style: normal;" href="mac65.htm#operators=">
3.5.3&nbsp; = &gt; &lt; &lt;&gt; &gt;= &lt;= </a></td></tr>
<tr>
<td><a style="color: #1414c0; font-size: x-small; font-family: Courier; font-style: normal;" href="mac65.htm#operators.or">
3.5.4&nbsp; .OR .AND .NOT</a></td>
<td> &nbsp; &nbsp; </td>
<td><a style="color: #1414c0; font-size: x-small; font-family: Courier; font-style: normal;" href="mac65.htm#operators-">
3.5.5&nbsp; - (unary)</a></td>
<td> &nbsp; &nbsp; </td>
<td><a style="color: #1414c0; font-size: x-small; font-family: Courier; font-style: normal;" href="mac65.htm#operators<">
3.5.6&nbsp; &lt; &gt; (unary)</a></td></tr>
<tr>
<td><a style="color: #1414c0; font-size: x-small; font-family: Courier; font-style: normal;" href="mac65.htm#operators.def">
3.5.7&nbsp; .DEF</a></td>
<td> &nbsp; &nbsp; </td>
<td><a style="color: #1414c0; font-size: x-small; font-family: Courier; font-style: normal;" href="mac65.htm#operators.ref">
3.5.8&nbsp; .REF</a></td>
<td> &nbsp; &nbsp; </td>
<td><a style="color: #1414c0; font-size: x-small; font-family: Courier; font-style: normal;" href="mac65.htm#operators[">
3.5.9&nbsp; [ ]</a></td>
</tr></table><br>

<a style="font-size: small; font-family: Courier; color: #121212; font-weight: bold;">
&nbsp; [ ] &nbsp; psuedo parentheses<br>
&nbsp;&nbsp; + &nbsp;&nbsp; addition<br>
&nbsp;&nbsp; - &nbsp;&nbsp; subtraction<br>
&nbsp;&nbsp; / &nbsp;&nbsp; division<br>
&nbsp;&nbsp; * &nbsp;&nbsp; multiplication<br>
&nbsp;&nbsp; & &nbsp;&nbsp; binary AND<br>
&nbsp;&nbsp; ! &nbsp;&nbsp; binary OR<br>
&nbsp;&nbsp; ^ &nbsp;&nbsp; binary EOR<br>
&nbsp;&nbsp; = &nbsp;&nbsp; equality, logical<br>
&nbsp;&nbsp; &gt; &nbsp;&nbsp; greater than, logical<br>
&nbsp;&nbsp; &lt; &nbsp&nbsp less than, logical<br>
&nbsp; &lt; &gt; &nbsp; inequality, logical<br>
&nbsp; &gt;=  &nbsp;&nbsp; greater or equal, logical<br>
&nbsp; &lt;=  &nbsp&nbsp less or equal, logical<br>
&nbsp; .OR &nbsp; logical OR<br>
&nbsp; .AND&nbsp; logical AND<br>
&nbsp;&nbsp; - &nbsp;&nbsp; unary minus<br>
&nbsp; .NOT&nbsp; unary logical.  Returns true (1) if expression is<br>
&nbsp; &nbsp; &nbsp; &nbsp; zero. Returns false (0) it expression is non-zero.<br>
&nbsp; .DEF&nbsp; unary logical label definition.  Returns true<br>
&nbsp; &nbsp; &nbsp; &nbsp; if label is defined.<br>
&nbsp; .REF&nbsp unary logical label reference.  Returns true if<br>
&nbsp; &nbsp; &nbsp; &nbsp; label has been referenced.<br>
&nbsp;&nbsp; &gt; &nbsp;&nbsp; unary. Returns the high byte of the expression.<br>
&nbsp;&nbsp; &lt; &nbsp;&nbsp; unary. Returns the low byte of the expression.<br><br>
Logical operators will always return either TRUE (1) OR FALSE (0). However, any non-zero value is
considered true when making a conditional test.<br><br>
Some of these operators perhaps need some explanation as to their usage and purpose. The operators
are thus described in groups in the following subsections.
<br><br></a></td></tr></table></td></tr></table>
<table align="center">
<tr><td align="center"><a style="color: #0404a0; font-size: x-small; font-family: system; font-weight: normal; font-style: normal; text-decoration: none; text-align: center;" href="mac65.htm#chapter3"><img src="decor/l_arrow.gif" alt="Chapter 3" border=0 height=13 width=13>
chapter 3&nbsp; &nbsp; &nbsp; &nbsp;</a></td>
<td><a style="color: #0404a0; font-size: x-small; font-family: system; font-weight: normal; font-style: normal; text-decoration: none; text-align: center;" href="mac65.htm#tableofcontents"><img src="decor/u_arrow.gif" alt="Table of Contents" border=0 height=13 width=13>
Table of Contents</a></td></tr></table>
<hr width="96%" size="1" color="#FFFFFF"><br>

<table width="100%"><tr><td align="right"><table width="99%"><tr><td>
<a name="operators+" style="font-size: large; font-family: Arial Black; color: #a62626; font-weight: bold;">
Section 3.5.1 </a>
<a style="font-size: small; font-family: Courier New; color: #4646b6; font-weight: bold;">
&nbsp; (Operators: + - * / )</a><br><br>
<a style="font-size: small; font-family: Courier; color: #121212; font-weight: bold;">
These are the familiar arithmetic operators. Remember, though, that they perform 16-bit signed
arithmetic and ignore any overflows. Thus, for example, the value of $FF00+4096 is $0F00, and no error
is generated.
<br><br></a></td></tr></table></td></tr></table>
<table align="center">
<tr><td align="center"><a style="color: #0404a0; font-size: x-small; font-family: system; font-weight: normal; font-style: normal; text-decoration: none; text-align: center;" href="mac65.htm#operators"><img src="decor/l_arrow.gif" alt="Section 3.5" border=0 height=13 width=13>
section 3.5&nbsp; &nbsp; &nbsp; &nbsp;</a></td>
<td><a style="color: #0404a0; font-size: x-small; font-family: system; font-weight: normal; font-style: normal; text-decoration: none; text-align: center;" href="mac65.htm#tableofcontents"><img src="decor/u_arrow.gif" alt="Table of Contents" border=0 height=13 width=13>
Table of Contents</a></td></tr></table>
<hr width="96%" size="1" color="#FFFFFF"><br>

<table width="100%"><tr><td align="right"><table width="99%"><tr><td>
<a name="operators&" style="font-size: large; font-family: Arial Black; color: #a62626; font-weight: bold;">
Section 3.5.2 </a>
<a name=" " style="font-size: small; font-family: Courier New; color: #4646b6; font-weight: bold;">
&nbsp; (Operators:  & ! ^ )</a><br><br>
<a style="font-size: small; font-family: Courier; color: #121212; font-weight: bold;">
These are the binary or &quot;bitwise&quot; operators. They operate on values as 16 bit words,
performing bit-by-bit ANDs, ORs, or EXCLUSIVE ORs. They are 16 bit equivalents of the 6502 opcodes AND,
ORA, and EOR.<br><br>
EXAMPLES: $FF00 & $0FF&nbsp; is $0000<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; $03 ! $0A &nbsp; is $000B<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; $003F ^ $011F is $0120
<br><br></a></td></tr></table></td></tr></table>
<table align="center">
<tr><td align="center"><a style="color: #0404a0; font-size: x-small; font-family: system; font-weight: normal; font-style: normal; text-decoration: none; text-align: center;" href="mac65.htm#operators"><img src="decor/l_arrow.gif" alt="Section 3.5" border=0 height=13 width=13>
section 3.5&nbsp; &nbsp; &nbsp; &nbsp;</a></td>
<td><a style="color: #0404a0; font-size: x-small; font-family: system; font-weight: normal; font-style: normal; text-decoration: none; text-align: center;" href="mac65.htm#tableofcontents"><img src="decor/u_arrow.gif" alt="Table of Contents" border=0 height=13 width=13>
Table of Contents</a></td></tr></table>
<hr width="96%" size="1" color="#FFFFFF"><br>

<table width="100%"><tr><td align="right"><table width="99%"><tr><td>
<a name="operators=" style="font-size: large; font-family: Arial Black; color: #a62626; font-weight: bold;">
Section 3.5.3 </a>
<a style="font-size: small; font-family: Courier New; color: #4646b6; font-weight: bold;">
&nbsp; (Operators: = &gt; &lt; &lt;&gt; &gt;= &lt;= )</a><br><br>
<a style="font-size: small; font-family: Courier; color: #121212; font-weight: bold;">
These are the familiar comparison operators. They perform 16 bit unsigned compares on pairs of operands
and return a TRUE (1) or FALSE (0) value.<br><br>
EXAMPLES: 3 &lt; &nbsp;5 returns 1<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 5 &lt; &nbsp;5 returns 0<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 5 &lt;= 5 returns 1<br><br>
CAUTION: Remember, these operators always work on PAIRS of operands. The operators
&quot;&gt;&quot; and &quot;&lt;&quot; have quite different meanings when used as unary operators.
<br><br></a></td></tr></table></td></tr></table>
<table align="center">
<tr><td align="center"><a style="color: #0404a0; font-size: x-small; font-family: system; font-weight: normal; font-style: normal; text-decoration: none; text-align: center;" href="mac65.htm#operators"><img src="decor/l_arrow.gif" alt="Section 3.5" border=0 height=13 width=13>
section 3.5&nbsp; &nbsp; &nbsp; &nbsp;</a></td>
<td><a style="color: #0404a0; font-size: x-small; font-family: system; font-weight: normal; font-style: normal; text-decoration: none; text-align: center;" href="mac65.htm#tableofcontents"><img src="decor/u_arrow.gif" alt="Table of Contents" border=0 height=13 width=13>
Table of Contents</a></td></tr></table>
<hr width="96%" size="1" color="#FFFFFF"><br>

<table width="100%"><tr><td align="right"><table width="99%"><tr><td>
<a name="operators.or" style="font-size: large; font-family: Arial Black; color: #a62626; font-weight: bold;">
Section 3.5.4 </a>
<a style="font-size: small; font-family: Courier New; color: #4646b6; font-weight: bold;">
&nbsp; (Operators: .OR .AND .NOT )</a><br><br>
<a style="font-size: small; font-family: Courier; color: #121212; font-weight: bold;">
These operators also perform logical operations and should not be confused with their bitwise
companions. Remember, these operators always return only TRUE or FALSE.<br><br>
EXAMPLES: 3 .OR&nbsp; 0 returns 1<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 3 .AND 2 returns 1<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 6 .AND 0 returns 0<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .NOT 7 returns 0
<br><br></a></td></tr></table></td></tr></table>
<table align="center">
<tr><td align="center"><a style="color: #0404a0; font-size: x-small; font-family: system; font-weight: normal; font-style: normal; text-decoration: none; text-align: center;" href="mac65.htm#operators"><img src="decor/l_arrow.gif" alt="Section 3.5" border=0 height=13 width=13>
section 3.5&nbsp; &nbsp; &nbsp; &nbsp;</a></td>
<td><a style="color: #0404a0; font-size: x-small; font-family: system; font-weight: normal; font-style: normal; text-decoration: none; text-align: center;" href="mac65.htm#tableofcontents"><img src="decor/u_arrow.gif" alt="Table of Contents" border=0 height=13 width=13>
Table of Contents</a></td></tr></table>
<hr width="96%" size="1" color="#FFFFFF"><br>

<table width="100%"><tr><td align="right"><table width="99%"><tr><td>
<a name="operators-" style="font-size: large; font-family: Arial Black; color: #a62626; font-weight: bold;">
Section 3.5.5 </a>
<a style="font-size: small; font-family: Courier New; color: #4646b6; font-weight: bold;">
&nbsp; (Operator: - (unary) )</a><br><br>
<a style="font-size: small; font-family: Courier; color: #121212; font-weight: bold;">
The minus sign may be used as an unary operator. It's effect is the same as if a minus sign had been
used in a binary operation where the first operator is zero.<br><br>
EXAMPLE: -2 is $FFFE (same as 0-2)
<br><br></a></td></tr></table></td></tr></table>
<table align="center">
<tr><td align="center"><a style="color: #0404a0; font-size: x-small; font-family: system; font-weight: normal; font-style: normal; text-decoration: none; text-align: center;" href="mac65.htm#operators"><img src="decor/l_arrow.gif" alt="Section 3.5" border=0 height=13 width=13>
section 3.5&nbsp; &nbsp; &nbsp; &nbsp;</a></td>
<td><a style="color: #0404a0; font-size: x-small; font-family: system; font-weight: normal; font-style: normal; text-decoration: none; text-align: center;" href="mac65.htm#tableofcontents"><img src="decor/u_arrow.gif" alt="Table of Contents" border=0 height=13 width=13>
Table of Contents</a></td></tr></table>
<hr width="96%" size="1" color="#FFFFFF"><br>

<table width="100%"><tr><td align="right"><table width="99%"><tr><td>
<a name="operators<" style="font-size: large; font-family: Arial Black; color: #a62626; font-weight: bold;">
Section 3.5.6 </a>
<a style="font-size: small; font-family: Courier New; color: #4646b6; font-weight: bold;">
&nbsp; (Operators: &lt; &gt; (unary) )</a><br><br>
<a style="font-size: small; font-family: Courier; color: #121212; font-weight: bold;">
These UNARY operators are extremely useful when it is desired to extract just the high order or low
order byte of an expression or label. Probably their most common use will be that of supplying the
high and low order bytes of an address to be used in a LDA #&quot; or similar instruction.<br><br>
EXAMPLE: FLEEP = $3456<br>
&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp; LDA #&lt;FLEEP (same as LDA #$56)<br>
&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp; LDA #&gt;FLEEP (same as LDA #$34)
<br><br></a></td></tr></table></td></tr></table>
<table align="center">
<tr><td align="center"><a style="color: #0404a0; font-size: x-small; font-family: system; font-weight: normal; font-style: normal; text-decoration: none; text-align: center;" href="mac65.htm#operators"><img src="decor/l_arrow.gif" alt="Section 3.5" border=0 height=13 width=13>
section 3.5&nbsp; &nbsp; &nbsp; &nbsp;</a></td>
<td><a style="color: #0404a0; font-size: x-small; font-family: system; font-weight: normal; font-style: normal; text-decoration: none; text-align: center;" href="mac65.htm#tableofcontents"><img src="decor/u_arrow.gif" alt="Table of Contents" border=0 height=13 width=13>
Table of Contents</a></td></tr></table>
<hr width="96%" size="1" color="#FFFFFF"><br>

<table width="100%"><tr><td align="right"><table width="99%"><tr><td>
<a name="operators.def" style="font-size: large; font-family: Arial Black; color: #a62626; font-weight: bold;">
Section 3.5.7 </a>
<a style="font-size: small; font-family: Courier New; color: #4646b6; font-weight: bold;">
&nbsp; (Operator: .DEF )</a><br><br>
<a style="font-size: small; font-family: Courier; color: #121212; font-weight: bold;">
This unary operator tests whether the following label has been defined yet, returning TRUE or FALSE as
appropriate.<br><br>
CAUTION: Defining a label AFTER the use of a .DEF which references it can be dangerous, particularly
if the .DEF is used in a .IF directive.<br><br>
EXAMPLE .IF .DEF ZILK<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .BYTE &quot;generates some bytes&quot;<br>
&nbsp; &nbsp; &nbsp; &nbsp; ZILK = $3000<br><br>
In this example, the .BYTE string will NOT be generated in the first pass but WILL be generated in the
second pass. Thus, any following code will almost undoubtedly generate a PHASE ERROR.
<br><br></a></td></tr></table></td></tr></table>
<table align="center">
<tr><td align="center"><a style="color: #0404a0; font-size: x-small; font-family: system; font-weight: normal; font-style: normal; text-decoration: none; text-align: center;" href="mac65.htm#operators"><img src="decor/l_arrow.gif" alt="Section 3.5" border=0 height=13 width=13>
section 3.5&nbsp; &nbsp; &nbsp; &nbsp;</a></td>
<td><a style="color: #0404a0; font-size: x-small; font-family: system; font-weight: normal; font-style: normal; text-decoration: none; text-align: center;" href="mac65.htm#tableofcontents"><img src="decor/u_arrow.gif" alt="Table of Contents" border=0 height=13 width=13>
Table of Contents</a></td></tr></table>
<hr width="96%" size="1" color="#FFFFFF"><br>

<table width="100%"><tr><td align="right"><table width="99%"><tr><td>
<a name="operators.ref" style="font-size: large; font-family: Arial Black; color: #a62626; font-weight: bold;">
Section 3.5.8 </a>
<a style="font-size: small; font-family: Courier New; color: #4646b6; font-weight: bold;">
&nbsp; (Operator: .REF )</a><br><br>
<a style="font-size: small; font-family: Courier; color: #121212; font-weight: bold;">
This unary operator tests whether the following label has been referenced by any instruction or
directive in the assembly yet; and, in conjunction with the .IF directive, produces the effect of
returning a TRUE or FALSE value.<br><br>
Obviously, the same cautions about .DEF being used before the label definition apply to .REF also,
but here we can obtain some advantage from the situation.<br><br>
EXAMPLE: .IF .REF PRINTMSG<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; PRINTMSG<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ...(code to implement the PRINTMSG routine)<br>
&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; .ENDIF<br><br>
In this example, the code implementing PRINTMSG will ONLY be assembled if something preceding this
point in the assembly has referred to the label PRINTMSG! This is a very powerful way to build an
assembly language library and assemble only the needed routines. Of course, this implies that the
library must be .INCLUDEd as the last part of the assembly, but this seems like a not too onerous
restriction. In fact, OSS has used this technique in writing the libraries for the C/65 compiler.<br><br>
CAUTION: note that in the description above it was implied that .REF only worked properly with a .IF
directive. Not only is this restriction imposed, but attempts to use. REF in any other way can produce
bizarre results. ALSO, .REF can not effectively be used in combination with any other operators. Thus,
for example,<br><br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .IF .REF ZAM .OR .REF BLOOP is ILLEGAL!<br><br>
The only operator which can legally combined with .REF is .NOT, as in .IF .NOT .REF LABEL.<br><br>
Note that the illegal line above could be simulated thus:<br><br>
EXAMPLE: DOIT . = 0<br>
&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; .IF .REF ZAM<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; DOIT . = 1<br>
&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; .IF .REF BLOOP<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; DOIT . = 1<br>
&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; .ENDIF<br>
&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; .IF DOIT<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ...
<br><br></a></td></tr></table></td></tr></table>
<table align="center">
<tr><td align="center"><a style="color: #0404a0; font-size: x-small; font-family: system; font-weight: normal; font-style: normal; text-decoration: none; text-align: center;" href="mac65.htm#operators"><img src="decor/l_arrow.gif" alt="Section 3.5" border=0 height=13 width=13>
section 3.5&nbsp; &nbsp; &nbsp; &nbsp;</a></td>
<td><a style="color: #0404a0; font-size: x-small; font-family: system; font-weight: normal; font-style: normal; text-decoration: none; text-align: center;" href="mac65.htm#tableofcontents"><img src="decor/u_arrow.gif" alt="Table of Contents" border=0 height=13 width=13>
Table of Contents</a></td></tr></table>
<hr width="96%" size="1" color="#FFFFFF"><br>

<table width="100%"><tr><td align="right"><table width="99%"><tr><td>
<a name="operators[" style="font-size: large; font-family: Arial Black; color: #a62626; font-weight: bold;">
Section 3.5.9 </a>
<a style="font-size: small; font-family: Courier New; color: #4646b6; font-weight: bold;">
&nbsp; (Operator: [ ] )</a><br><br>
<a style="font-size: small; font-family: Courier; color: #121212; font-weight: bold;">
MAC/65 supports the use of the square brackets as &quot;psuedo parentheses&quot;. Ordinary round
parentheses may NOT be used for grouping expressions, etc., as they must retain their special meanings
with regards to the various addressing modes. In general, the square brackets may be used any where in
a MAC/65 expression to clarify or change the order of evaluation of the expression.<br><br>
EXAMPLES:<br>
&nbsp; LDA GEORGE+5*3 &nbsp;&nbsp; ;This is legal, but<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; it multiplies 3*5<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; and adds the 15 to<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; GEORGE...probably<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; not what you wanted.<br>
&nbsp;  LDA (GEORGE+5)*3 &nbsp; ;Syntax Error!!!<br>
&nbsp;  LDA [GEORGE+5]*3 &nbsp; ;OK...the addition<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; is performed before<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; the multiplication<br>
&nbsp; LDA ( [GEORGE+5]*3),Y ;See the need<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; for both kinds of<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;parentheses&quot;?<br><br>
REMEMBER: Operators in MAC/65 expressions follow precedence rules. The square brackets may be used to
override these rules.
<br><br></a></td></tr></table></td></tr></table>
<table align="center">
<tr><td align="center"><a style="color: #0404a0; font-size: x-small; font-family: system; font-weight: normal; font-style: normal; text-decoration: none; text-align: center;" href="mac65.htm#operators"><img src="decor/l_arrow.gif" alt="Section 3.5" border=0 height=13 width=13>
section 3.5&nbsp; &nbsp; &nbsp; &nbsp;</a></td>
<td><a style="color: #0404a0; font-size: x-small; font-family: system; font-weight: normal; font-style: normal; text-decoration: none; text-align: center;" href="mac65.htm#tableofcontents"><img src="decor/u_arrow.gif" alt="Table of Contents" border=0 height=13 width=13>
Table of Contents</a></td></tr></table>
<hr width="96%" size="1" color="#FFFFFF"><br>

<table width="100%"><tr><td align="right"><table width="99%"><tr><td>
<a name="assemblerexpressions" style="font-size: large; font-family: Arial Black; color: #a62626; font-weight: bold;">
Section 3.6 </a>
<a style="font-size: medium; font-family: Courier New; color: #4646b6; font-weight: bold;">
&nbsp; (ASSEMBLER EXPRESSIONS)</a><br><br>
<a style="font-size: small; font-family: Courier; color: #121212; font-weight: bold;">
An expression is any valid combination of operands and operators which the assembler will evaluate to
a 16-bit unsigned number with any overflow ignored. Expressions can be arithmetic or logical. The
following are examples of valid expressions:<br><br>
&nbsp;&nbsp;  10 .WORD  TABLEBASE+LINE+COLUMN<br>
&nbsp;&nbsp;  55 .IF .DEF INTEGER .AND [ VER=1 .OR VER &gt;=3 ]<br>
&nbsp; 200 .BYTE &gt;EXPLOT-1, &gt;EXDRAW-1, &gt;EXFILL-1<br>
&nbsp; 300 LDA # &lt;[ &lt; ADDRESS^-1 ] +1<br>
&nbsp; 305 CMP # -1<br>
&nbsp; 400 CPX # 'A<br>
&nbsp; 440 INC #1+1
<br><br></a></td></tr></table></td></tr></table>
<table align="center">
<tr><td align="center"><a style="color: #0404a0; font-size: x-small; font-family: system; font-weight: normal; font-style: normal; text-decoration: none; text-align: center;" href="mac65.htm#chapter3"><img src="decor/l_arrow.gif" alt="Chapter 3" border=0 height=13 width=13>
chapter 3&nbsp; &nbsp; &nbsp; &nbsp;</a></td>
<td><a style="color: #0404a0; font-size: x-small; font-family: system; font-weight: normal; font-style: normal; text-decoration: none; text-align: center;" href="mac65.htm#tableofcontents"><img src="decor/u_arrow.gif" alt="Table of Contents" border=0 height=13 width=13>
Table of Contents</a></td></tr></table>
<hr width="96%" size="1" color="#FFFFFF"><br>

<table width="100%"><tr><td align="right"><table width="99%"><tr><td>
<a name="operatorprecedence" style="font-size: large; font-family: Arial Black; color: #a62626; font-weight: bold;">
Section 3.7 </a>
<a style="font-size: medium; font-family: Courier New; color: #4646b6; font-weight: bold;">
&nbsp; (OPERATOR PRECEDENCE)</a><br><br>
<a style="font-size: small; font-family: Courier; color: #121212; font-weight: bold;">
The following are the precedence levels (high to low) used in evaluating assembler expressions:<br><br>
&nbsp; [ ] (psuedo parenthesis)<br>
&nbsp;  &gt; (high byte), &lt; (low byte), .DEF, .REF, - (unary)<br>
&nbsp; .NOT<br>
&nbsp; *, /<br>
&nbsp; +, -<br>
&nbsp; &, !,  ^<br>
&nbsp; =, &gt;. &lt;, &lt;=, &gt;=, &lt;&gt; (comparison operators)<br>
&nbsp; .AND<br>
&nbsp; .OR<br><br>
Operators grouped on the same line have equal precedence and will be executed in left-to-right order
unless higher precedence operator(s) intervene.
<br><br></a></td></tr></table></td></tr></table>
<table align="center">
<tr><td align="center"><a style="color: #0404a0; font-size: x-small; font-family: system; font-weight: normal; font-style: normal; text-decoration: none; text-align: center;" href="mac65.htm#chapter3"><img src="decor/l_arrow.gif" alt="Chapter 3" border=0 height=13 width=13>
chapter 3&nbsp; &nbsp; &nbsp; &nbsp;</a></td>
<td><a style="color: #0404a0; font-size: x-small; font-family: system; font-weight: normal; font-style: normal; text-decoration: none; text-align: center;" href="mac65.htm#tableofcontents"><img src="decor/u_arrow.gif" alt="Table of Contents" border=0 height=13 width=13>
Table of Contents</a></td></tr></table>
<hr width="96%" size="1" color="#FFFFFF"><br>

<table width="100%"><tr><td align="right"><table width="99%"><tr><td>
<a name="numericconstants" style="font-size: large; font-family: Arial Black; color: #a62626; font-weight: bold;">
Section 3.8 </a>
<a style="font-size: medium; font-family: Courier New; color: #4646b6; font-weight: bold;">
&nbsp; (NUMERIC CONSTANTS)</a><br><br>
<a style="font-size: small; font-family: Courier; color: #121212; font-weight: bold;">
MAC/65 accepts three types of numeric constants:  decimal, hexadecimal, and characters.<br><br>
A decimal constant is simply a decimal number in the range 0 through 65535; an attempt to use a decimal
number beyond these bounds may or may not work and will certainly produce unexpected and undesired
results.<br><br>
&nbsp;EXAMPLES:  1&nbsp; 234&nbsp; 65200&nbsp; 32767<br>
(as used:) .BYTE 2,4,8,16,32,64<br>
&nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp; LDA #1<br><br>
A hexadecimal constant consists of a dollar sign followed by one to four legal hexadecimal digits
(0,1,2,3,4,5,6,7,8,9,A,B,C,D,E,F). Again, usage of more than four digits may produce unwanted results.
<br><br>
&nbsp;EXAMPLES: $1 $EA $FF00 $7FFF<br>
(as used:) .WORD $100,$200,$400,$800,$1000<br>
&nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp; AND #$7F<br><br>
A character constant is an apostrophe followed by any printable or displayable character. The value of
a character constant is the ASCII (or ATASCII) value of the character following the apostrophe.<br><br>
&nbsp;EXAMPLES: 'A '* '&quot; '=<br>
(as used:) CMP #'=<br>
&nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp; CMP #'Z+1 ; same as #$5B
<br><br></a></td></tr></table></td></tr></table>
<table align="center">
<tr><td align="center"><a style="color: #0404a0; font-size: x-small; font-family: system; font-weight: normal; font-style: normal; text-decoration: none; text-align: center;" href="mac65.htm#chapter3"><img src="decor/l_arrow.gif" alt="Chapter 3" border=0 height=13 width=13>
chapter 3&nbsp; &nbsp; &nbsp; &nbsp;</a></td>
<td><a style="color: #0404a0; font-size: x-small; font-family: system; font-weight: normal; font-style: normal; text-decoration: none; text-align: center;" href="mac65.htm#tableofcontents"><img src="decor/u_arrow.gif" alt="Table of Contents" border=0 height=13 width=13>
Table of Contents</a></td></tr></table>
<hr width="96%" size="1" color="#FFFFFF"><br>

<table width="100%"><tr><td align="right"><table width="99%"><tr><td>
<a name="strings" style="font-size: large; font-family: Arial Black; color: #a62626; font-weight: bold;">
Section 3.9 </a>
<a style="font-size: medium; font-family: Courier New; color: #4646b6; font-weight: bold;">
&nbsp; (STRINGS)</a><br><br>
<a style="font-size: small; font-family: Courier; color: #121212; font-weight: bold;">
Strings are of two types. String literals<br>
(example:&nbsp; &quot;This is a string literal&quot;),<br>
and string variables for Macros<br>
(example:&nbsp; %$5).<br><br>
&nbsp; Example:&nbsp; 10 .BYTE &quot;A STRING OF CHARACTERS&quot;<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; or<br>
&nbsp; Example:&nbsp; 20 .SBYTE %$1
<br><br></a></td></tr></table></td></tr></table>
<table align="center">
<tr><td align="center"><a style="color: #0404a0; font-size: x-small; font-family: system; font-weight: normal; font-style: normal; text-decoration: none; text-align: center;" href="mac65.htm#chapter3"><img src="decor/l_arrow.gif" alt="Chapter 3" border=0 height=13 width=13>
chapter 3&nbsp; &nbsp; &nbsp; &nbsp;</a></td>
<td><a style="color: #0404a0; font-size: x-small; font-family: system; font-weight: normal; font-style: normal; text-decoration: none; text-align: center;" href="mac65.htm#tableofcontents"><img src="decor/u_arrow.gif" alt="Table of Contents" border=0 height=13 width=13>
Table of Contents</a></td></tr></table>
<hr width="96%" size="4" color="#FFFFFF"><br>

<table width="100%"><tr><td align="right"><table width="99%"><tr><td>
<a name="chapter4" style="font-size: large; font-family: Arial; color: #366636; font-weight: bold;">
CHAPTER 4: &nbsp; </a>
<a style="font-size: large; font-family: Arial Black; color: #a62626; font-weight: bold;">
DIRECTIVES</a><br><br>
<a style="font-size: small; font-family: Courier; color: #121212; font-weight: bold;">
As noted in </a>
<a style="font-size: small; font-family: Arial; color: #0404c0; text-decoration: underline;" href="mac65.htm#assemblerinput">
section 3.1 </a>
<a style="font-size: small; font-family: Courier; color: #121212; font-weight: bold;">
, the instruction field of an assembled line may contain an assembler directive (instead of a valid
6502 instruction). This chapter will list and describe, in roughly alphabetical order, all the
directives legal under MAC/65 (excepting directives specific to macros, which will be discussed
separately in </a>
<a style="font-size: small; font-family: Arial; color: #0404c0; text-decoration: underline;" href="mac65.htm#chapter5">
Chapter 5 </a>
<a style="font-size: small; font-family: Courier; color: #121212; font-weight: bold;">
).<br><br>
Directives may be classified into three types: (1) those which produce object code for use by the
assembled program (e.g., .BYTE, .WORD, etc.); (2) those which direct the assembler to perform some
task, such as changing where in memory the object code should go or giving a value to a label (e.g.,
*=, =, etc.); and (3) those which are provided for the convenience of the programmer, giving him/her
control over listing format, location of source, etc. (e.g., .TITLE, .OPT, .INCLUDE).<br><br>
Obviously, we could in theory do without the type 3 directives; but, as you read the descriptions that
follow, you will soon discover that in practice these directives are most useful in helping your 6502
assembly language production. Incidentally, all the macro-specific directives could presumably be
classified as type 3.<br><br>
Three of the directives which follow (.PAGE, .TITLE, and .ERROR) allow the user to specify a string
(enclosed in quotes) which will be printed out. For these three directives, the user is limited to a
maximum string length of 70 characters. Strings longer than 70 characters will be truncated.
<br><br></a></td></tr></table></td></tr></table>
<table align="center">
<tr><td align="center"><a style="color: #0404a0; font-size: x-small; font-family: system; font-weight: normal; font-style: normal; text-decoration: none; text-align: center;" href="mac65.htm#chapter3"><img src="decor/l_arrow.gif" alt="Chapter 3" border=0 height=13 width=13>
chapter 3&nbsp; &nbsp; &nbsp; &nbsp;</a></td>
<td><a style="color: #0404a0; font-size: x-small; font-family: system; font-weight: normal; font-style: normal; text-decoration: none; text-align: center;" href="mac65.htm#tableofcontents"><img src="decor/u_arrow.gif" alt="Table of Contents" border=0 height=13 width=13>
Table of Contents</a></td></tr></table>
<hr width="96%" size="1" color="#FFFFFF"><br>

<table width="100%"><tr><td align="right"><table width="99%"><tr><td>
<a name="*=" style="font-size: large; font-family: Arial Black; color: #a62626; font-weight: bold;">
Section 4.1 </a>
<a style="font-size: medium; font-family: Courier New; color: #4646b6; font-weight: bold;">
&nbsp; (directive: *= )</a><br><br>
<a style="font-size: small; font-family: Courier; color: #121212; font-weight: bold;">
purpose:&nbsp; change current origin of the assembler's location counter<br><br>
usage:&nbsp; [label] *= expression<br><br>
The *= directive will assign the value of the expression to the location counter. The expression cannot
be forward referenced. *= must be written with no intervening spaces.<br><br>
Example: 50 *= $1234 ;sets the location counter to $1234<br><br>
Another common usage of *= is to reserve space for data to be filled in or used at run time. Since the
single character &quot;*&quot; may be treated as a label referencing the current location counter
value, the form &quot;*= *+exp&quot; is thus the most common way to reserve &quot;exp&quot; bytes for
later use.<br><br>
Example: 70 LOC *= *+1 ;assigns the current value of the<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; location counter to LOC and then<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; advances the counter by one.<br>
<br>
(Thus LOC may be thought of as a one byte reserved memory cell.)<br><br>
CAUTION: Because any label associated with this directive is assigned the value of the location
counter BEFORE the directive is executed, it is NOT advisable to give a label to &quot;=&quot; unless,
indeed, it is being used as in the second example (i.e., as a memory reserver).<br><br>
NOTE: Some assemblers use &quot;ORG&quot; instead of &quot;*=&quot; and may also have a separate
directive (such as &quot;DS&quot; or &quot;RMB&quot;) for &quot;defining storage&quot; or
&quot;reserving memory bytes&quot;. Use caution when converting from and to such assemblers; pay
special attention to label usage. When in doubt, move the label to the next preceding or next following
line, as appropriate.
<br><br></a></td></tr></table></td></tr></table>
<table align="center">
<tr><td align="center"><a style="color: #0404a0; font-size: x-small; font-family: system; font-weight: normal; font-style: normal; text-decoration: none; text-align: center;" href="mac65.htm#chapter4"><img src="decor/l_arrow.gif" alt="Chapter 4" border=0 height=13 width=13>
chapter 4&nbsp; &nbsp; &nbsp; &nbsp;</a></td>
<td><a style="color: #0404a0; font-size: x-small; font-family: system; font-weight: normal; font-style: normal; text-decoration: none; text-align: center;" href="mac65.htm#tableofcontents"><img src="decor/u_arrow.gif" alt="Table of Contents" border=0 height=13 width=13>
Table of Contents</a></td></tr></table>
<hr width="96%" size="1" color="#FFFFFF"><br>

<table width="100%"><tr><td align="right"><table width="99%"><tr><td>
<a name="=" style="font-size: large; font-family: Arial Black; color: #a62626; font-weight: bold;">
Section 4.2 </a>
<a style="font-size: medium; font-family: Courier New; color: #4646b6; font-weight: bold;">
&nbsp; (directive: = )</a><br><br>
<a style="font-size: small; font-family: Courier; color: #121212; font-weight: bold;">
purpose: assigns a value to a label<br><br>
usage: label = expression<br><br>
The = directive will equate &quot;label&quot; with the value of the expression. A &quot;label&quot;
can be equated via &quot;=&quot; only once within a program.<br><br>
Example: 10 PLAYER0 = PMBASE + $200<br><br>
Note: If a &quot;label&quot; is equated more than once, &quot;label&quot; will contain the value of
the most recent equate. This process, however, will result in an assembly error.
<br><br></a></td></tr></table></td></tr></table>
<table align="center">
<tr><td align="center"><a style="color: #0404a0; font-size: x-small; font-family: system; font-weight: normal; font-style: normal; text-decoration: none; text-align: center;" href="mac65.htm#chapter4"><img src="decor/l_arrow.gif" alt="Chapter 4" border=0 height=13 width=13>
chapter 4&nbsp; &nbsp; &nbsp; &nbsp;</a></td>
<td><a style="color: #0404a0; font-size: x-small; font-family: system; font-weight: normal; font-style: normal; text-decoration: none; text-align: center;" href="mac65.htm#tableofcontents"><img src="decor/u_arrow.gif" alt="Table of Contents" border=0 height=13 width=13>
Table of Contents</a></td></tr></table>
<hr width="96%" size="1" color="#FFFFFF"><br>

<table width="100%"><tr><td align="right"><table width="99%"><tr><td>
<a name=".=" style="font-size: large; font-family: Arial Black; color: #a62626; font-weight: bold;">
Section 4.3 </a>
<a style="font-size: medium; font-family: Courier New; color: #4646b6; font-weight: bold;">
&nbsp; (directive: .= )</a><br><br>
<a style="font-size: small; font-family: Courier; color: #121212; font-weight: bold;">
purpose: assign a possibly transitory value to a label<br><br>
usage: label .= expression<br><br>
The .= directive will SET &quot;label&quot; with the value of the expression. Using this directive, a
&quot;label&quot; may be set to one or more values as many times as needed in the same program.<br><br>
EXAMPLE:<br><br>
&nbsp; 10 LBL  .= 5<br>
&nbsp; 20 &nbsp; LDA #LBL  ;same as LDA #5<br>
&nbsp; 30 LBL  .= 3+'A<br>
&nbsp; 40 &nbsp; LDA #LBL  ;same as LDA #68<br><br>
CAUTION: A label which has been equated (via the &quot;=&quot; directive) or assigned a value through
usage as an instruction label may not then be set to another value by &quot;.=&quot;.
<br><br></a></td></tr></table></td></tr></table>
<table align="center">
<tr><td align="center"><a style="color: #0404a0; font-size: x-small; font-family: system; font-weight: normal; font-style: normal; text-decoration: none; text-align: center;" href="mac65.htm#chapter4"><img src="decor/l_arrow.gif" alt="Chapter 4" border=0 height=13 width=13>
chapter 4&nbsp; &nbsp; &nbsp; &nbsp;</a></td>
<td><a style="color: #0404a0; font-size: x-small; font-family: system; font-weight: normal; font-style: normal; text-decoration: none; text-align: center;" href="mac65.htm#tableofcontents"><img src="decor/u_arrow.gif" alt="Table of Contents" border=0 height=13 width=13>
Table of Contents</a></td></tr></table>
<hr width="96%" size="1" color="#FFFFFF"><br>

<table width="100%"><tr><td align="right"><table width="99%"><tr><td>
<a name=".byte" style="font-size: large; font-family: Arial Black; color: #a62626; font-weight: bold;">
Section 4.4 </a>
<a style="font-size: medium; font-family: Courier New; color: #4646b6; font-weight: bold;">
&nbsp; (directive: .BYTE [and .SBYTE] )</a><br><br>
<a style="font-size: small; font-family: Courier; color: #121212; font-weight: bold;">
purpose: specifies the contents of individual bytes in the output object<br><br>
usage:<br>
[label] .BYTE  [+exp,] (exp)(strvar)[,(exp)(strvar) ...]<br>
[label] .SBYTE [+exp,](exp)(strvar)[,(exp)(strvar) ...]<br><br>
The .BYTE and .SBYTE directives allow the user to generate individual bytes of memory image in the
output object. Expressions must evaluate to an 8-bit arithmetic result. A strvar will generate as many
bytes as the length of the string. .BYTE simply assembles the bytes as entered, while .SBYTE will
convert the bytes to Atari screen codes (on the Atari) or to characters with their most significant
bit on (on the Apple II).<br><br>
Example:&nbsp; 100 .BYTE &quot;ABC&quot; , 3, -1<br><br>
This example will produce the following output bytes:<br>
&nbsp; &nbsp; &nbsp; 41 42 43 03 FF.<br><br>
Note that the negative expression was truncated to a single byte value.<br><br>
Example:&nbsp; 50 .SBYTE &quot;Hello!&quot;<br><br>
On the Atari, this example will produce the following screen codes:<br>
&nbsp; &nbsp; &nbsp; 28 65 6C 6C 6F 01.<br><br>
On the Apple II, the same example would produce the following bytes:<br>
&nbsp; &nbsp; &nbsp; C8 E5 EC EC DF A1.<br><br>
SPECIAL NOTE: Both .BYTE and .SBYTE allow an additive Modifier. A Modifier is an expression which will
be added to all of bytes assembled. The assembler recognizes the Modifier expression by the presence
of the &quot;+&quot; character. The Modifier expression will not itself be generated as part of the
output.<br><br>
Example:&nbsp; 5 .BYTE +$80 , &quot;ABC&quot; , -1<br><br>
This example will produce the following bytes:<br>
&nbsp; &nbsp; &nbsp; C1 C2 C3 7F<br><br>
Example:&nbsp; 100 .BYTE +$80,&quot;DEF&quot;,'G+$80<br><br>
This example will produce:&nbsp; C4 C5 C6 47.<br><br>
(Note especially the effect of adding $80 via the modifier and also adding it to the particular byte.
The result is an unchanged byte, since we have added a total of 256 ($100), which does not change the
lower byte of a 16 bit result.)<br><br>
Example:&nbsp; 55 .SBYTE +$40 , &quot;A12&quot;<br><br>
This example will produce:<br>
&nbsp; &nbsp; &nbsp; 61 51 52 Atari<br>
&nbsp; &nbsp; &nbsp; 01 F1 F2 Apple II.<br><br>
Example:&nbsp; 80 .SBYTE +$C0,&quot;G-$C0,&quot;REEN&quot;<br><br>
This example will produce:<br>
&nbsp; &nbsp; &nbsp; 27 F2 E5 E5 EE Atari<br>
&nbsp; &nbsp; &nbsp; C7 92 85 85 8E Apple II.<br><br>
Note: .SBYTE performs its conversions according to a numerical algorithm and does NOT special case any
control characters, including BELL, TAB, etc.--these characters ARE converted.
<br><br></a></td></tr></table></td></tr></table>
<table align="center">
<tr><td align="center"><a style="color: #0404a0; font-size: x-small; font-family: system; font-weight: normal; font-style: normal; text-decoration: none; text-align: center;" href="mac65.htm#chapter4"><img src="decor/l_arrow.gif" alt="Chapter 4" border=0 height=13 width=13>
chapter 4&nbsp; &nbsp; &nbsp; &nbsp;</a></td>
<td><a style="color: #0404a0; font-size: x-small; font-family: system; font-weight: normal; font-style: normal; text-decoration: none; text-align: center;" href="mac65.htm#tableofcontents"><img src="decor/u_arrow.gif" alt="Table of Contents" border=0 height=13 width=13>
Table of Contents</a></td></tr></table>
<hr width="96%" size="1" color="#FFFFFF"><br>

<table width="100%"><tr><td align="right"><table width="99%"><tr><td>
<a name=".cbyte" style="font-size: large; font-family: Arial Black; color: #a62626; font-weight: bold;">
Section 4.5 </a>
<a style="font-size: medium; font-family: Courier New; color: #4646b6; font-weight: bold;">
&nbsp; (directive: .CBYTE )</a><br><br>
<a style="font-size: small; font-family: Courier; color: #121212; font-weight: bold;">
purpose: same as .BYTE except that the most<br>
&nbsp; &nbsp;&nbsp; &nbsp; &nbsp; significant bit of the last byte of<br>
&nbsp; &nbsp;&nbsp; &nbsp; &nbsp; a string argument is inverted<br><br>
usage: [label] .CBYTE [+exp,](exp)(strvar) [,(exp)(strvar)...]<br><br>
The .CBYTE directive may often be used to advantage when building tables of strings, etc., where it is
desirable to indicate the end of a string by some method other than, for example, storing a following
zero byte. By inverting the sense of the upper bit of that last character of the string, a routine
reading the strings from the table could easily do a BMI or BPL as it reads each character.<br><br>
Example:&nbsp; ERRORS .CBYTE 1,&quot;SYSTEM&quot;<br><br>
The line shown would produce these object bytes:<br>
&nbsp; &nbsp; &nbsp; 01 53 59 53 54 45 CE<br><br>
And a subroutine might access the characters thus:<br>
&nbsp; &nbsp; &nbsp; LDY #1<br>
&nbsp; LOOP LDA ERRORS,Y<br>
&nbsp; &nbsp; &nbsp; BMI ENDOFSTRING<br>
&nbsp; &nbsp; &nbsp; INY<br>
&nbsp; &nbsp; &nbsp; BNE LOOP<br>
&nbsp; &nbsp; &nbsp; &nbsp; ...<br>
&nbsp; &nbsp; &nbsp; ENDOFSTRING<br>
&nbsp; &nbsp; &nbsp; &nbsp; ...<br>
<br><br></a></td></tr></table></td></tr></table>
<table align="center">
<tr><td align="center"><a style="color: #0404a0; font-size: x-small; font-family: system; font-weight: normal; font-style: normal; text-decoration: none; text-align: center;" href="mac65.htm#chapter4"><img src="decor/l_arrow.gif" alt="Chapter 4" border=0 height=13 width=13>
chapter 4&nbsp; &nbsp; &nbsp; &nbsp;</a></td>
<td><a style="color: #0404a0; font-size: x-small; font-family: system; font-weight: normal; font-style: normal; text-decoration: none; text-align: center;" href="mac65.htm#tableofcontents"><img src="decor/u_arrow.gif" alt="Table of Contents" border=0 height=13 width=13>
Table of Contents</a></td></tr></table>
<hr width="96%" size="1" color="#FFFFFF"><br>

<table width="100%"><tr><td align="right"><table width="99%"><tr><td>
<a name=".dbyte" style="font-size: large; font-family: Arial Black; color: #a62626; font-weight: bold;">
Section 4.6 </a>
<a style="font-size: medium; font-family: Courier New; color: #4646b6; font-weight: bold;">
&nbsp; (directive: .DBYTE )</a><br><br>
<a style="font-size: small; font-family: Courier; color: #121212; font-weight: bold;">
Directive: DBYTE  [ see also .WORD ]<br><br>
purpose: specifies Dual BYTE values to be placed in the output object.<br><br>
usage: [label] .DBYTE exp [ ,exp ... ]<br><br>
Both the .WORD and .DBYTE directives will put the value of each expression into the object code as two
bytes. However, while .WORD will assemble the expression(s) in 6502 address order (least significant
byte, most significant byte), .DBYTE will assemble the expression(s) in the reverse order (i.e., most
significant byte, least significant byte).<br><br>
.DBYTE has limited usage in a 6502 environment, and it would most probably be used in building tables
where its reversed order might be more desirable.<br><br>
EXAMPLE:&nbsp; .DBYTE $1234,1,-1<br>
produces:  12 34 00 01 FF FF<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .WORD $1234,1,-1<br>
produces:  34 12 01 00 FF FF
<br><br></a></td></tr></table></td></tr></table>
<table align="center">
<tr><td align="center"><a style="color: #0404a0; font-size: x-small; font-family: system; font-weight: normal; font-style: normal; text-decoration: none; text-align: center;" href="mac65.htm#chapter4"><img src="decor/l_arrow.gif" alt="Chapter 4" border=0 height=13 width=13>
chapter 4&nbsp; &nbsp; &nbsp; &nbsp;</a></td>
<td><a style="color: #0404a0; font-size: x-small; font-family: system; font-weight: normal; font-style: normal; text-decoration: none; text-align: center;" href="mac65.htm#tableofcontents"><img src="decor/u_arrow.gif" alt="Table of Contents" border=0 height=13 width=13>
Table of Contents</a></td></tr></table>
<hr width="96%" size="1" color="#FFFFFF"><br>

<table width="100%"><tr><td align="right"><table width="98%" bgcolor="#f0f0b0"><tr><td>
<a name=".ds" style="font-size: large; font-family: Arial Black; color: #a62626; font-weight: bold;">
Section 4.x </a>
<a style="font-size: medium; font-family: Courier New; color: #4646b6; font-weight: bold;">
&nbsp; (directive: .DS )</a><br><br>
<a style="font-size: small; font-family: Courier; color: #080850; font-weight: bold;">
purpose: reserves space for data without initializing the space to any particular value(s).<br><br>
usage: [label] .DS expression<br><br>
Using &quot;.DS expression&quot; is exactly equivalent of using<br> &quot;*= *+expression&quot;. That
is, the label (if it is given) is set equal to the current value of the location counter. Then the
value of the expression is added to the location counter.<br><br>
Example: &nbsp;BUFFERLEN .DS 1 &nbsp;;reserve a single byte<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; BUFFER &nbsp;&nbsp; .DS 256 &nbsp;;reserve 256 bytes
</a></td></tr></table><br></td></tr></table>
<table align="center">
<tr><td align="center"><a style="color: #0404a0; font-size: x-small; font-family: system; font-weight: normal; font-style: normal; text-decoration: none; text-align: center;" href="mac65.htm#chapter4"><img src="decor/l_arrow.gif" alt="Chapter 4" border=0 height=13 width=13>
chapter 4&nbsp; &nbsp; &nbsp; &nbsp;</a></td>
<td><a style="color: #0404a0; font-size: x-small; font-family: system; font-weight: normal; font-style: normal; text-decoration: none; text-align: center;" href="mac65.htm#tableofcontents"><img src="decor/u_arrow.gif" alt="Table of Contents" border=0 height=13 width=13>
Table of Contents</a></td></tr></table>
<hr width="96%" size="1" color="#FFFFFF"><br>

<table width="100%"><tr><td align="right"><table width="99%"><tr><td>
<a name=".else" style="font-size: large; font-family: Arial Black; color: #a62626; font-weight: bold;">
Section 4.7 </a>
<a style="font-size: medium; font-family: Courier New; color: #4646b6; font-weight: bold;">
&nbsp; (directive: .ELSE )</a><br><br>
<a style="font-size: small; font-family: Courier; color: #121212; font-weight: bold;">
purpose: SEE description of </a>
<a name=" " style="font-size: small; font-family: Arial; color: #0404c0; text-decoration: underline;" href="mac65.htm#.if">
.IF </a>
<a style="font-size: small; font-family: Courier; color: #121212; font-weight: bold;"> 
&nbsp;for purpose and usage.
<br><br></a></td></tr></table></td></tr></table>
<table align="center">
<tr><td align="center"><a style="color: #0404a0; font-size: x-small; font-family: system; font-weight: normal; font-style: normal; text-decoration: none; text-align: center;" href="mac65.htm#chapter4"><img src="decor/l_arrow.gif" alt="Chapter 4" border=0 height=13 width=13>
chapter 4&nbsp; &nbsp; &nbsp; &nbsp;</a></td>
<td><a style="color: #0404a0; font-size: x-small; font-family: system; font-weight: normal; font-style: normal; text-decoration: none; text-align: center;" href="mac65.htm#tableofcontents"><img src="decor/u_arrow.gif" alt="Table of Contents" border=0 height=13 width=13>
Table of Contents</a></td></tr></table>
<hr width="96%" size="1" color="#FFFFFF"><br>

<table width="100%"><tr><td align="right"><table width="99%"><tr><td>
<a name=".end" style="font-size: large; font-family: Arial Black; color: #a62626; font-weight: bold;">
Section 4.8 </a>
<a style="font-size: medium; font-family: Courier New; color: #4646b6; font-weight: bold;">
&nbsp; (directive: .END )</a><br><br>
<a style="font-size: small; font-family: Courier; color: #121212; font-weight: bold;">
directive: .END<br><br>
purpose: terminate an in-memory assembly<br><br>
usage: [label] .END<br><br>
The .END directive will terminate the assembly ONLY if the source is being read from memory. Otherwise,
.END will have no effect on assembly.<br><br>
This &quot;no effect&quot; is handy in that you may thus .INCLUDE file(s) without having to edit out
any .END statements they might contain. In truth, .END is generally not needed at all with MAC/65,
<br><br></a></td></tr></table></td></tr></table>
<table align="center">
<tr><td align="center"><a style="color: #0404a0; font-size: x-small; font-family: system; font-weight: normal; font-style: normal; text-decoration: none; text-align: center;" href="mac65.htm#chapter4"><img src="decor/l_arrow.gif" alt="Chapter 4" border=0 height=13 width=13>
chapter 4&nbsp; &nbsp; &nbsp; &nbsp;</a></td>
<td><a style="color: #0404a0; font-size: x-small; font-family: system; font-weight: normal; font-style: normal; text-decoration: none; text-align: center;" href="mac65.htm#tableofcontents"><img src="decor/u_arrow.gif" alt="Table of Contents" border=0 height=13 width=13>
Table of Contents</a></td></tr></table>
<hr width="96%" size="1" color="#FFFFFF"><br>

<table width="100%"><tr><td align="right"><table width="99%"><tr><td>
<a name=".endif" style="font-size: large; font-family: Arial Black; color: #a62626; font-weight: bold;">
Section 4.9 </a>
<a style="font-size: medium; font-family: Courier New; color: #4646b6; font-weight: bold;">
&nbsp; (directive: .ENDIF )</a><br><br>
<a style="font-size: small; font-family: Courier; color: #121212; font-weight: bold;">
purpose: terminate a conditional assembly block
<br><br>
SEE description of </a>
<a name=" " style="font-size: small; font-family: Arial; color: #0404c0; text-decoration: underline;" href="mac65.htm#.if">
.IF </a>
<a style="font-size: small; font-family: Courier; color: #121212; font-weight: bold;"> 
&nbsp;for usage and details.
<br><br></a></td></tr></table></td></tr></table>
<table align="center">
<tr><td align="center"><a style="color: #0404a0; font-size: x-small; font-family: system; font-weight: normal; font-style: normal; text-decoration: none; text-align: center;" href="mac65.htm#chapter4"><img src="decor/l_arrow.gif" alt="Chapter 4" border=0 height=13 width=13>
chapter 4&nbsp; &nbsp; &nbsp; &nbsp;</a></td>
<td><a style="color: #0404a0; font-size: x-small; font-family: system; font-weight: normal; font-style: normal; text-decoration: none; text-align: center;" href="mac65.htm#tableofcontents"><img src="decor/u_arrow.gif" alt="Table of Contents" border=0 height=13 width=13>
Table of Contents</a></td></tr></table>
<hr width="96%" size="1" color="#FFFFFF"><br>

<table width="100%"><tr><td align="right"><table width="99%"><tr><td>
<a name=".error" style="font-size: large; font-family: Arial Black; color: #a62626; font-weight: bold;">
Section 4.10 </a>
<a style="font-size: medium; font-family: Courier New; color: #4646b6; font-weight: bold;">
&nbsp; (directive: .ERROR )</a><br><br>
<a style="font-size: small; font-family: Courier; color: #121212; font-weight: bold;">
purpose: force an assembler error and message<br><br>
usage: [label] .ERROR [string]<br><br>
The .ERROR directive allows the user to generate a pseudo error. The string specified by .ERROR will
be sent to the screen as if it were an assembler-generated error. The error will be included in the
count of errors given at the end of the assembly.<br><br>
Example:&nbsp; 100 .ERROR &quot;MISSING PARAMETER!&quot;
<br><br></a></td></tr></table></td></tr></table>
<table align="center">
<tr><td align="center"><a style="color: #0404a0; font-size: x-small; font-family: system; font-weight: normal; font-style: normal; text-decoration: none; text-align: center;" href="mac65.htm#chapter4"><img src="decor/l_arrow.gif" alt="Chapter 4" border=0 height=13 width=13>
chapter 4&nbsp; &nbsp; &nbsp; &nbsp;</a></td>
<td><a style="color: #0404a0; font-size: x-small; font-family: system; font-weight: normal; font-style: normal; text-decoration: none; text-align: center;" href="mac65.htm#tableofcontents"><img src="decor/u_arrow.gif" alt="Table of Contents" border=0 height=13 width=13>
Table of Contents</a></td></tr></table>
<hr width="96%" size="1" color="#FFFFFF"><br>

<table width="100%"><tr><td align="right"><table width="99%"><tr><td>
<a name=".float" style="font-size: large; font-family: Arial Black; color: #a62626; font-weight: bold;">
Section 4.11 </a>
<a style="font-size: medium; font-family: Courier New; color: #4646b6; font-weight: bold;">
&nbsp; (directive: .FLOAT )</a><br><br>
<a style="font-size: small; font-family: Courier; color: #121212; font-weight: bold;">
purpose: specifies floating point constant values<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; to be placed in the output object.<br><br>
usage:<br>
[label] .FLOAT floating-constant [,flotation-constant...]<br><br>
This directive would normally only be used by the programmer wishing to access the built-in floating
point routines of the Atari Operating System ROM's (or similar routines as supplied with the BASIC XL
package from OSS for Apple II or equivalent machines).<br><br>
Each floating point constant following the .FLOAT directive will produce 6 bytes of bytes of output
object code, in a format consistent with the above-mentioned floating point routines. In particular,
the first byte contains the exponent portion of the number, in excess-64 notation representing power
of 100. The upper bit of the exponent byte designates the sign of the mantissa portion. The following
5 bytes are the mantissa, in packed BCD form, normalized on a byte boundary (consistant with the
powers-of-100 exponent).<br><br>
EXAMPLES:<br>
&nbsp; &nbsp; &nbsp; .FLOAT 3.14156295,-2,718281828<br><br>
The above example would produce the following bytes in the output object code:<br><br>
&nbsp; &nbsp; &nbsp; 40 03 14 15 62 95<br>
&nbsp; &nbsp; &nbsp; C0 27 18 28 18 28<br><br>
NOTE: Only floating point constants, NOT expressions, are legal as operands to .FLOAT. Generally, this
is not a problem, since the user may perform any constant arithmetic on a calculator (or in BASIC)
before placing the result in his/her MAC/65 program.
<br><br></a></td></tr></table></td></tr></table>
<table align="center">
<tr><td align="center"><a style="color: #0404a0; font-size: x-small; font-family: system; font-weight: normal; font-style: normal; text-decoration: none; text-align: center;" href="mac65.htm#chapter4"><img src="decor/l_arrow.gif" alt="Chapter 4" border=0 height=13 width=13>
chapter 4&nbsp; &nbsp; &nbsp; &nbsp;</a></td>
<td><a style="color: #0404a0; font-size: x-small; font-family: system; font-weight: normal; font-style: normal; text-decoration: none; text-align: center;" href="mac65.htm#tableofcontents"><img src="decor/u_arrow.gif" alt="Table of Contents" border=0 height=13 width=13>
Table of Contents</a></td></tr></table>
<hr width="96%" size="1" color="#FFFFFF"><br>

<table width="100%"><tr><td align="right"><table width="99%"><tr><td>
<a name=".if" style="font-size: large; font-family: Arial Black; color: #a62626; font-weight: bold;">
Section 4.12 </a>
<a style="font-size: medium; font-family: Courier New; color: #4646b6; font-weight: bold;">
&nbsp; (directive: .IF )</a><br><br>
<a style="font-size: small; font-family: Courier; color: #121212; font-weight: bold;">
purpose: choose to perform or not perform some portion of an assembly based
on the &quot;truth&quot; of an expression.<br><br>
usage: .IF  exp<br>
&nbsp; &nbsp; &nbsp; [.ELSE]<br>
&nbsp; &nbsp; &nbsp; .ENDIF<br><br>
usage note: there may be any number of lines of assembly language code or directives between ]IF and
.ELSE or .ENDIF and similarly between .ELSE and .ENDIF.<br><br>
When a .IF is encountered, the following expression is evaluated. If it is non-zero (TRUE), the source
lines following .IF will be assembled, continuing until an .ELSE or .ENDIF is encountered. If an .ELSE
is encountered before an .ENDIF, then all the source lines between the .ELSE and the corresponding
.ENDIF will not be assembled. If the expression evaluates to zero (false), the source lines following
.IF will not be assembled. Assembly will resume when a corresponding .ENDIF or an .ELSE is encountered.
<br><br>
The .IF-.ENDIF and .IF-.ELSE-.ENDIF constructs may be nested to a depth of 14 levels. When nested, the
&quot;search&quot; for the &quot;corresponding&quot; .ELSE or .ENDIF skips over complete .IF-.ENDIF
constructs if necessary.<br><br>
Examples:<br><br>
&nbsp; 10  .IF 1 &nbsp; &nbsp; &nbsp; ; non-zero, therefore true<br>
&nbsp; 20  LDA # '? &nbsp;&nbsp; ; these two lines will<br>
&nbsp; 30  JSR CHAROUT ; be assembled<br>
&nbsp; 40  .ENDIF<br><br>
EXAMPLE:<br><br>
&nbsp; 10 .IF 0 &nbsp; &nbsp; &nbsp; ; expression is false<br>
&nbsp; 11 LDA # &gt;ADDRESS ; these two lines will<br>
&nbsp; 12 LDX # &lt;ADDRESS ; not be assembled<br>
&nbsp; 13 .IF 1<br>
&nbsp; 14 .ERROR &nbsp; &quot;can't get here&quot;<br>
&nbsp; 15 &nbsp; ;likewise, this can't be assembled because it<br>
&nbsp; 16 &nbsp; ;is &quot;nested&quot; within the .IF 0 structure<br>
&nbsp; 17 &nbsp; ;<br>
&nbsp; 18 .ELSE<br>
&nbsp; 19 &nbsp; ;<br>
&nbsp; 20 LDX # &lt;ADDRESS ; these lines will<br>
&nbsp; 21 LDA # &gt;ADDRESS ; be assembled<br>
&nbsp; 22 .ENDIF<br>
&nbsp; 23 JSR  PRINTSTRING ; go print the string<br><br>
Note: The assembler resets the conditional stack at the beginning of each pass. Missing .ENDIF(s) will
NOT be flagged.
<br><br></a></td></tr></table></td></tr></table>
<table align="center">
<tr><td align="center"><a style="color: #0404a0; font-size: x-small; font-family: system; font-weight: normal; font-style: normal; text-decoration: none; text-align: center;" href="mac65.htm#chapter4"><img src="decor/l_arrow.gif" alt="Chapter 4" border=0 height=13 width=13>
chapter 4&nbsp; &nbsp; &nbsp; &nbsp;</a></td>
<td><a style="color: #0404a0; font-size: x-small; font-family: system; font-weight: normal; font-style: normal; text-decoration: none; text-align: center;" href="mac65.htm#tableofcontents"><img src="decor/u_arrow.gif" alt="Table of Contents" border=0 height=13 width=13>
Table of Contents</a></td></tr></table>
<hr width="96%" size="1" color="#FFFFFF"><br>

<table width="100%"><tr><td align="right"><table width="99%"><tr><td>
<a name=".include" style="font-size: large; font-family: Arial Black; color: #a62626; font-weight: bold;">
Section 4.13 </a>
<a style="font-size: medium; font-family: Courier New; color: #4646b6; font-weight: bold;">
&nbsp; (directive: .INCLUDE )</a><br><br>
<a style="font-size: small; font-family: Courier; color: #121212; font-weight: bold;">
purpose: allows one assembly language program to request that<br>
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; another program be included and assembled in-line<br><br>
usage: .INCLUDE #filespec<br><br>
usage note: this directive should NOT have a label<br><br>
The .INCLUDE directive causes the assembler to begin reading source lines from the specified
&quot;filespec&quot;. When the end of &quot;filespec&quot; is reached, the assembler will resume
reading source from the previous file (or memory).<br><br>
CAUTION: The .INCLUDEd file MUST be a properly SAVEd MAC/65 tokenized program. It can NOT be an ASCII
file.<br><br>
Note: A .INCLUDED file cannot itself contain a .INCLUDE directive.<br><br>
EXAMPLE .INCLUDE #D:SYSEQU.M65<br><br>
This example line will include the system equates file supplied by OSS.
<br><br></a></td></tr></table></td></tr></table>
<table align="center">
<tr><td align="center"><a style="color: #0404a0; font-size: x-small; font-family: system; font-weight: normal; font-style: normal; text-decoration: none; text-align: center;" href="mac65.htm#chapter4"><img src="decor/l_arrow.gif" alt="Chapter 4" border=0 height=13 width=13>
chapter 4&nbsp; &nbsp; &nbsp; &nbsp;</a></td>
<td><a style="color: #0404a0; font-size: x-small; font-family: system; font-weight: normal; font-style: normal; text-decoration: none; text-align: center;" href="mac65.htm#tableofcontents"><img src="decor/u_arrow.gif" alt="Table of Contents" border=0 height=13 width=13>
Table of Contents</a></td></tr></table>
<hr width="96%" size="1" color="#FFFFFF"><br>

<table width="100%"><tr><td align="right"><table width="99%"><tr><td>
<a name=".local" style="font-size: large; font-family: Arial Black; color: #a62626; font-weight: bold;">
Section 4.14 </a>
<a style="font-size: medium; font-family: Courier New; color: #4646b6; font-weight: bold;">
&nbsp; (directive: .LOCAL )</a><br><br>
<a style="font-size: small; font-family: Courier; color: #121212; font-weight: bold;">
purpose: delimits a local label region<br><br>
usage: .LOCAL<br><br>
usage note: this directive should not be associated with a label.<br><br>
This directive serves to end the previous local region and begin a new local region. It is assumed that
the first local region begins at the beginning of the assembly, and the last local region ends at the
end of the assembly.<br><br>
Within each local region, any label beginning with a question mark (&quot;?&quot;) is assumed to be a
&quot;local label&quot;. As such, it is invisible to code, equates, references, etc., outside of its
own local region.<br><br>
This feature is especially handy when using automatic code generators or when several people are
working on a single project. In both these cases, the coder may use labels beginning with
&quot;7&quot; and be sure that there will be no duplicate label errors produced.<br><br>
EXAMPLE:<br><br>
&nbsp; &nbsp; 10 *= $4000<br>
&nbsp; &nbsp; 11 LDX #3 &nbsp; &nbsp; ; establish a counter<br>
&nbsp; &nbsp; 12 ?LOOP<br>
&nbsp; &nbsp; 13 LDA FROM,X ; get a byte<br>
&nbsp; &nbsp; 14 STA TO,X &nbsp; ; put a byte<br>
&nbsp; &nbsp; 15 DEX &nbsp;&nbsp; &nbsp; &nbsp; ; more to do?<br>
&nbsp; &nbsp; 16 BPL ?LOOP&nbsp; ; goes to label on line 12<br>
&nbsp; &nbsp; 17 ;<br>
&nbsp; &nbsp; 18 .LOCAL &nbsp; &nbsp; ; another local region!<br>
&nbsp; &nbsp; 19 ;<br>
&nbsp; &nbsp; 20 ?LOOP=6<br>
&nbsp; &nbsp; 21 ;<br>
&nbsp; &nbsp; 22 LDY #?LOOP ; same as LDY #6<br>
&nbsp; &nbsp; 23 (etc.)<br><br>
FEATURE: Local labels MAY be forward referenced, just like any other label.<br>
NOTE: Local labels do not appear in the symbol table listing.
<br><br></a></td></tr></table></td></tr></table>
<table align="center">
<tr><td align="center"><a style="color: #0404a0; font-size: x-small; font-family: system; font-weight: normal; font-style: normal; text-decoration: none; text-align: center;" href="mac65.htm#chapter4"><img src="decor/l_arrow.gif" alt="Chapter 4" border=0 height=13 width=13>
chapter 4&nbsp; &nbsp; &nbsp; &nbsp;</a></td>
<td><a style="color: #0404a0; font-size: x-small; font-family: system; font-weight: normal; font-style: normal; text-decoration: none; text-align: center;" href="mac65.htm#tableofcontents"><img src="decor/u_arrow.gif" alt="Table of Contents" border=0 height=13 width=13>
Table of Contents</a></td></tr></table>
<hr width="96%" size="1" color="#FFFFFF"><br>

<table width="100%"><tr><td align="right"><table width="99%"><tr><td>
<a name=".opt" style="font-size: large; font-family: Arial Black; color: #a62626; font-weight: bold;">
Section 4.15 </a>
<a style="font-size: medium; font-family: Courier New; color: #4646b6; font-weight: bold;">
&nbsp; (directive: .OPT )</a><br><br>
<a style="font-size: small; font-family: Courier; color: #121212; font-weight: bold;">
purpose: selects various assembly control OPTions<br><br>
usage: .OPT option<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; (or)<br>
&nbsp; &nbsp; &nbsp; .OPT NO option<br><br></a>

<a style="font-size: small; font-family: Courier; color: #080850; font-weight: bold;background-color: #f0f0b0">
usage: .OPT option [,[NO] option...]<br>
&nbsp; &nbsp;&nbsp; &nbsp; .OPT NO option [,[NO]option...] </a>
<a style="font-size: small; font-family: Courier; color: #121212; font-weight: bold;"><br><br>
usage notes: the valid options are as follows:<br>
&nbsp; &nbsp; &nbsp; LIST &nbsp; ERR &nbsp; EJECT &nbsp; OBJ<br>
&nbsp; &nbsp; &nbsp; MLIST&nbsp; CLIST NUM &nbsp; &nbsp; XREF<br><br>
The .OPT directive allows the user to control certain functions of the assembly.
Generally, coding &quot;.OPT option&quot; will invoke a feature or option, while
&quot;.OPT NO option&quot; will &quot;turn off&quot; that same feature.<br><br></a>

<a style="font-size: small; font-family: Courier; color: #080850; font-weight: bold;background-color: #f0f0b0">
You may use any number of options (or NO options) on a single source line. The following line is
therefore legal. </a>
<a style="font-size: small; font-family: Courier; color: #121212; font-weight: bold;"><br><br></a>
<a style="font-size: small; font-family: Courier; color: #080850; font-weight: bold;background-color: #f0f0b0">
Example: &nbsp;.OPT NO LIST,NO XREF, OBJ,ERR </a>

<a style="font-size: small; font-family: Courier; color: #121212; font-weight: bold;"><br><br>
The following are the descriptions of the individual options:<br><br>
LIST&nbsp; control the entire assembly listing.<br>
NO LIST&nbsp; turns off all listing except error lines.<br><br>
ERR&nbsp; will determine if errors are returned to the user in the listing and/or the screen.<br>
NO ERR&nbsp; is thus dangerous.<br><br>
EJECT&nbsp; controls the title and page listing.<br>
NO EJECT&nbsp; only turns off the automatic page generation; it has no effect on .PAGE requests.<br><br>
OBJ&nbsp; determines if the object code is written to the device/memory.<br>
NO OBJ&nbsp; is useful during trial assemblies. OBJ is NECESSARY when the object code is to placed in memory.<br><br>
NUM&nbsp; will auto number the assembly listing instead of using the user line numbers.
NUM will begin at 100 and increment by 1. NUM is generally not useful except for final,
&quot;pretty&quot; assemblies.<br><br>
MLIST&nbsp; controls the listing of Macro expansions.<br>
NO MLIST&nbsp; will list only the lines within a Macro expansion which generate object code.
MLIST will expand the entire Macro. NO MLIST is extraordinarly useful in producing readable listings.<br><br>
CLIST&nbsp; controls the listing of conditional assembly.<br>
NO CLIST&nbsp; will not list source lines which are not assembled. CLIST will list all lines
within the conditional construct.<br><br>
XRef&nbsp; allows the user, when cross reference has been specified in the ASM comland line,
to control which portions of the source program will be cross referenced during the assembly.<br></a>

<a style="font-size: small; font-family: Courier; color: #080850; font-weight: bold;background-color: #f0f0b0">
Any lines of source code between an .OPT NO XREF and the next succeeding .OPT XREF will not be
cross-referenced. By combining NO XREF and NO LIST, you can list and cross reference even extremely
large programs in pieces. Or you might use NO XREF to avoid indexing entries out of an INCLUDEd file.
XREF and NO XREF are useless and inoperative (but do not generate errors) if you have not specified a
cross-reference file name in the ASM command line. </a>

<a style="font-size: small; font-family: Courier; color: #121212; font-weight: bold;"><br><br>
NOTE: unless specified otherwise by the user, all of the options will assume their default settings.
The default settings for ..OPT are:<br><br>
&nbsp; &nbsp; ERR &nbsp; &nbsp; errors are reported<br>
&nbsp; &nbsp; EJECT &nbsp; pages are numbered and ejected<br>
&nbsp; &nbsp; NO NUM&nbsp; use programmer's line numbers<br>
&nbsp; &nbsp; MLIST &nbsp; all macro lines are listed<br>
&nbsp; &nbsp; CLIST &nbsp; all failed conditionals list<br>
&nbsp; &nbsp; </a>
<a style="font-size: small; font-family: Courier; color: #080850; font-weight: bold;background-color: #f0f0b0">
LIST &nbsp;&nbsp; listing IS produced </a>
<a style="font-size: small; font-family: Courier; color: #121212; font-weight: bold;"><br>
&nbsp; &nbsp; XREF &nbsp;&nbsp; continuous cross reference<br>
&nbsp; &nbsp; NO OBJ l &nbsp;SEE CAUTION !!!!!<br><br>
CAUTION: The OBJ option is handled in a special way:<br>
&nbsp; IF assembling to memory the object default is NO OBJ.<br>
&nbsp; IF assembling to a device the object option is OBJ.<br><br>
NOTE: Macro expansions with the NO NUM option will not be listed with line numbers.
<br><br></a></td></tr></table></td></tr></table>
<table align="center">
<tr><td align="center"><a style="color: #0404a0; font-size: x-small; font-family: system; font-weight: normal; font-style: normal; text-decoration: none; text-align: center;" href="mac65.htm#chapter4"><img src="decor/l_arrow.gif" alt="Chapter 4" border=0 height=13 width=13>
chapter 4&nbsp; &nbsp; &nbsp; &nbsp;</a></td>
<td><a style="color: #0404a0; font-size: x-small; font-family: system; font-weight: normal; font-style: normal; text-decoration: none; text-align: center;" href="mac65.htm#tableofcontents"><img src="decor/u_arrow.gif" alt="Table of Contents" border=0 height=13 width=13>
Table of Contents</a></td></tr></table>
<hr width="96%" size="1" color="#FFFFFF"><br>

<table width="100%"><tr><td align="right"><table width="99%"><tr><td>
<a name=".page" style="font-size: large; font-family: Arial Black; color: #a62626; font-weight: bold;">
Section 4.16 </a>
<a style="font-size: medium; font-family: Courier New; color: #4646b6; font-weight: bold;">
&nbsp; (directive: .PAGE )</a><br><br>
<a style="font-size: small; font-family: Courier; color: #121212; font-weight: bold;">
purpose: provides page headings and/or moves<br>
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; to top of next page of listing<br><br>
usage: .PAGE [ string ]<br><br>
usage note: no label should be used with .PAGE<br><br>
The .PAGE directive allows the user to specify a page heading. The page heading will be printed
below the page number and title heading.<br><br>
.PAGE will eject the next page, and prints the most recent title and page headings.<br><br>
Example:&nbsp; 300&nbsp; .PAGE &quot;EXECUTE LABEL SEARCH&quot;<br><br>
Note: The assembler will automatically eject and print the current title and page headings after
61 lines have been listed.
<br><br></a></td></tr></table></td></tr></table>
<table align="center">
<tr><td align="center"><a style="color: #0404a0; font-size: x-small; font-family: system; font-weight: normal; font-style: normal; text-decoration: none; text-align: center;" href="mac65.htm#chapter4"><img src="decor/l_arrow.gif" alt="Chapter 4" border=0 height=13 width=13>
chapter 4&nbsp; &nbsp; &nbsp; &nbsp;</a></td>
<td><a style="color: #0404a0; font-size: x-small; font-family: system; font-weight: normal; font-style: normal; text-decoration: none; text-align: center;" href="mac65.htm#tableofcontents"><img src="decor/u_arrow.gif" alt="Table of Contents" border=0 height=13 width=13>
Table of Contents</a></td></tr></table>
<hr width="96%" size="1" color="#FFFFFF"><br>

<table width="100%"><tr><td align="right"><table width="99%"><tr><td>
<a name=".sbyte" style="font-size: large; font-family: Arial Black; color: #a62626; font-weight: bold;">
Section 4.17 </a>
<a style="font-size: medium; font-family: Courier New; color: #4646b6; font-weight: bold;">
&nbsp; (directive: .SBYTE )</a><br><br>
<a style="font-size: small; font-family: Courier; color: #121212; font-weight: bold;">
purpose: produces &quot;screen&quot; bytes in output object<br><br>
usage: See .BYTE description, </a>
<a style="font-size: small; font-family: Arial; color: #0404c0; text-decoration: underline;" href="mac65.htm#.byte">
section 4.4 </a>
<br><br></td></tr></table></td></tr></table>
<table align="center">
<tr><td align="center"><a style="color: #0404a0; font-size: x-small; font-family: system; font-weight: normal; font-style: normal; text-decoration: none; text-align: center;" href="mac65.htm#chapter4"><img src="decor/l_arrow.gif" alt="Chapter 4" border=0 height=13 width=13>
chapter 4&nbsp; &nbsp; &nbsp; &nbsp;</a></td>
<td><a style="color: #0404a0; font-size: x-small; font-family: system; font-weight: normal; font-style: normal; text-decoration: none; text-align: center;" href="mac65.htm#tableofcontents"><img src="decor/u_arrow.gif" alt="Table of Contents" border=0 height=13 width=13>
Table of Contents</a></td></tr></table>
<hr width="96%" size="1" color="#FFFFFF"><br>

<table width="100%"><tr><td align="right"><table width="99%"><tr><td>
<a name=".set" style="font-size: large; font-family: Arial Black; color: #a62626; font-weight: bold;">
Section 4.18 </a>
<a style="font-size: medium; font-family: Courier New; color: #4646b6; font-weight: bold;">
&nbsp; (directive: .SET )</a><br><br>
<a style="font-size: small; font-family: Courier; color: #121212; font-weight: bold;">
purpose: controls various assembler functions<br><br>
usage: .SET dcnum1 , dcnum2<br><br>
The .SET directive allows the user to change specific variable parameters of the assembler. The dcnum1
specifies the parameter to change, and dcnum2 is the changed value. The following table summarizes the
various .SET parameters. Defaults for each parameter are given in parentheses, followed by the
allowable range of values.<br><br>
dcnum1&nbsp;dcnum2 &nbsp; &nbsp; function<br><br>
&nbsp; 0 &nbsp; (4) 1-4 &nbsp;&nbsp; sets the .BYTE and .SBYTE listing<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp; format.  1 to 4 bytes can be printed<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp; in the object code filed of the listing.<br><br>
&nbsp; 1 &nbsp; (0) 0-31 &nbsp; sets the assembly listing left margin.<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp; The specified number is the number of<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp; spaces which will be printed before<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp; the assembled source line.<br><br>
&nbsp; 2 &nbsp;(80) 40-132 set width for listing, adjust for<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp; your printer.<br><br>
&nbsp; 3 &nbsp; (12) 0,12 &nbsp;form feed select. 0 implies no form<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp; feed on printer--use multiple line<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp; feeds. Any other used as form<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp; feed char.<br><br>
&nbsp; 4 &nbsp; (66) any &nbsp; number of lines per page for listing.<br><br></a></td></tr>

<tr><td bgcolor="#f0f0b0"><a style="font-size: small; font-family: Courier; color: #080850; font-weight: bold;">

&nbsp; 5 &nbsp; (0) 0-255 &nbsp;number of spaces from semi-colon<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp; in comment field to where remainder<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp; of comment is printed.</a></td></tr>
<tr><td><br></td></tr>
<tr><td bgcolor="#f0f0b0"><a style="font-size: small; font-family: Courier; color: #080850; font-weight: bold;">
&nbsp; 6 &nbsp;(0) 0-$FFFF an offset, which is added to the<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp; location counter when an object byte<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp; is stored or written to disk. You can<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp; thus assemble code to one address but<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp; it is written to run at another address.<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp; See Chapter 8 for a complete discussion<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp; of .SET 6 capabilities</a></td></tr>
<tr><td><br></td></tr></table></td></tr></table>
<table align="center">
<tr><td align="center"><a style="color: #0404a0; font-size: x-small; font-family: system; font-weight: normal; font-style: normal; text-decoration: none; text-align: center;" href="mac65.htm#chapter4"><img src="decor/l_arrow.gif" alt="Chapter 4" border=0 height=13 width=13>
chapter 4&nbsp; &nbsp; &nbsp; &nbsp;</a></td>
<td><a style="color: #0404a0; font-size: x-small; font-family: system; font-weight: normal; font-style: normal; text-decoration: none; text-align: center;" href="mac65.htm#tableofcontents"><img src="decor/u_arrow.gif" alt="Table of Contents" border=0 height=13 width=13>
Table of Contents</a></td></tr></table>
<hr width="96%" size="1" color="#FFFFFF"><br>

<table width="100%"><tr><td align="right"><table width="99%"><tr><td>
<a name=".tab" style="font-size: large; font-family: Arial Black; color: #a62626; font-weight: bold;">
Section 4.19 </a>
<a style="font-size: medium; font-family: Courier New; color: #4646b6; font-weight: bold;">
&nbsp; (directive: .TAB )</a><br><br>
<a style="font-size: small; font-family: Courier; color: #121212; font-weight: bold;">
purpose: sets listing &quot;tab stops&quot; for readability<br><br>
usage: .TAB dcnum1 .dcnum2 .dcnum3<br><br>
The .TAB directive allows the user to specify the starting column for the listing of the instruction
field, the operand field, and the comment filed respectively. The defaults are 8,12,20.<br><br>
Example: 200&nbsp; .TAB 16,32,50<br>
&nbsp; &nbsp; &nbsp;&nbsp; &nbsp; ...<br>
&nbsp; &nbsp; &nbsp; &nbsp; 1200&nbsp; .TAB 8,12,20 ;restores defaults
<br><br></a></td></tr></table></td></tr></table>
<table align="center">
<tr><td align="center"><a style="color: #0404a0; font-size: x-small; font-family: system; font-weight: normal; font-style: normal; text-decoration: none; text-align: center;" href="mac65.htm#chapter4"><img src="decor/l_arrow.gif" alt="Chapter 4" border=0 height=13 width=13>
chapter 4&nbsp; &nbsp; &nbsp; &nbsp;</a></td>
<td><a style="color: #0404a0; font-size: x-small; font-family: system; font-weight: normal; font-style: normal; text-decoration: none; text-align: center;" href="mac65.htm#tableofcontents"><img src="decor/u_arrow.gif" alt="Table of Contents" border=0 height=13 width=13>
Table of Contents</a></td></tr></table>
<hr width="96%" size="1" color="#FFFFFF"><br>

<table width="100%"><tr><td align="right"><table width="99%"><tr><td>
<a name=".title" style="font-size: large; font-family: Arial Black; color: #a62626; font-weight: bold;">
Section 4.20 </a>
<a style="font-size: medium; font-family: Courier New; color: #4646b6; font-weight: bold;">
&nbsp; (directive: .TITLE )</a><br><br>
<a style="font-size: small; font-family: Courier; color: #121212; font-weight: bold;">
purpose: specify assembly listing heading<br><br>
usage: .TITLE string<br><br>
The .TITLE directive allows the user to specify a assembly title heading. The title string will be
printed at the top of every page following the page number.
<br><br></a></td></tr></table></td></tr></table>
<table align="center">
<tr><td align="center"><a style="color: #0404a0; font-size: x-small; font-family: system; font-weight: normal; font-style: normal; text-decoration: none; text-align: center;" href="mac65.htm#chapter4"><img src="decor/l_arrow.gif" alt="Chapter 4" border=0 height=13 width=13>
chapter 4&nbsp; &nbsp; &nbsp; &nbsp;</a></td>
<td><a style="color: #0404a0; font-size: x-small; font-family: system; font-weight: normal; font-style: normal; text-decoration: none; text-align: center;" href="mac65.htm#tableofcontents"><img src="decor/u_arrow.gif" alt="Table of Contents" border=0 height=13 width=13>
Table of Contents</a></td></tr></table>
<hr width="96%" size="1" color="#FFFFFF"><br>

<table width="100%"><tr><td align="right"><table width="99%"><tr><td>
<a name=".word" style="font-size: large; font-family: Arial Black; color: #a62626; font-weight: bold;">
Section 4.21 </a>
<a style="font-size: medium; font-family: Courier New; color: #4646b6; font-weight: bold;">
&nbsp; (directive: .WORD )</a><br><br>
<a style="font-size: small; font-family: Courier; color: #121212; font-weight: bold;">
(See also .DBYTE </a>
<a style="font-size: small; font-family: Arial; color: #0404c0; text-decoration: underline;" href="mac65.htm#.dbyte">
section 4.6 </a>
<a style="font-size: small; font-family: Courier; color: #121212; font-weight: bold;">)<br><br>
purpose: place 16 bit word values in output object<br><br>
usage: [label] .WORD exp [,exp ... ]<br><br>
The .WORD and .DBYTE directives both put the value of each following expression into the object code
as two bytes. But where .WORD will assemble the expression(s) in 6502 address order (least significant
byte, most significant byte). .DBYTE will assemble the expression(s) in reverse order (most
significant byte, least significant byte).<br><br>
Generally, for 6502 programs, .WORD is the more useful of the two, and is more compatible with the
code produced by assembled 6502 instructions.<br><br>
EXAMPLE:<br>
&nbsp; &nbsp; .DBYTE $1234,1,-1<br>
&nbsp;produces:&nbsp; 12 34 00 01 FF FF<br>
&nbsp; &nbsp; .WORD $1234,1,-1<br>
&nbsp;produces:&nbsp; 34 12 01 00 FF FF
<br><br></a></td></tr></table></td></tr></table>
<table align="center">
<tr><td align="center"><a style="color: #0404a0; font-size: x-small; font-family: system; font-weight: normal; font-style: normal; text-decoration: none; text-align: center;" href="mac65.htm#chapter4"><img src="decor/l_arrow.gif" alt="Chapter 4" border=0 height=13 width=13>
chapter 4&nbsp; &nbsp; &nbsp; &nbsp;</a></td>
<td><a style="color: #0404a0; font-size: x-small; font-family: system; font-weight: normal; font-style: normal; text-decoration: none; text-align: center;" href="mac65.htm#tableofcontents"><img src="decor/u_arrow.gif" alt="Table of Contents" border=0 height=13 width=13>
Table of Contents</a></td></tr></table>
<hr width="96%" size="4" color="#FFFFFF"><br>

<table width="100%"><tr><td align="right"><table width="99%"><tr><td>
<a name="chapter5" style="font-size: large; font-family: Arial; color: #366636; font-weight: bold;">
CHAPTER 5: &nbsp; </a>
<a style="font-size: large; font-family: Arial Black; color: #a62626; font-weight: bold;">
MACRO FACILITY</a><br><br>
<a style="font-size: small; font-family: Courier; color: #121212; font-weight: bold;">
A MACRO DEFINITION is a series of source lines grouped together, given a name, and stored in memory.
When the assembler encounters the corresponding name in the instruction (opcode, directive) column,
the saved lines will be substituted for the Macro name and assembled. Effectively, this allows the
user to define and then use new assembler instructions. Depending upon the code stored in its
definition, a macro might be thought of as either an &quot;extra&quot; directive or a
&quot;new&quot; opcode.<br><br>
The process of finding of a macro in the table when its name is used, and then assembling the code
it was defined with, is called a MACRO EXPANSION. The unique facility of Macro Expansions is that
they may have PARAMETERS passed to them. These parameters will be substituted for the
&quot;formal parameters&quot; during the expansion of the Macro.<br><br>
The use (expansion) of a Macro in a program required that the Macro first be defined. To the set of
directives already discussed in </a>
<a name=" " style="font-size: small; font-family: Arial; color: #0404c0; text-decoration: underline;" href="mac65.htm#chapter4">
chapter 4 </a>
<a style="font-size: small; font-family: Courier; color: #121212; font-weight: bold;">
then, must be added two new directives used for defining new macros:<br><br>
&nbsp; .MACRO<br>
&nbsp; .ENDM<br><br>
This chapter will first discuss these two directives, show how to invoke a macro (cause its
expansion) and then examine the use of formal and calling parameters, including string parameters.
<br><br></a></td></tr></table></td></tr></table>
<table align="center">
<tr><td align="center"><a style="color: #0404a0; font-size: x-small; font-family: system; font-weight: normal; font-style: normal; text-decoration: none; text-align: center;" href="mac65.htm#chapter4"><img src="decor/l_arrow.gif" alt="Chapter 4" border=0 height=13 width=13>
chapter 4&nbsp; &nbsp; &nbsp; &nbsp;</a></td>
<td><a style="color: #0404a0; font-size: x-small; font-family: system; font-weight: normal; font-style: normal; text-decoration: none; text-align: center;" href="mac65.htm#tableofcontents"><img src="decor/u_arrow.gif" alt="Table of Contents" border=0 height=13 width=13>
Table of Contents</a></td></tr></table>
<hr width="96%" size="1" color="#FFFFFF"><br>

<table width="100%"><tr><td align="right"><table width="99%"><tr><td>
<a name=".endm" style="font-size: large; font-family: Arial Black; color: #a62626; font-weight: bold;">
Section 5.1 </a>
<a style="font-size: medium; font-family: Courier New; color: #4646b6; font-weight: bold;">
&nbsp; (directive: .ENDM )</a><br><br>
<a style="font-size: small; font-family: Courier; color: #121212; font-weight: bold;">
purpose: end the definition of a macro<br><br>
usage: .ENDM<br><br>
usage note:  generally, the .ENDM directive should not be labelled.<br><br>
This directive is used solely to terminate the definition of a macro. When invoking a macro, do NOT
use this directive. Basically, the concept of macros requires that all source lines between the .MACRO
directive and the .ENDM directive be stored in a special section of memory (the macro table). Thus,
encountering an improperly paired .ENDM directive is considered a severe assembly error. See the
description of .MACRO ( </a>
<a style="font-size: small; font-family: Arial; color: #0404c0; text-decoration: underline;" href="mac65.htm#.macro">
section 5.2 </a>
<a style="font-size: small; font-family: Courier; color: #121212; font-weight: bold;">
) for further information.
<br><br></a></td></tr></table></td></tr></table>
<table align="center">
<tr><td align="center"><a style="color: #0404a0; font-size: x-small; font-family: system; font-weight: normal; font-style: normal; text-decoration: none; text-align: center;" href="mac65.htm#chapter5"><img src="decor/l_arrow.gif" alt="Chapter 5" border=0 height=13 width=13>
chapter 5&nbsp; &nbsp; &nbsp; &nbsp;</a></td>
<td><a style="color: #0404a0; font-size: x-small; font-family: system; font-weight: normal; font-style: normal; text-decoration: none; text-align: center;" href="mac65.htm#tableofcontents"><img src="decor/u_arrow.gif" alt="Table of Contents" border=0 height=13 width=13>
Table of Contents</a></td></tr></table>
<hr width="96%" size="1" color="#FFFFFF"><br>

<table width="100%"><tr><td align="right"><table width="99%"><tr><td>
<a name=".macro" style="font-size: large; font-family: Arial Black; color: #a62626; font-weight: bold;">
Section 5.2 </a>
<a style="font-size: medium; font-family: Courier New; color: #4646b6; font-weight: bold;">
&nbsp; (directive: .MACRO )</a><br><br>
<a style="font-size: small; font-family: Courier; color: #121212; font-weight: bold;">
purpose: initiates a macro definition<br><br>
usage: .MACRO macroname<br><br>
usage note: &quot;macroname&quot; may be any valid MAC/65 label. It MAY be the same name as a
program label (without conflict).<br><br>
The .MACRO directive all cause the lines following to be read and stored under the Macro name of
&quot;macroname&quot;. The definition is terminated with the .ENDM directive.<br><br>
All instructions except another .MACRO directive are valid Macro source lines. A Macro definition
can NOT contain another Macro definition.<br><br>
A simple example of a MACRO DEFINITION:<br><br>
&nbsp;10&nbsp; .MACRO PUSHXY ; The name of this Macro is &quot;PUSHXY&quot;<br>
&nbsp;11 &nbsp; &nbsp; ; When this Macro is used (expanded), the following<br>
&nbsp;12 &nbsp; &nbsp; ; instructions will be substituted for &quot;PUSHXY&quot;<br>
&nbsp;13 &nbsp; &nbsp; ; and then assembled.<br>
&nbsp;14 &nbsp; TXA<br>
&nbsp;15 &nbsp; PHA<br>
&nbsp;16 &nbsp; TYA<br>
&nbsp;18 &nbsp; PHA<br>
&nbsp;19&nbsp; .ENDM &nbsp; ; The terminator for &quot;PUSHXY&quot;<br><br>
SPECIAL NOTE: ALL labels used within a macro are assumed to be local to that macro. MAC/65
accomplishes this by performing a &quot;third pass&quot; of the assembly during macro expansions.
Thus, a label defined within a macro expansion is avaliable to code which follows the macro; but
another expansion of the same macro with the same label will reset the labels value. The action is
similar to the &quot;.=&quot; directive, except that forward references to internal macro labels ARE
legal.<br><br>
EXAMPLE:<br><br>
&nbsp;20 .MACRO MOVE6<br>
&nbsp;21 LDX #5<br>
&nbsp;22 LOOP<br>
&nbsp;23 LDA FROM,X<br>
&nbsp;24 STA TO,X<br>
&nbsp;25 DEX<br>
&nbsp;26 BPL LOOP<br>
&nbsp;27 .ENDM<br><br>
The label &quot;LOOP&quot; is local to this macro usage, and yet it may (if needed) be referenced
outside the macro expansion (although not in another macro expansion). (note that if a macro label
is only defined once by a single macro usage, the effect is the same as if the label were defined
outside any macro.) Although the .LOCAL-produced local regions may be used by and with macros, the
user is limited to a maximum of 62 local regions. No such restriction applies to the number of
possible local usages of a label in a macro expansion.
<br><br></a></td></tr></table></td></tr></table>
<table align="center">
<tr><td align="center"><a style="color: #0404a0; font-size: x-small; font-family: system; font-weight: normal; font-style: normal; text-decoration: none; text-align: center;" href="mac65.htm#chapter5"><img src="decor/l_arrow.gif" alt="Chapter 5" border=0 height=13 width=13>
chapter 5&nbsp; &nbsp; &nbsp; &nbsp;</a></td>
<td><a style="color: #0404a0; font-size: x-small; font-family: system; font-weight: normal; font-style: normal; text-decoration: none; text-align: center;" href="mac65.htm#tableofcontents"><img src="decor/u_arrow.gif" alt="Table of Contents" border=0 height=13 width=13>
Table of Contents</a></td></tr></table>
<hr width="96%" size="1" color="#FFFFFF"><br>

<table width="100%"><tr><td align="right"><table width="99%"><tr><td>
<a name="macroexpansionpart1" style="font-size: large; font-family: Arial Black; color: #a62626; font-weight: bold;">
Section 5.3 </a>
<a style="font-size: medium; font-family: Courier New; color: #4646b6; font-weight: bold;">
&nbsp; (Macro Expansion, Part 1)</a><br><br>
<a style="font-size: small; font-family: Courier; color: #121212; font-weight: bold;">
As stated above, a macro is expanded when it is used. And the &quot;use&quot; of a macro is
simplicity itself.<br><br>
To invoke (use, expand--all equivalent words) a macro, simply place its name in the opcode/directive
field of an assembler line. Remember, though, that macros MUST be defined before they can be used.<br><br>
For example, to invoke the two macros defined in examples in the previous </a>
<a style="font-size: small; font-family: Arial; color: #0404c0; text-decoration: underline;" href="mac65.htm#.macro">
section 5.2 </a>
<a style="font-size: small; font-family: Courier; color: #121212; font-weight: bold;">
, one could simple type them in as shown and then enter and assemble:<br><br>
EXAMPLE:<br><br>
&nbsp;2000 ALABEL PUSHXY<br>
&nbsp;2010 ; and pushxy generates the code<br>
&nbsp;2020 ; &nbsp; TXA &nbsp; PHA &nbsp; TYA &nbsp; PHA<br>
&nbsp;2030 ;<br>
&nbsp;2040  MOVE6<br>
&nbsp;2050 ; similarly, MOVE6 is used<br>
&nbsp;2060 JMP LOOP<br>
&nbsp;2070 ; and LOOP refers to the label<br>
&nbsp;2080 ; defined in the MOVE6 macro<br>
&nbsp;...<br><br>
Note that the use of a label on the macro invocation is optional. The label is assigned the current
value of the location counter and is not dependent upon the contents of the macro at all.<br><br>
There are many more &quot;tricks&quot; and features usable with macros, but we will continue this
discussion after an examination of macro parameters as used in a macro definition.
<br><br></a></td></tr></table></td></tr></table>
<table align="center">
<tr><td align="center"><a style="color: #0404a0; font-size: x-small; font-family: system; font-weight: normal; font-style: normal; text-decoration: none; text-align: center;" href="mac65.htm#chapter5"><img src="decor/l_arrow.gif" alt="Chapter 5" border=0 height=13 width=13>
chapter 5&nbsp; &nbsp; &nbsp; &nbsp;</a></td>
<td><a style="color: #0404a0; font-size: x-small; font-family: system; font-weight: normal; font-style: normal; text-decoration: none; text-align: center;" href="mac65.htm#tableofcontents"><img src="decor/u_arrow.gif" alt="Table of Contents" border=0 height=13 width=13>
Table of Contents</a></td></tr></table>
<hr width="96%" size="1" color="#FFFFFF"><br>

<table width="100%"><tr><td align="right"><table width="99%"><tr><td>
<a name="macroparameters" style="font-size: large; font-family: Arial Black; color: #a62626; font-weight: bold;">
Section 5.4 </a>
<a style="font-size: medium; font-family: Courier New; color: #4646b6; font-weight: bold;">
&nbsp; (Macro Parameters)</a><br><br>
<a style="font-size: small; font-family: Courier; color: #121212; font-weight: bold;">
Macro parameters can be of two types: expressions (which are evaluated as 16 bit words) or strings.
The parameters are passed via the macro expansion (invocation, use, etc.) and are stacked in memory
in the order of occurance. A maximum of 63 parameters can be stacked by a macro expansion, including
expansions within expansions.<br><br>
However, before a parameter can be used in an expansion, there must be a way of accessing it in the
MACRO DEFINITION. Parameters are referenced in a macro definition by the character &quot;%&quot;
for expressions and the characters &quot;%$&quot; for strings. The value following the character
refers to the actual parameter number.<br><br>
SPECIAL NOTE: The parameter number can be represented by a decimal number (e.g., %2) or may be a
label enclosed by parentheses (e.g., %$(LABEL) ). Of course, strings may be similarly referenced,
as in %$(INDEX) or %$1.<br><br>
Examples:<br><br>
&nbsp;10 LDA #&gt;%1 &nbsp; &nbsp; ; get the high byte of parameter 1.<br>
&nbsp;15 CMP (%11,X) &nbsp;;yes, that really is number 11.<br>
&nbsp;20 .BYTE %2-1 &nbsp; ;value of parameter 2 less 1.<br><br>
NOTE: the above is NOT equivalent to using parameter %1. Parameter substitution has highest
precedence!<br><br>
&nbsp;25 SYMBOL .= SYMBOL + 1<br>
&nbsp;30 LDX # -%(SYMBOL) ; see the power available?<br>
&nbsp;40 &nbsp;.BYTE %$1,%$2,0 ; string parameters, ending 0.<br><br>
Remember, in theory the parameters are numbered from 1 to 63. In reality, the TOTAL number of
parameters in use by all active (nested) macro expansions cannot exceed 63. This does NOT mean
that you can have only 63 parameter references in your macro DEFINITIONS. The limit only applies
at invocation time, and even then only to nested (not sequential) macro usages.<br><br>
SPECIAL NOTE: In addition to the &quot;conventional&quot; parameters, referred to by number,
parameter zero (%0) has a special meaning to MAC/65. Parameter zero allows the user to access the
actual NUMBER of real parameters passed to a macro EXPANSION.<br><br>
This feature allows the user to set default parameters within the Macro expansion, or test for
the proper number of parameters in an expansion, or more. The following example illustrates a
possible use of %0 and shows usage of ordinary parameters as well.<br><br>
EXAMPLE:<br><br>
&nbsp;10 .MACRO BUMP<br>
&nbsp;11 ;<br>
&nbsp;12 ; This macro will increment the specified word<br>
&nbsp;13 ;<br>
&nbsp;14 ; The calling format is:<br>
&nbsp;15 ; &nbsp; &nbsp; BUMP address [ ,increment ].<br>
&nbsp;16 ; If increment is not given, 1 is assumed<br>
&nbsp;17 ;<br>
&nbsp;18 .IF%0=0 .OR %0&gt;2<br>
&nbsp;19 &nbsp;.ERROR &quot;BUMP&quot;: Wrong number of parameters&quot;<br>
&nbsp;20 .ELSE<br>
&nbsp;21 ;<br>
&nbsp;22 ; this is only done if 1 or 2 parameters<br>
&nbsp;23 ;<br>
&nbsp;24  .IF $0&gt;1 ; did user specify &quot;increment&quot; ?<br>
&nbsp;25 ; this is assembled if user gave two parameters<br>
&nbsp;26 &nbsp;LDA %1 &nbsp; &nbsp; ; add &quot;increment&quot; to &quot;address&quot;.<br>
&nbsp;27 &nbsp;CLC<br>
&nbsp;28 &nbsp;ADC # &lt;%2 ; low byte of the increment<br>
&nbsp;29 &nbsp;STA %1 &nbsp; &nbsp; ; low byte of result<br>
&nbsp;30 &nbsp;LDA %1 +1 ; high byte of location<br>
&nbsp;31 &nbsp;ADC # &gt;%2 ; add in high byte of increment<br>
&nbsp;32 &nbsp;STA %1 +1 ; and store rest of result<br>
&nbsp;33 ;<br>
&nbsp;34 .ELSE<br>
&nbsp;35 ; this is assembled if only one parameter given<br>
&nbsp;36 &nbsp;INC %1 &nbsp;; just increment by 1.<br>
&nbsp;37 &nbsp;BNE SKIPHI ; implicitly local label<br>
&nbsp;38 &nbsp;INC %1 +1 ; must also increment high byte<br>
&nbsp;39 SKIPHI<br>
&nbsp;40 .ENDIF &nbsp; ; matches the .IF %0&gt;1 (line 24)<br>
&nbsp;41 .ENDIF &nbsp; ; matches the .IF of line 18<br>
&nbsp;42 .ENDM &nbsp;&nbsp; ; terminator.<br>
<br><br></a></td></tr></table></td></tr></table>
<table align="center">
<tr><td align="center"><a style="color: #0404a0; font-size: x-small; font-family: system; font-weight: normal; font-style: normal; text-decoration: none; text-align: center;" href="mac65.htm#chapter5"><img src="decor/l_arrow.gif" alt="Chapter 5" border=0 height=13 width=13>
chapter 5&nbsp; &nbsp; &nbsp; &nbsp;</a></td>
<td><a style="color: #0404a0; font-size: x-small; font-family: system; font-weight: normal; font-style: normal; text-decoration: none; text-align: center;" href="mac65.htm#tableofcontents"><img src="decor/u_arrow.gif" alt="Table of Contents" border=0 height=13 width=13>
Table of Contents</a></td></tr></table>
<hr width="96%" size="1" color="#FFFFFF"><br>

<table width="100%"><tr><td align="right"><table width="99%"><tr><td>
<a name="macroexpansionpart2" style="font-size: large; font-family: Arial Black; color: #a62626; font-weight: bold;">
Section 5.5 </a>
<a style="font-size: medium; font-family: Courier New; color: #4646b6; font-weight: bold;">
&nbsp; (Macro Expansion, Part 2)</a><br><br>
<a style="font-size: small; font-family: Courier; color: #121212; font-weight: bold;">
We have shown how macro definitions may include specifications of particular parameters (the
specifications might also be called &quot;formal parameters&quot;). This section will show how to pass
actual parameters (equivalently &quot;value parameters&quot;, &quot;calling parameters&quot;, etc.) to
the definition.<br><br>
The concept is simple: on the same line as the macro invocation (by use of its name, of course) and
following the macro's name, the user may place expressions (or strings, see </a>
<a style="font-size: small; font-family: Arial; color: #0404c0; text-decoration: underline;" href="mac65.htm#macrostrings">
section 5.6 </a>
<a style="font-size: small; font-family: Courier; color: #121212; font-weight: bold;">
). MAC/65 simply assigns each of these values a number, from 1 to 63, and then, during the macro
expansion, replaces the formal parameters (%1, %2, %(label), etc.) with the corresponding values.<br><br>
Does that sound too complicated? Internally, it is. Externally, it is an easy as this:<br><br>
EXAMPLE:<br><br>
Assume that the BUMP macro has been defined (as above, </a>
<a style="font-size: small; font-family: Arial; color: #0404c0; text-decoration: underline;" href="mac65.htm#macroparameters">
section 5.4 </a>
<a style="font-size: small; font-family: Courier; color: #121212; font-weight: bold;">
), then the user may invoke it as needed, thus:<br><br>
&nbsp;100 ALABEL BUMP A.LOCATION<br>
&nbsp;110 INCR .= 7<br>
&nbsp;120&nbsp; BUMP A.LOCATION,3<br>
&nbsp;130&nbsp; BUMP A.LOCATION-2<br>
&nbsp;140&nbsp; BUMP<br>
&nbsp;150&nbsp; BUMP A.LOCATION,INCR,7<br>
&nbsp;160 A.LOCATION .WORD 0<br><br>
note: lines 140 and 150 will each cause the BUMP error to be invoked and printed<br><br>
&nbsp;170&nbsp; BUMP INCR,A.LOCATION<br>
&nbsp; &nbsp; will try to increment address 7 by something<br>
&nbsp;180&nbsp; BUMP PORT5<br>
&nbsp; &nbsp; assuming the PORT5 is some hardware port,<br>
&nbsp; &nbsp; strange and wonderful things could happen
<br><br></a></td></tr></table></td></tr></table>
<table align="center">
<tr><td align="center"><a style="color: #0404a0; font-size: x-small; font-family: system; font-weight: normal; font-style: normal; text-decoration: none; text-align: center;" href="mac65.htm#chapter5"><img src="decor/l_arrow.gif" alt="Chapter 5" border=0 height=13 width=13>
chapter 5&nbsp; &nbsp; &nbsp; &nbsp;</a></td>
<td><a style="color: #0404a0; font-size: x-small; font-family: system; font-weight: normal; font-style: normal; text-decoration: none; text-align: center;" href="mac65.htm#tableofcontents"><img src="decor/u_arrow.gif" alt="Table of Contents" border=0 height=13 width=13>
Table of Contents</a></td></tr></table>
<hr width="96%" size="1" color="#FFFFFF"><br>

<table width="100%"><tr><td align="right"><table width="99%"><tr><td>
<a name="macrostrings" style="font-size: large; font-family: Arial Black; color: #a62626; font-weight: bold;">
Section 5.6 </a>
<a style="font-size: medium; font-family: Courier New; color: #4646b6; font-weight: bold;">
&nbsp; (Macro Strings)</a><br><br>
<a style="font-size: small; font-family: Courier; color: #121212; font-weight: bold;">
String parameters are represented in a macro definition by the character &quot;%$&quot;. All numeric
parameters have a string counterpart, not all of which are useful. All string parameters have a
numeric counterpart (their length).<br><br>
As a special case, %$0 always returns the macro NAME]<br><br>
The following table shows the various string and numeric values returned for a given parameter:<br><br><br>
As appears in &nbsp; &nbsp; &nbsp; string returned &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; numeric value<br>
Macro call: &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;(in quotes): &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; returned:<br>
<br>
&quot;A String 1 2 3&quot; &nbsp; &nbsp;&quot;A String 1 2 3&quot; &nbsp; &nbsp; &nbsp;&nbsp;length of string<br>
NUMERICSYMBOL &nbsp; &nbsp; &nbsp;&nbsp;&quot;NUMERICSYMBOL&quot; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;value of label<br>
SYMBOL+1 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&quot;SYMBOL&quot; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;value of expr<br>
%$4 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; the string of parameter 4  value of original<br>
 &nbsp; &nbsp;(above would be used by a macro calling another macro)<br>
-LABEL &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&quot;LABEL&quot; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; value of expr<br>
GEORGE*HARRY+PETE &nbsp; undefined &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; value of expr<br>
.DEF &nbsp; &nbsp; CIO &nbsp; &nbsp; &nbsp; &nbsp;&quot;CIO&quot; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; value of expr<br>
2 + 2 * 65 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;undefined &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; value of expr<br>
<br><br>
A Macro string example:<br><br>
&nbsp;10&nbsp; .MACRO PRINT<br>
&nbsp;11 ;<br>
&nbsp;12 ; This Macro will print the specified string.<br>
&nbsp;13 ; parameter 1, but if no parameter string is<br>
&nbsp;14 ; passed, only an EOL will be printed.<br>
&nbsp;15 ;<br>
&nbsp;16 ; The calling format is:  PRINT [ string ]<br>
&nbsp;17 ;<br>
&nbsp;18 .IF %0 = 1 ; is there a string to print?<br>
&nbsp;19&nbsp; JMP PASTSTR ; yes, jump over string storage<br>
&nbsp;20 STRING .BYTE %$1,EOL ; put string here.<br>
&nbsp;21 ;<br>
&nbsp;22 PASTSTR<br>
&nbsp;23&nbsp; LDX #&gt;STRING ; get string address into X&Y<br>
&nbsp;24&nbsp; LDY #&lt;string ; for JSR to 'print string'<br>
&nbsp;25&nbsp; JSR STRINGOUT<br>
&nbsp;26 .ELSE<br>
&nbsp;27 ; no string...just print an EOL<br>
&nbsp;28&nbsp; LDA #EOL<br>
&nbsp;29&nbsp; JSR CHAROUT<br>
&nbsp;30 ;<br>
&nbsp;31 .ENDIF<br>
&nbsp;32 .ENDM &nbsp; ; terminator.<br><br>
To invoke this macro, then, the following calls would be appropriate:<br><br>
&nbsp;100 PRINT &quot;this is a string&quot;<br>
&nbsp;110 PRINT<br>
&nbsp;120 PRINT message<br>
&nbsp;...<br>
&nbsp;999 message .BYTE &quot;another string&quot;, EOL<br>
note that, in line 120, only a single word (label, actually) is allowed.
<br><br></a></td></tr></table></td></tr></table>
<table align="center">
<tr><td align="center"><a style="color: #0404a0; font-size: x-small; font-family: system; font-weight: normal; font-style: normal; text-decoration: none; text-align: center;" href="mac65.htm#chapter5"><img src="decor/l_arrow.gif" alt="Chapter 5" border=0 height=13 width=13>
chapter 5&nbsp; &nbsp; &nbsp; &nbsp;</a></td>
<td><a style="color: #0404a0; font-size: x-small; font-family: system; font-weight: normal; font-style: normal; text-decoration: none; text-align: center;" href="mac65.htm#tableofcontents"><img src="decor/u_arrow.gif" alt="Table of Contents" border=0 height=13 width=13>
Table of Contents</a></td></tr></table>
<hr width="96%" size="1" color="#FFFFFF"><br>

<table width="100%"><tr><td align="right"><table width="99%"><tr><td>
<a name="somemacrohints" style="font-size: large; font-family: Arial Black; color: #a62626; font-weight: bold;">
Section 5.7 </a>
<a style="font-size: medium; font-family: Courier New; color: #4646b6; font-weight: bold;">
&nbsp; (Some Macro Hints)</a><br><br>
<a style="font-size: small; font-family: Courier; color: #121212; font-weight: bold;">
Each person will soon develop his/her own style of writing macros, but these are certain common
sense rules that we all should heed.<br><br>
A.&nbsp; When a macro is defined, its entire definition must be stored in memory (in a macro table).
Since memory space is obviously finite, it is a good idea to keep macros as short as possible. One
way to do this is to avoid putting comments (remarks) within the body of the macro. If you do
document your macros (and we hope you do), place the comments in the file BEFORE the .MACRO
directive. The assembler will then do nothing at all with them and they will occupy no additional
space.<br><br>
B.&nbsp; Don't use a caller's macro parameter unless you are sure that it is there. Using a parameter
that the caller left out will produce a MACRO PARAMETER error. Depending upon the macro definition,
this may or may not also produce undesired results. An example of unsafe coding:<br><br>
&nbsp;.If %0>1 .OR %2=0<br>
&nbsp;.WORD %1<br>
&nbsp;.ENDIF<br><br>
The danger here occurs if the caller invokes the macro with only one parameter. Since %2 is
non-existent (and hence undefined), the sub-expression &quot;%2=0&quot; is indeed true and the effect
of &quot;%0&gt;1&quot; is nullified. Of course, the lack of parameter 2 will produce a
&quot;PARAMETER ERROR&quot;, but it will already be too late. A better coding of the above would be:<br><br>
&nbsp;.IF %0&gt;1<br>
&nbsp; .IF %2&lt;&gt;0<br>
&nbsp;&nbsp; .WORD %1<br>
&nbsp; .ENDIF<br>
&nbsp;.ENDIF<br><br>
C.&nbsp; Even though labels defined within macros are local to each invocation, they are still
&quot;visible&quot; outside the macro(s). Thus, it might be a good idea to have a special form for
labels defined in macros and avoid that form outside macros. The macro library supplied with MAC/65
uses labels beginning with &quot;@&quot; as local labels to macros.
<br><br></a></td></tr></table></td></tr></table>
<table align="center">
<tr><td align="center"><a style="color: #0404a0; font-size: x-small; font-family: system; font-weight: normal; font-style: normal; text-decoration: none; text-align: center;" href="mac65.htm#chapter5"><img src="decor/l_arrow.gif" alt="Chapter 5" border=0 height=13 width=13>
chapter 5&nbsp; &nbsp; &nbsp; &nbsp;</a></td>
<td><a style="color: #0404a0; font-size: x-small; font-family: system; font-weight: normal; font-style: normal; text-decoration: none; text-align: center;" href="mac65.htm#tableofcontents"><img src="decor/u_arrow.gif" alt="Table of Contents" border=0 height=13 width=13>
Table of Contents</a></td></tr></table>
<hr width="96%" size="1" color="#FFFFFF"><br>

<table width="100%"><tr><td align="right"><table width="99%"><tr><td>
<a name="acomplexmacroexample" style="font-size: large; font-family: Arial Black; color: #a62626; font-weight: bold;">
Section 5.8 </a>
<a style="font-size: medium; font-family: Courier New; color: #4646b6; font-weight: bold;">
&nbsp; (A Complex Macro Example)</a><br><br>
<a style="font-size: small; font-family: Courier; color: #121212; font-weight: bold;">
The following set of macros is designed to demonstrate several of the points made in the preceding
sections. Aside from that, though, it is a good, usable macro set. Study it carefully, please.
(The line numbers are omitted for the sake of brevity. Any numbers will do, of course.)<br><br>
;<br>
; the first macro, &quot;@CH&quot;, is designed to load an<br>
; IOCB pointer into the X register. If passed a<br>
; value from 0 to 7, it assumes it to be a constant<br>
; (immediate) channel number.  If passed any other<br>
; value, it assumes it to be a memory location which<br>
; contains the channel number.<br>
;<br>
; NOTE that these comments are outside the body of<br>
; the macro, thus saving valuable table space.<br>
;<br>
&nbsp; .MACRO @CH<br>
&nbsp; .IF %1&gt;7<br>
&nbsp; LDA %1 ; channel # is in memory cell<br>
&nbsp; ASL A<br>
&nbsp; ASL A<br>
&nbsp; ASL A<br>
&nbsp; ASL A &nbsp; ; times 16<br>
&nbsp; TAX<br>
&nbsp; .ELSE<br>
&nbsp; LDX #%*16<br>
&nbsp; .ENDIF<br>
&nbsp; .ENDM<br>
;<br>
; this next macro, &quot;@CV&quot;, is designed to load a<br>
; Constant or Value into the A register. If<br>
; passed a value from 0 to 255, it assumes it<br>
; to be a constant (immediate) value. If passed<br>
; any other value, it assumes it to be a memory<br>
; location (non-zero page).<br>
;<br>
&nbsp; .MACRO @CV<br>
&nbsp; .IF %1&lt;256<br>
&nbsp; LDA #%1<br>
&nbsp; .ELSE<br>
&nbsp; LDA %1<br>
&nbsp; .ENDIF<br>
&nbsp; .ENDM<br>
;<br>
; The third macro is &quot;@FL&quot;, designed to establish<br>
; a filespec.  If passed a literal string, @FL<br>
; will generate the string in line, jumping around<br>
; it, and place its address in the IOCB pointed to<br>
; by the X register. If passed a non-zero page<br>
; label, @FL assumes it to be the label of a valid<br>
; filespec string and uses it instead.<br>
;<br>
&nbsp; .MACRO @FL<br>
&nbsp; .IF %1&lt;256<br>
&nbsp; JMP *+%1+4<br>
@F .BYTE %$1,0<br>
&nbsp; LDA #&lt;@F<br>
&nbsp; STA ICBADR+1,X<br>
&nbsp; LDA #&gt;@F<br>
&nbsp; STA ICBADR+1,X<br>
&nbsp; .ELSE<br>
&nbsp; LDA #&lt;%1<br>
&nbsp; STA ICBADR,X<br>
&nbsp; LDA #&gt;%1<br>
&nbsp; STA ICBADR+1,X<br>
&nbsp; .ENDIF<br>
&nbsp; .ENDM<br><br>
;<br>
; The main macro here is &quot;XIO&quot;, a macro to<br>
; implement a simulation of BASIC's XIO command.<br>
; The general syntax of the usage of this macro is:<br>
; &nbsp;XIO command, channel [,aux1,aux2] [,filespec]<br>
;<br>
; where channel may be a constant from 0 to 7<br>
; &nbsp; or a memory location.<br>
; where command, aux1, and aux2 may be a constant<br>
; &nbsp; from 0 to 255 or a non-zero page location<br>
; where filespec may be a literal string or<br>
; &nbsp; a non-zero page location<br>
; if aux1 and aux2 are omitted, they are assumed<br>
; &nbsp; to be zero (you may not omit aux2 only)<br>
; if the filespec is omitted, it is assumed to<br>
; &nbsp; be &quot;S:&quot;<br>
;<br>
&nbsp; .MACRO XIO<br>
&nbsp; .IF %0&lt;2 .OR %0&gt;5<br>
&nbsp; .ERROR &quot;XIO:  wrong number of parameters&quot;<br>
&nbsp; .ELSE<br>
&nbsp; @CH %2<br>
&nbsp; @CV %1<br>
&nbsp; STA ICCOM,X ; command<br>
&nbsp; .IF %0&gt;=4<br>
&nbsp; @CV %3<br>
&nbsp; STA ICAUX1,X<br>
&nbsp; @CV %4<br>
&nbsp; STA ICAUX2,X<br>
&nbsp; .ELSE<br>
&nbsp; LDA #0<br>
&nbsp; STA ICAUX1,X<br>
&nbsp; STA ICAUX2,X<br>
&nbsp; .ENDIF<br>
&nbsp; .IF %0=2 .OR %0=4<br>
&nbsp; @FL &quot;S:&quot;<br>
&nbsp; .ELSE<br>
@FPTR .= %0<br>
&nbsp; @FL %$(@FPTR)<br>
&nbsp; .ENDIF<br>
&nbsp; JSR CIO<br>
&nbsp; .ENDIF<br>
&nbsp; .ENDM<br><br>
Did you follow all that? The trick is that, the way &quot;XIO&quot; is specified, it is legal to pass
it 2, 3, 4, or 5 arguments; but each of those numbers represents a unique combination of parameters,
to wit:<br><br>
&nbsp; XIO&nbsp; command,channel<br>
&nbsp; XIO&nbsp; command,channel,filespec<br>
&nbsp; XIO&nbsp; command,channel,aux1,aux2<br>
&nbsp; XIO&nbsp; command,channel,aux1,aux2,filespec<br><br>
This is not a trivial macro example. Perhaps you will not have occasion to write something to
complex. But MAC/65 provides the tools to do many things if you need them.
<br><br></a></td></tr></table></td></tr></table>
<table align="center">
<tr><td align="center"><a style="color: #0404a0; font-size: x-small; font-family: system; font-weight: normal; font-style: normal; text-decoration: none; text-align: center;" href="mac65.htm#chapter5"><img src="decor/l_arrow.gif" alt="Chapter 5" border=0 height=13 width=13>
chapter 5&nbsp; &nbsp; &nbsp; &nbsp;</a></td>
<td><a style="color: #0404a0; font-size: x-small; font-family: system; font-weight: normal; font-style: normal; text-decoration: none; text-align: center;" href="mac65.htm#tableofcontents"><img src="decor/u_arrow.gif" alt="Table of Contents" border=0 height=13 width=13>
Table of Contents</a></td></tr></table>
<hr width="96%" size="4" color="#FFFFFF"><br>

<table width="100%"><tr><td align="right"><table width="99%"><tr><td>
<a name="chapter6" style="font-size: large; font-family: Arial; color: #366636; font-weight: bold;">
CHAPTER 6: &nbsp; </a>
<a style="font-size: large; font-family: Arial Black; color: #a62626; font-weight: bold;">
COMPATIBILITY</a><br><br>
<a style="font-size: small; font-family: Courier; color: #121212; font-weight: bold;">
There are many different 6502 assemblers available, and it seems that each has a few foibles, bug,
or whatever that are uniquely its own (and, or course, they are called &quot;features&quot;
by their promoters). Well, MAC/65 is no different.<br><br>
This chapter is devoted to telling you of some of the things to watch out for when converting from
another 6502 assembler to MAC/65. We restrict ourselves to such things as directives and operators.
We will NOT go into a discussion of how to convert the actual 6502 opcodes (equivalently:
instructions, mnemonics, etc.).  We consider it mandatory that any good 6502 assembler will follow
the MOS Technology standard in this regard.<br><br>
Example: We know of some antique 6502 assemblers that specify the various addressing modes via
special opcodes. Thus the conventional &quot;LDA #3&quot; becomes &quot;LDAIMN 3&quot; and
&quot;LDA (ZIP),Y&quot; becomes &quot;LDAIY ZIP&quot;. Unfortunately, there was never any standard
established for such distortions, so we shall ignore them as antique and outmoded. In any case,
unless you are entering a program out of an older magazine, you are unlikely to run into one of
these strange beasts.<br><br>
The rest of this chapter pays homage to our birthright. MAC/65 is a direct descendant of the Atari
assembler/editor cartridge (via EASMD). As much as possible, we have tried to keep MAC/65 compatible
with the cartridge. Unfortunately, in the interest of providing a more powerful tool, a few things
had to be enumerates these changes.
<br><br></a></td></tr></table></td></tr></table>
<table align="center">
<tr><td align="center"><a style="color: #0404a0; font-size: x-small; font-family: system; font-weight: normal; font-style: normal; text-decoration: none; text-align: center;" href="mac65.htm#chapter5"><img src="decor/l_arrow.gif" alt="Chapter 5" border=0 height=13 width=13>
chapter 5&nbsp; &nbsp; &nbsp; &nbsp;</a></td>
<td><a style="color: #0404a0; font-size: x-small; font-family: system; font-weight: normal; font-style: normal; text-decoration: none; text-align: center;" href="mac65.htm#tableofcontents"><img src="decor/u_arrow.gif" alt="Table of Contents" border=0 height=13 width=13>
Table of Contents</a></td></tr></table>
<hr width="96%" size="1" color="#FFFFFF"><br>

<table width="100%"><tr><td align="right"><table width="99%"><tr><td>
<a name="atariscartridge" style="font-size: large; font-family: Arial Black; color: #a62626; font-weight: bold;">
Section 6.1 </a>
<a style="font-size: medium; font-family: Courier New; color: #4646b6; font-weight: bold;">
&nbsp; (ATARI'S ASSEMBLER/EDITOR CARTRIDGE)</a><br><br>

<table width="94%" align="center" bgcolor="#D6D6F2">
<tr><td><a style="color: #1414c0; font-size: x-small; font-family: Courier; font-style: normal;" href="mac65.htm#.optobjnoobj">
6.1.1 .OPT OBJ / NO OBJ </a></td>
<td><a style="color: #1414c0; font-size: x-small; font-family: Courier; font-style: normal; " href="mac65.htm#operatorprecedence6">
6.1.2 Operator Precedence </a></td>
<td><a style="color: #1414c0; font-size: x-small; font-family: Courier; font-style: normal;" href="mac65.htm#the.ifdirective">
6.1.3 the .IF directive </a></td></tr></table><br>

<a style="font-size: small; font-family: Courier; color: #121212; font-weight: bold;">
This section presents all known functional differences between the Atari cartridge and MAC/65.
Obviously, MAC/65 also has many more features not enumerated here, but they will not impact the
transferrance of code originally designed for the cartridge (or, for that matter, EASMD).
<br><br></a></td></tr></table></td></tr></table>
<table align="center">
<tr><td align="center"><a style="color: #0404a0; font-size: x-small; font-family: system; font-weight: normal; font-style: normal; text-decoration: none; text-align: center;" href="mac65.htm#chapter5"><img src="decor/l_arrow.gif" alt="Chapter 5" border=0 height=13 width=13>
chapter 5&nbsp; &nbsp; &nbsp; &nbsp;</a></td>
<td><a style="color: #0404a0; font-size: x-small; font-family: system; font-weight: normal; font-style: normal; text-decoration: none; text-align: center;" href="mac65.htm#tableofcontents"><img src="decor/u_arrow.gif" alt="Table of Contents" border=0 height=13 width=13>
Table of Contents</a></td></tr></table>
<hr width="96%" size="1" color="#FFFFFF"><br>

<table width="100%"><tr><td align="right"><table width="99%"><tr><td>
<a name=".optobjnoobj" style="font-size: large; font-family: Arial Black; color: #a62626; font-weight: bold;">
Section 6.1.1 </a>
<a style="font-size: medium; font-family: Courier New; color: #4646b6; font-weight: bold;">
&nbsp; (.OPT OBJ / NOOBJ)</a><br><br>
<a style="font-size: small; font-family: Courier; color: #121212; font-weight: bold;">
By default, the Atari cartridge produces object code, even when the destination of the object is
RAM memory. This is a dangerous practice, at best: it is too easy to make a mistake in a program
and write over DOS, the user's source, the screen memory, or even (horror of horrors) some of
the hardware registers.<br><br>
MAC/65 makes a special case of object in memory: you don't get it unless you ask for it. You MUST
have a &quot;.OPT OBJ&quot; directive before the code to be generated or the code will not be
produced.
<br><br></a></td></tr></table></td></tr></table>
<table align="center">
<tr><td align="center"><a style="color: #0404a0; font-size: x-small; font-family: system; font-weight: normal; font-style: normal; text-decoration: none; text-align: center;" href="mac65.htm#atariscartridge"><img src="decor/l_arrow.gif" alt="Section 6.1" border=0 height=13 width=13>
section 6.1&nbsp; &nbsp; &nbsp; &nbsp;</a></td>
<td><a style="color: #0404a0; font-size: x-small; font-family: system; font-weight: normal; font-style: normal; text-decoration: none; text-align: center;" href="mac65.htm#tableofcontents"><img src="decor/u_arrow.gif" alt="Table of Contents" border=0 height=13 width=13>
Table of Contents</a></td></tr></table>
<hr width="96%" size="1" color="#FFFFFF"><br>

<table width="100%"><tr><td align="right"><table width="99%"><tr><td>
<a name="operatorprecedence6" style="font-size: large; font-family: Arial Black; color: #a62626; font-weight: bold;">
Section 6.1.2 </a>
<a style="font-size: medium; font-family: Courier New; color: #4646b6; font-weight: bold;">
&nbsp; (OPERATOR PRECEDENCE)</a><br><br>
<a style="font-size: small; font-family: Courier; color: #121212; font-weight: bold;">
The cartridge assigns no precedence to arithmetic operators. MAC/65 uses a precedence similar to
BASIC's. Most of the time, this causes no problems; but watch out for mixed expressions.<br><br>
Example: LDA #LABEL-3/256<br>
&nbsp; seen as LDA #[LABEL-3] / 256 by the cartridge<br>
&nbsp; seen as LDA #LABEL - [3/256] by MAC/65
<br><br></a></td></tr></table></td></tr></table>
<table align="center">
<tr><td align="center"><a style="color: #0404a0; font-size: x-small; font-family: system; font-weight: normal; font-style: normal; text-decoration: none; text-align: center;" href="mac65.htm#atariscartridge"><img src="decor/l_arrow.gif" alt="Section 6.1" border=0 height=13 width=13>
section 6.1&nbsp; &nbsp; &nbsp; &nbsp;</a></td>
<td><a style="color: #0404a0; font-size: x-small; font-family: system; font-weight: normal; font-style: normal; text-decoration: none; text-align: center;" href="mac65.htm#tableofcontents"><img src="decor/u_arrow.gif" alt="Table of Contents" border=0 height=13 width=13>
Table of Contents</a></td></tr></table>
<hr width="96%" size="1" color="#FFFFFF"><br>

<table width="100%"><tr><td align="right"><table width="99%"><tr><td>
<a name="the.ifdirective" style="font-size: large; font-family: Arial Black; color: #a62626; font-weight: bold;">
Section 6.1.3 </a>
<a style="font-size: medium; font-family: Courier New; color: #4646b6; font-weight: bold;">
&nbsp; (THE .IF DIRECTIVE)</a><br><br>
<a style="font-size: small; font-family: Courier; color: #121212; font-weight: bold;">
The implementation of .IF in the cartridge is clumsy and unusable. MAC/65's implementation is more
conventional and much more powerful. Rather than try to offer a long example here, we will simply
refer you to the appropriate sections of the two manuals.
<br><br></a></td></tr></table></td></tr></table>
<table align="center">
<tr><td align="center"><a style="color: #0404a0; font-size: x-small; font-family: system; font-weight: normal; font-style: normal; text-decoration: none; text-align: center;" href="mac65.htm#atariscartridge"><img src="decor/l_arrow.gif" alt="Section 6.1" border=0 height=13 width=13>
section 6.1&nbsp; &nbsp; &nbsp; &nbsp;</a></td>
<td><a style="color: #0404a0; font-size: x-small; font-family: system; font-weight: normal; font-style: normal; text-decoration: none; text-align: center;" href="mac65.htm#tableofcontents"><img src="decor/u_arrow.gif" alt="Table of Contents" border=0 height=13 width=13>
Table of Contents</a></td></tr></table>
<hr width="96%" size="4" color="#FFFFFF"><br>

<table width="100%"><tr><td align="right"><table width="98%"><tr><td bgcolor="#f0f0b0">
<a name="chapter7" style="font-size: large; font-family: Arial; color: #366636; font-weight: bold;">
CHAPTER 7: &nbsp; </a>
<a style="font-size: large; font-family: Arial Black; color: #a62626; font-weight: bold;">
ADDED 65C02 INSTRUCTIONS</a><br><br>
<a style="font-size: small; font-family: Courier; color: #080850; font-weight: bold;"><br>
MAC/65 as originally produced, supported the &quot;standard&quot; 6502 instruction set as well as the
directives and addressing mode designators recommended by MOS Technology (the originators of the 6502 chip).<br>
This version of MAC/65 supports all features of the original version along with added support for one
of the more popular enhanced versions of the 6502 chip. In particular, MAC/65 supports all new
instructions and addressing modes available on the 65C02 chip as produced by NCR Corporation. We
describe here the primary added addressing mode, the instruction with variants added, and the
completely new instructions. But before we start, we should note that these instructions would only
work properly on your computer if you have installed an NCR 65C02 in place of the 6502 which came in
the machine as purchase. Also, remember that a program using these instructions may work great in your
machine. It will not work properly in your friend's machine unless he/she also installs a 65C02.
</a></td></tr></table><br></td></tr></table>

<table align="center">
<tr><td align="center"><a style="color: #0404a0; font-size: x-small; font-family: system; font-weight: normal; font-style: normal; text-decoration: none; text-align: center;" href="mac65.htm#chapter6"><img src="decor/l_arrow.gif" alt="Chapter 6" border=0 height=13 width=13>
chapter 6&nbsp; &nbsp; &nbsp; &nbsp;</a></td>
<td><a style="color: #0404a0; font-size: x-small; font-family: system; font-weight: normal; font-style: normal; text-decoration: none; text-align: center;" href="mac65.htm#tableofcontents"><img src="decor/u_arrow.gif" alt="Table of Contents" border=0 height=13 width=13>
Table of Contents</a></td></tr></table>
<hr width="96%" size="1" color="#FFFFFF"><br>

<table width="100%"><tr><td align="right"><table width="98%"><tr><td bgcolor="#f0f0b0">
<a name="majoradded" style="font-size: large; font-family: Arial Black; color: #a62626; font-weight: bold;">
Section 7.1</a>
<a style="font-size: medium; font-family: Courier New; color: #4646b6; font-weight: bold;">
&nbsp; (A Major Added Addressing Mode)</a><br><br>
<a style="font-size: small; font-family: Courier; color: #080850; font-weight: bold;"><br>
The standard 6502 chip supports two forms of indirect addressing for what might be considered its
primary instructions. The forms appear in assembly listings as:<br><br>
&nbsp; lda  (indirect,X)<br>
&nbsp; &nbsp; and<br>
&nbsp; lda  (indirect,Y)<br><br>
(where &quot;lda&quot; is only one of several valid mnemonics that can be used with these addressing
modes).<br>
The latter of these modes, often referred to as the &quot;indirect-Y&quot; mode, is perhaps the most
useful and flexible of all 6502 addressing modes. And, yet, it suffers from one flaw: it ties up two
registers (A and Y). And, as importantly, probably a full 50% or more of the time the Y-register is
loaded with zero before instructions in this mode are executed.<br><br>
The NCR 6502 instructions set as supported by MAC/65 provides a help here: You may code instructions
allowing Indirect-Y addressing in &quot;Indirect&quot; mode as well. With Indirect mode, the assembler
format is simply<br>
&nbsp; lda  (indirect)<br>
where, as with Indirect-Y, the indirect location must be in zero page.<br>
Generally, the effect of using this instruction will be the same as coding the sequence:<br>
&nbsp; LDY #0<br>
&nbsp; lda (indirect),Y<br>
EXCEPTING that the Y-register remains intact and untouched and may be used for other purposes. The
following, then, are ALL of the 65C02 instructions which allow and support this new addressing mode:<br>
&nbsp; ADC (indirect)&nbsp; ;ADd with Carry<br>
&nbsp; AND (indirect)&nbsp; ;bit wise AND<br>
&nbsp; CMP (indirect)&nbsp; ;compare with A-reg<br>
&nbsp; EOR (indirect)&nbsp; ;Exclusive OR<br>
&nbsp; LDA (indirect)&nbsp; ;LoaD the A-register<br>
&nbsp; ORA (indirect)&nbsp; ;inclusive OR<br>
&nbsp; SBC (indirect)&nbsp; ;SuBtract with Carry<br>
&nbsp; STA (indirect)&nbsp; ;STore the A-register<br><br>
REMINDER: while the &quot;indirect&quot; location may be any zero page location, you should probably
restrict yourself to the available locations documented in the DDT manual.
</a></td></tr></table><br></td></tr></table>

<table align="center">
<tr><td align="center"><a style="color: #0404a0; font-size: x-small; font-family: system; font-weight: normal; font-style: normal; text-decoration: none; text-align: center;" href="mac65.htm#chapter7"><img src="decor/l_arrow.gif" alt="Chapter 7" border=0 height=13 width=13>
chapter 7&nbsp; &nbsp; &nbsp; &nbsp;</a></td>
<td><a style="color: #0404a0; font-size: x-small; font-family: system; font-weight: normal; font-style: normal; text-decoration: none; text-align: center;" href="mac65.htm#tableofcontents"><img src="decor/u_arrow.gif" alt="Table of Contents" border=0 height=13 width=13>
Table of Contents</a></td></tr></table>
<hr width="96%" size="1" color="#FFFFFF"><br>

<table width="100%"><tr><td align="right"><table width="98%"><tr><td bgcolor="#f0f0b0">
<a name="minorvariations" style="font-size: large; font-family: Arial Black; color: #a62626; font-weight: bold;">
Section 7.2</a>
<a style="font-size: medium; font-family: Courier New; color: #4646b6; font-weight: bold;">
&nbsp; (Minor Variations on 6502 Instructions)</a><br><br>
<a style="font-size: small; font-family: Courier; color: #080850; font-weight: bold;"><br>
The &quot;BIT&quot; instruction has added two new addressing modes, and &quot;JMP&quot; has added one
new mode. They are described here individually:<br><br>
Original allowed forms of 6502 BIT instructions were:<br>
&nbsp; BIT absolute<br>
&nbsp; BIT zeropage<br>
New 65C02 forms available are:<br>
&nbsp; BIT absolute,X<br>
&nbsp; BIT zeropage,X<br>
The ability to use the X register as an index with the BIT instruction greatly enhances its power for
testing tables, etc. The &quot;indexed-x&quot; address modes function as they do for other 6502
instructions (eg LDA and CMP).<br><br>
Original allowed forms of 6502 JMP instructions were:<br>
&nbsp; JMP absolute<br>
&nbsp; JMP (indirect)<br>
New 65C02 form available is:<br>
&nbsp; JMP (indirect,X)<br><br>
Note that the JMP instruction alone in both the 6502 and 65C02 instructions sets uses an absolute (ie
16 bit, 2 byte) address for its indirect value. The new &quot;indirect-X&quot; form is no different:
the location specified as the indirect address may be anywhere in memory. The &quot;indirect-X&quot;
address mode is unique and new. Its effect is as follows: add the contents of the X-register to the
ADDRESS (not the contents) specified by the given indirect address; use the result as the address of
the true operand for this instruction; JuMP to the address contained in the word-sized location
accessed via the true operand.<br><br>
Example:  .WORD SUB1,SUB2,SUB3<br>
&nbsp; ...<br>
&nbsp; LDA value &nbsp; &nbsp; ;assume that &quot;value&quot;<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;contains 0, 1, or 2<br>
&nbsp; ASL A &nbsp; &nbsp; &nbsp; &nbsp; ;double the value<br>
&nbsp; TAX &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;... to X-register<br>
&nbsp; JMP (TABLE,X)  ;and go to SUB1,SUB2<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;SUB3 depending of &quot;value&quot;
</a></td></tr></table><br></td></tr></table>

<table align="center">
<tr><td align="center"><a style="color: #0404a0; font-size: x-small; font-family: system; font-weight: normal; font-style: normal; text-decoration: none; text-align: center;" href="mac65.htm#chapter7"><img src="decor/l_arrow.gif" alt="Chapter 7" border=0 height=13 width=13>
chapter 7&nbsp; &nbsp; &nbsp; &nbsp;</a></td>
<td><a style="color: #0404a0; font-size: x-small; font-family: system; font-weight: normal; font-style: normal; text-decoration: none; text-align: center;" href="mac65.htm#tableofcontents"><img src="decor/u_arrow.gif" alt="Table of Contents" border=0 height=13 width=13>
Table of Contents</a></td></tr></table>
<hr width="96%" size="1" color="#FFFFFF"><br>

<table width="100%"><tr><td align="right"><table width="98%"><tr><td bgcolor="#f0f0b0">
<a name="allnew" style="font-size: large; font-family: Arial Black; color: #a62626; font-weight: bold;">
Section 7.3</a>
<a style="font-size: medium; font-family: Courier New; color: #4646b6; font-weight: bold;">
&nbsp; (ALL-NEW 65C02 Instructions)</a><br><br>

<table width="78%" align="center" bgcolor="#e0e0a0">
<tr><td><a style="color: #1414c0; font-size: x-small; font-family: Courier; font-style: normal;" href="mac65.htm#bra">
7.3.1&nbsp; BRA </a></td>
<td> &nbsp; &nbsp; </td>
<td><a style="color: #1414c0; font-size: x-small; font-family: Courier; font-style: normal; " href="mac65.htm#deaina">
7.3.2&nbsp; DEA, INA </a></td>
<td> &nbsp; &nbsp; </td>
<td><a style="color: #1414c0; font-size: x-small; font-family: Courier; font-style: normal;" href="mac65.htm#phxphyplxply">
7.3.3&nbsp; PHX, PHY, PLX, PLY </a></td></tr>
<tr>
<td><a style="color: #1414c0; font-size: x-small; font-family: Courier; font-style: normal;" href="mac65.htm#stz">
7.3.4&nbsp; STZ</a></td>
<td> &nbsp; &nbsp; </td>
<td><a style="color: #1414c0; font-size: x-small; font-family: Courier; font-style: normal;" href="mac65.htm#trbtsb">
7.3.5&nbsp; TRB, TSB</a></td>
<td> &nbsp; &nbsp; </td>
</tr></table><br>

<a style="font-size: small; font-family: Courier; color: #080850; font-weight: bold;">
We detail here, in what we hope are logical groupings, the 65C02 instructions which are
truly &quot;new&quot; to the 6502 world.
</a></td></tr></table><br></td></tr></table>

<table align="center">
<tr><td align="center"><a style="color: #0404a0; font-size: x-small; font-family: system; font-weight: normal; font-style: normal; text-decoration: none; text-align: center;" href="mac65.htm#chapter7"><img src="decor/l_arrow.gif" alt="Chapter 7" border=0 height=13 width=13>
chapter 7&nbsp; &nbsp; &nbsp; &nbsp;</a></td>
<td><a style="color: #0404a0; font-size: x-small; font-family: system; font-weight: normal; font-style: normal; text-decoration: none; text-align: center;" href="mac65.htm#tableofcontents"><img src="decor/u_arrow.gif" alt="Table of Contents" border=0 height=13 width=13>
Table of Contents</a></td></tr></table>
<hr width="96%" size="1" color="#FFFFFF"><br>

<table width="100%"><tr><td align="right"><table width="98%"><tr><td bgcolor="#f0f0b0">
<a name="bra" style="font-size: large; font-family: Arial Black; color: #a62626; font-weight: bold;">
Section 7.3.1</a>
<a style="font-size: medium; font-family: Courier New; color: #4646b6; font-weight: bold;">
&nbsp; (BRA)</a><br><br>
<a style="font-size: small; font-family: Courier; color: #080850; font-weight: bold;">
Mnemonic: BRA<br>
Read as: &nbsp;BRanch (Always)<br>
Format: &nbsp; BRA addr<br>
&nbsp; where addr must be in the range *-126 to *+129<br>
&nbsp;(* is the current value of the location counter)<br><br>
BRA joins the Branch family (BNE, BEQ, BMI, etc) and adds the powerful capability of ALWAYS branching.
It thus becomes equivalent to a JMP instruction with the advantage that it occupies one less byte in
memory and is inherently relocatable. Its address range is restricted in a fashion identical with the
other members of the &quot;branch&quot; family.
</a></td></tr></table><br></td></tr></table>

<table align="center">
<tr><td align="center"><a style="color: #0404a0; font-size: x-small; font-family: system; font-weight: normal; font-style: normal; text-decoration: none; text-align: center;" href="mac65.htm#allnew"><img src="decor/l_arrow.gif" alt="Section 7.3" border=0 height=13 width=13>
Section 7.3&nbsp; &nbsp; &nbsp; &nbsp;</a></td>
<td><a style="color: #0404a0; font-size: x-small; font-family: system; font-weight: normal; font-style: normal; text-decoration: none; text-align: center;" href="mac65.htm#tableofcontents"><img src="decor/u_arrow.gif" alt="Table of Contents" border=0 height=13 width=13>
Table of Contents</a></td></tr></table>
<hr width="96%" size="1" color="#FFFFFF"><br>

<table width="100%"><tr><td align="right"><table width="98%"><tr><td bgcolor="#f0f0b0">
<a name="deaina" style="font-size: large; font-family: Arial Black; color: #a62626; font-weight: bold;">
Section 7.3.2</a>
<a style="font-size: medium; font-family: Courier New; color: #4646b6; font-weight: bold;">
&nbsp; (DEA and INA)</a><br><br>
<a style="font-size: small; font-family: Courier; color: #080850; font-weight: bold;">
Mnemonic:DEA<br>
&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; INA<br>
Read as: DEcrement Accumulator<br>
&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; Increment Accumulator<br>
Format: &nbsp;DEA<br>
&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; INA<br><br>
These simple instructions add a capability long lacking in the 6502. Until now, if you wished to
change the contents of the accumulator by one, you had to either use TAX/INX/TXA (or something similar)
or CLC/ADC (or SEC/SBC), three byte substitutes for what should (and now is) a simple byte instruction.
Processor status flags (ie N and Z), timing, etc, are all identical to the very similar INX/INY/DEX/DEY
set of instructions.
</a></td></tr></table><br></td></tr></table>

<table align="center">
<tr><td align="center"><a style="color: #0404a0; font-size: x-small; font-family: system; font-weight: normal; font-style: normal; text-decoration: none; text-align: center;" href="mac65.htm#allnew"><img src="decor/l_arrow.gif" alt="Section 7.3" border=0 height=13 width=13>
Section 7.3&nbsp; &nbsp; &nbsp; &nbsp;</a></td>
<td><a style="color: #0404a0; font-size: x-small; font-family: system; font-weight: normal; font-style: normal; text-decoration: none; text-align: center;" href="mac65.htm#tableofcontents"><img src="decor/u_arrow.gif" alt="Table of Contents" border=0 height=13 width=13>
Table of Contents</a></td></tr></table>
<hr width="96%" size="1" color="#FFFFFF"><br>

<table width="100%"><tr><td align="right"><table width="98%"><tr><td bgcolor="#f0f0b0">
<a name="phxphyplxply" style="font-size: large; font-family: Arial Black; color: #a62626; font-weight: bold;">
Section 7.3.3</a>
<a style="font-size: medium; font-family: Courier New; color: #4646b6; font-weight: bold;">
&nbsp; (PHX, PHY, PLX, PLY)</a><br><br>
<a style="font-size: small; font-family: Courier; color: #080850; font-weight: bold;">
Mnemonic:PHX<br>
&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;  PHY<br>
&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;  PLX<br>
&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;  PLY<br>
Read as: PusH X onto CPU stack<br>
&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; PusH Y onto CPU stack<br>
&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;  PulL X from CPU stack<br>
&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; PulL Y from CPU stack<br>
format: &nbsp;PHX<br>
&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; PHY<br>
&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; PLX<br>
&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; PLY<br><br>
Again, these instructions are provided as short cuts for the cumbersome sequences necessary on the
standard 6502. As an example, PHX can replace a sequence of instructions as complex as this:<br>
&nbsp; STA temp<br>
&nbsp; TXA<br>
&nbsp; PHA<br>
&nbsp; LDA temp<br><br>
By giving you direct access to the stack from the X and Y registers, it is possible and desirable to
write more compact and more relocatable code. Processor status flag usage, timings, etc, are identical
to the very similar PHA and PLA instructions.
</a></td></tr></table><br></td></tr></table>

<table align="center">
<tr><td align="center"><a style="color: #0404a0; font-size: x-small; font-family: system; font-weight: normal; font-style: normal; text-decoration: none; text-align: center;" href="mac65.htm#allnew"><img src="decor/l_arrow.gif" alt="Section 7.3" border=0 height=13 width=13>
Section 7.3&nbsp; &nbsp; &nbsp; &nbsp;</a></td>
<td><a style="color: #0404a0; font-size: x-small; font-family: system; font-weight: normal; font-style: normal; text-decoration: none; text-align: center;" href="mac65.htm#tableofcontents"><img src="decor/u_arrow.gif" alt="Table of Contents" border=0 height=13 width=13>
Table of Contents</a></td></tr></table>
<hr width="96%" size="1" color="#FFFFFF"><br>

<table width="100%"><tr><td align="right"><table width="98%"><tr><td bgcolor="#f0f0b0">
<a name="stz" style="font-size: large; font-family: Arial Black; color: #a62626; font-weight: bold;">
Section 7.3.4</a>
<a style="font-size: medium; font-family: Courier New; color: #4646b6; font-weight: bold;">
&nbsp; (STZ)</a><br><br>
<a style="font-size: small; font-family: Courier; color: #080850; font-weight: bold;">
Mnemonic:STZ<br>
Read As: STore Zero<br>
Format: &nbsp;STZ absolute<br>
&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; STZ absolute,X<br>
&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; STZ zeropage<br>
&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; STZ zeropage,X<br><br>
Yet another short cut, STZ simply replaces the sequence<br>
&nbsp; LDA #0<br>
&nbsp; STA address<br>
with the difference that it does not affect the contents of the A register. In fact, to properly
simulate this instruction on an ordinary 6502, the following code would be needed in the general case:
&nbsp; PHA<br>
&nbsp; LDA #0<br>
&nbsp; STA address<br>
&nbsp; PLA
</a></td></tr></table><br></td></tr></table>

<table align="center">
<tr><td align="center"><a style="color: #0404a0; font-size: x-small; font-family: system; font-weight: normal; font-style: normal; text-decoration: none; text-align: center;" href="mac65.htm#allnew"><img src="decor/l_arrow.gif" alt="Section 7.3" border=0 height=13 width=13>
Section 7.3&nbsp; &nbsp; &nbsp; &nbsp;</a></td>
<td><a style="color: #0404a0; font-size: x-small; font-family: system; font-weight: normal; font-style: normal; text-decoration: none; text-align: center;" href="mac65.htm#tableofcontents"><img src="decor/u_arrow.gif" alt="Table of Contents" border=0 height=13 width=13>
Table of Contents</a></td></tr></table>
<hr width="96%" size="1" color="#FFFFFF"><br>

<table width="100%"><tr><td align="right"><table width="98%"><tr><td bgcolor="#f0f0b0">
<a name="trbtsb" style="font-size: large; font-family: Arial Black; color: #a62626; font-weight: bold;">
Section 7.3.5</a>
<a style="font-size: medium; font-family: Courier New; color: #4646b6; font-weight: bold;">
&nbsp; (TRB and TSB)</a><br><br>
<a style="font-size: small; font-family: Courier; color: #080850; font-weight: bold;">
Mnemonic:TRB<br>
&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; TSB<br>
Read As: Test and Rest Bits<br>
&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; Test and Set Bits<br><br>
Format: &nbsp;TRB absolute<br>
&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; TRB zeropage<br>
&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; TSB absolute<br>
&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; TSB zeropage<br><br>
These instructions have many uses, not the least of which would be synchronization of background and
foreground (interrupt-driven) routines. In Boolean terms, the instructions might be thought of thus:
&nbsp; TRB: Memory := (Not A) and Memory<br>
&nbsp; TSB: Memory := A or Memory<br>
In words, we might describe the operation of these instructions as follows:<br>
For TRB: The complement of the contents of the Accumulator is bit-wise- AND-ed with the contents of
the memory cell addressed by this instruction (either and absolute or zero-page location). The result
of this AND-ing is placed back in the addressed memory cell.<br>
For TSB: The contents of the Accumulator are bit-wise OR-ed with the contents of the memory cell
addressed by this instruction. The result of this OR-ing is placed back in the addressed memory cell.
If the result of the AND-ing or OR-ing is zero, the Zero processor status flag is set. The N and V
flags are set to the contents of the bits 6 and 7 (similar to the usage and results of the BIT
instruction) of the addressed memory cell as those contents were BEFORE the bit-wise operation took
place.<br>
Example: FLAG .BYTE 3<br>
&nbsp; &nbsp;&nbsp; &nbsp; &nbsp; TEST .BYTE $FF<br>
&nbsp; &nbsp;&nbsp; &nbsp; &nbsp;  ...<br>
&nbsp; &nbsp;&nbsp; &nbsp; &nbsp;  LDA #$FF<br>
&nbsp; &nbsp;&nbsp; &nbsp; &nbsp;  TRB FLAG &nbsp;;resets all bits!<br>
&nbsp; &nbsp;&nbsp; &nbsp; &nbsp;  ...<br>
&nbsp; &nbsp;&nbsp; &nbsp; &nbsp;  LDA #0<br>
&nbsp; &nbsp;&nbsp; &nbsp; &nbsp;  TSB TEST &nbsp;;just tests value
</a></td></tr></table><br></td></tr></table>
<table align="center">
<tr><td align="center"><a style="color: #0404a0; font-size: x-small; font-family: system; font-weight: normal; font-style: normal; text-decoration: none; text-align: center;" href="mac65.htm#allnew"><img src="decor/l_arrow.gif" alt="Section 7.3" border=0 height=13 width=13>
Section 7.3&nbsp; &nbsp; &nbsp; &nbsp;</a></td>
<td><a style="color: #0404a0; font-size: x-small; font-family: system; font-weight: normal; font-style: normal; text-decoration: none; text-align: center;" href="mac65.htm#tableofcontents"><img src="decor/u_arrow.gif" alt="Table of Contents" border=0 height=13 width=13>
Table of Contents</a></td></tr></table>
<hr width="96%" size="4" color="#FFFFFF"><br>

<table width="100%"><tr><td align="right"><table width="98%"><tr><td bgcolor="#f0f0b0">
<a name="chapter8" style="font-size: large; font-family: Arial; color: #366636; font-weight: bold;">
CHAPTER 8: &nbsp; </a>
<a style="font-size: large; font-family: Arial Black; color: #a62626; font-weight: bold;">
PROGRAMMING TECHNIQUES<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; WITH MAC/65<br>
</a></td></tr></table><br></td></tr></table>

<table align="center">
<tr><td align="center"><a style="color: #0404a0; font-size: x-small; font-family: system; font-weight: normal; font-style: normal; text-decoration: none; text-align: center;" href="mac65.htm#chapter7"><img src="decor/l_arrow.gif" alt="Chapter 7" border=0 height=13 width=13>
chapter 7&nbsp; &nbsp; &nbsp; &nbsp;</a></td>
<td><a style="color: #0404a0; font-size: x-small; font-family: system; font-weight: normal; font-style: normal; text-decoration: none; text-align: center;" href="mac65.htm#tableofcontents"><img src="decor/u_arrow.gif" alt="Table of Contents" border=0 height=13 width=13>
Table of Contents</a></td></tr></table>
<hr width="96%" size="1" color="#FFFFFF"><br>

<table width="100%"><tr><td align="right"><table width="98%"><tr><td bgcolor="#f0f0b0">
<a name="memorymacddt" style="font-size: large; font-family: Arial Black; color: #a62626; font-weight: bold;">
Section 8.1</a>
<a style="font-size: medium; font-family: Courier New; color: #4646b6; font-weight: bold;">
&nbsp; (Memory Usage by MAC/65 and DDT)</a><br><br>
<a style="font-size: small; font-family: Courier; color: #080850; font-weight: bold;">
The following memory locations are used by MAC/65 and/or DDT for the purposes shown:<br><br>
&nbsp; range of &nbsp; used by<br>
&nbsp; addresses &nbsp; MAC/65 DDT &nbsp; used for<br>
&nbsp; --------- &nbsp;------- --- &nbsp; --------<br>
&nbsp; $80-$AF &nbsp; &nbsp; yes &nbsp; &nbsp;yes &nbsp; pointers and temporaries<br>
&nbsp; $B0-$D3 &nbsp; &nbsp; yes &nbsp; &nbsp;no &nbsp; &nbsp;pointers and temporaries<br>
&nbsp; $D4-$FF &nbsp; &nbsp; yes &nbsp; &nbsp;yes &nbsp; floating point registers, etc<br>
&nbsp; $100-$1FF &nbsp; yes &nbsp; &nbsp;yes &nbsp; normal 6502 CPU stack<br>
&nbsp; $3FD-$47F &nbsp;&nbsp; no &nbsp; &nbsp;yes &nbsp; buffers and display area<br>
&nbsp; $480-$57F &nbsp; yes &nbsp; &nbsp;yes &nbsp; buffers and work area<br>
&nbsp; $580-$67F &nbsp; yes &nbsp; &nbsp;no &nbsp; &nbsp;input buffers, etc<br>
&nbsp; &quot;size&quot; &nbsp; &nbsp; &nbsp;yes &nbsp; &nbsp;* &nbsp; &nbsp; programs text, etc<br><br>
Note that &quot;size&quot; refers to the memory area delineated by the lowest and middle number
displayed when the &quot;SIZE&quot; command is used form the MAC/65 editor. The * in DDT column
indicates that DDT saves MAC/65's zero page memory (and other, related, locations) in the area
actually shown to be part of the &quot;size&quot; memory.<br>The worst implication of the memory map
above (especially for Atari BASIC users) is that page 6 is NOT completely available to you. Since many
magazine articles assume that page 6 is available, they will not run AS IS under MAC/65 and DDT. But
see the next section for methods to use if you MUST use page 6.
</a></td></tr></table><br></td></tr></table>

<table align="center">
<tr><td align="center"><a style="color: #0404a0; font-size: x-small; font-family: system; font-weight: normal; font-style: normal; text-decoration: none; text-align: center;" href="mac65.htm#chapter8"><img src="decor/l_arrow.gif" alt="Chapter 8" border=0 height=13 width=13>
chapter 8&nbsp; &nbsp; &nbsp; &nbsp;</a></td>
<td><a style="color: #0404a0; font-size: x-small; font-family: system; font-weight: normal; font-style: normal; text-decoration: none; text-align: center;" href="mac65.htm#tableofcontents"><img src="decor/u_arrow.gif" alt="Table of Contents" border=0 height=13 width=13>
Table of Contents</a></td></tr></table>
<hr width="96%" size="1" color="#FFFFFF"><br>

<table width="100%"><tr><td align="right"><table width="98%"><tr><td bgcolor="#f0f0b0">
<a name="assemblingwithoffset" style="font-size: large; font-family: Arial Black; color: #a62626; font-weight: bold;">
Section 8.2</a>
<a style="font-size: medium; font-family: Courier New; color: #4646b6; font-weight: bold;">
&nbsp; (Assembling With An Offset: .SET 6)</a><br><br>
<a style="font-size: small; font-family: Courier; color: #080850; font-weight: bold;">
In </a>
<a style="font-size: small; font-family: Arial; color: #040480; text-decoration: underline;" href="mac65.htm#.set">
Section 4.18 </a>
<a style="font-size: small; font-family: Courier; color: #080850; font-weight: bold;">
, we noted that the assembler directive &quot;.SET 6,value&quot; could be used to specify an additive
offset for the storage address vis-a-vis the location counter address. In this section, we present a
method for using this capability in a practical sense. Let us assume that we wish to assemble a small
program which will reside in page 6 ($600 thru $6FF). The program which we will assemble is presented
here:<br><br>
&nbsp; 10 &nbsp; *= $600<br>
&nbsp; 20 COLOR4 = $2C8<br>
&nbsp; 30 ;<br>
&nbsp; 40 START<br>
&nbsp; 50 &nbsp; PLA &nbsp; &nbsp;&nbsp; ;remove count of parameters<br>
&nbsp; 60 &nbsp; CMP #0 &nbsp; ;any parameters?<br>
&nbsp; 70 &nbsp; BEQ * &nbsp;&nbsp; ;if yes, loop forever<br>
&nbsp; 80 &nbsp; LDA COLOR4 ;get current background color<br>
&nbsp; 90 &nbsp; CLC<br>
&nbsp; 100 &nbsp;ADC #$10 ;change to next hue<br>
&nbsp; 110 &nbsp;STA COLOR4 ;...by changing shadow register<br>
&nbsp; 120 &nbsp;INC COUNT ;and count the number of times<br>
&nbsp; 130 &nbsp;RTS<br>
&nbsp; 140 COUNT .BYTE 0 ;just a simple counter<br>
&nbsp; 150 &nbsp;.END<br><br>
If you assemble this routine, you should get an error free assembly. And those of you who are BASIC
users will recognize this as a routine callable from Atari BASIC, thanks to the PLA and check on
number of parameters at the beginning. But it is designed to reside in page 6.  What can we do?  Answer: simply add the following
two lines to the listing:<br><br>
&nbsp; 12  .OPT OBJ &nbsp; &nbsp; ;we do want object code<br>
&nbsp; 14  .SET 6,$3000 ;and we will offset<br><br>
Now, if you assemble this code, you will notice that the addresses shown start at $3600. And, indeed,
the assembly is placing the code in memory at the addresses shown. But look at line 120. Notice that
the object code generated does NOT show that location $3612 is being incremented! Instead, location
$0612 is affected. Also note that in the symbol table listing START is shown to be at location $0600
and COUNT at $0612. Now use the &quot;DDT&quot; command to enter DDT. From DDT, enter the command<br>
&nbsp; M 360006000080 &lt;RETURN&gt;<br>
which will move $80 (128) bytes from location $3600 to location $0600. Use the command<br>
&nbsp; * 0600 &lt;RETURN&gt;<br>
to view the contents of locations $0600 and beyond. Use the up and down arrows (remember, WITHOUT
pushing CTRL) to view the code. Lo and behold, your code has been successfully deposited where you
wanted it, waiting for you to debug. Some final notes on this subject: MAC/65 will generate this
&quot;offset&quot; kind of code either directly to memory (as we did here) or to an object file (on
disk, presumably). When the file is reloaded (via MAC/65's BLOAD command or via some load command from
the DOS you are using), it will be loaded at the address shown in the listing. It is your
responsibility to then somehow move it to the desired location. The technique is not necessarily easy,
but using these methods you can overwrite DOS or even produce code designed to run in the cartridge
space. In the latter case, you may wish to use a negative offset with .SET 6. This is perfectly legal
and reasonable.
</a></td></tr></table><br></td></tr></table>

<table align="center">
<tr><td align="center"><a style="color: #0404a0; font-size: x-small; font-family: system; font-weight: normal; font-style: normal; text-decoration: none; text-align: center;" href="mac65.htm#chapter8"><img src="decor/l_arrow.gif" alt="Chapter 8" border=0 height=13 width=13>
chapter 8&nbsp; &nbsp; &nbsp; &nbsp;</a></td>
<td><a style="color: #0404a0; font-size: x-small; font-family: system; font-weight: normal; font-style: normal; text-decoration: none; text-align: center;" href="mac65.htm#tableofcontents"><img src="decor/u_arrow.gif" alt="Table of Contents" border=0 height=13 width=13>
Table of Contents</a></td></tr></table>
<hr width="96%" size="1" color="#FFFFFF"><br>

<table width="100%"><tr><td align="right"><table width="98%"><tr><td bgcolor="#f0f0b0">
<a name="makingmacfaster" style="font-size: large; font-family: Arial Black; color: #a62626; font-weight: bold;">
Section 8.3</a>
<a style="font-size: medium; font-family: Courier New; color: #4646b6; font-weight: bold;">
&nbsp; (Making MAC/65 Even Faster)</a><br><br>
<a style="font-size: small; font-family: Courier; color: #080850; font-weight: bold;">
If you .INCLUDE a file consisting ONLY of equates and/or macro definitions (NOT macro calls!), there
is a technique you can use which will speed up assembly somewhat. In particular, since equates need be
made only once and macros need be only defined once, there is no reason to read such .INCLUDED files
on pass two. The following code shows a workable technique:<br><br>
&nbsp; &nbsp; *= 0<br>
&nbsp; PASS .= PASS+1 &nbsp; ;do this only once per assembly<br>
&nbsp; &nbsp; .IF PASS=1<br>
&nbsp; &nbsp; .INCLUDE #D:equatesfile<br>
&nbsp; &nbsp; .ENDIF<br>
&nbsp; &nbsp; *= beginning<br><br>
Why this works: Normally, an undefined label has a value of zero.  The &quot;.=&quot; directive,
however, causes a mildly strange thing to happen: an undefined label used on the right side of
&quot;.=&quot; takes on the current value of the location counter. Hence the need for the &quot;*= 0&quot;
line at the beginning of the above example. In any case, thanks to this mechanism, the first time the
second line is assembled (in pass 1); PASS takes on a value of 1 (of course, the line also generates an
&quot;undefined label&quot; error, but such errors are not printed in pass 1). The next time it is
assembled, PASS receives a value of 2. Simple and neat. Note that if the &quot;.=&quot; used in the
second line above is placed ahead of any &quot;*=&quot; ( &quot;.ORG&quot;) lines, then the first line
shown is not needed, since the location counter is assumed to start at zero unless told otherwise.
</a></td></tr></table><br></td></tr></table>

<table align="center">
<tr><td align="center"><a style="color: #0404a0; font-size: x-small; font-family: system; font-weight: normal; font-style: normal; text-decoration: none; text-align: center;" href="mac65.htm#chapter8"><img src="decor/l_arrow.gif" alt="Chapter 8" border=0 height=13 width=13>
chapter 8&nbsp; &nbsp; &nbsp; &nbsp;</a></td>
<td><a style="color: #0404a0; font-size: x-small; font-family: system; font-weight: normal; font-style: normal; text-decoration: none; text-align: center;" href="mac65.htm#tableofcontents"><img src="decor/u_arrow.gif" alt="Table of Contents" border=0 height=13 width=13>
Table of Contents</a></td></tr></table>
<hr width="96%" size="4" color="#FFFFFF"><br>

<table width="100%"><tr><td align="right"><table width="99%"><tr><td>
<a name="chapter9" style="font-size: large; font-family: Arial; color: #366636; font-weight: bold;">
CHAPTER 9: &nbsp; </a>
<a style="font-size: large; font-family: Arial Black; color: #a62626; font-weight: bold;">
ERROR DESCRIPTIONS</a><br><br>
<a style="font-size: small; font-family: Courier; color: #121212; font-weight: bold;">
When an error occurs, the system will print<br><br>
&nbsp; &nbsp; &nbsp; *** ERROR -<br><br>
followed by the error number (unless the error was generated with the .ERROR assembler directive)
and, for most errors, a descriptive message about the error.<br><br>
Note: The assembler will print up to 3 errors per line.<br><br>
The format used in the listing of descriptions which follows is simply ERROR NUMBER, ERROR MESSAGE,
description and possible causes.<br><br>
1 - MEMORY FULL<br><br>
All user memory has been used. If issued by the Editor, no more source lines can be entered. If
issued by the Assembler, no more labels or macros can be defined.<br>
NOTE: If memory full occurs during assembly and the source code is located in memory, SAVE the
source to disk, type NEW, and assemble from the disk instead. Now the assembler can use all of the
space formerly occupied by your source for macro and symbol tables, etc.<br><br>
2 - INVALID DELETE<br><br>
Either the first line number is not present in memory, or the second line number is less than the
first line number.<br><br>
3 - BRANCH RANGE<br><br>
A relative instruction references an address displacement greater than 129 or less than 126 from
the current address.<br><br>
4 - NOT Z-PAGE / IMMEDIATE MODE<br><br>
An expression for indirect addressing or immediate addressing has resolved to a value greater
than 255 ($FF).<br><br>
5 - UNDEFINED<br><br>
The Assembler has encountered a undefined label.<br><br>
6 - EXPRESSION TOO COMPLEX<br><br>
The Assembler's operator stack has overflowed. If you must use an expression as complex as the one
which generated the error, try breaking it down using temporary SET labels (i.e., using &quot;.=&quot;).<br><br>
7 - DUPLICATE LABEL<br><br>
The Assembler has encountered a label in the label column which has already been defined.<br><br>
8 - BUFFER OVERFLOW<br><br>
The Editor syntax buffer has overflowed. Shorten the input line.<br><br>
9 - CONDITIONAL NESTING<br><br>
The .IF-.ELSE-.ENDIF construct is not properly nested. Since MAC/65 cannot detect excess .ENDIFs,
the problem must be an EXTRA .ELSE or .ENDIF instead.<br><br>
10 - VALUE &gt; 255<br><br>
The result of an expression exceeded 255 when only one byte was needed and allowed.<br><br>
11 - CONDITIONAL STACK<br><br>
The .IF-.ELSE-.ENDIF nesting has gone past the number allowed. Conditionals may be nested a
maximum of 14 levels.<br><br>
12 - NESTED MACRO DEFINITION<br><br>
The Assembler encountered a second .MACRO directive before the .ENDM directive. This error will
abort assembly.<br><br>
13 - OUT OF PHASE<br><br>
The address generated in pass 2 for a label does not match the address generated in pass 1.
A common cause of this error are forward referenced addresses. If using conditional assembly
(with or without macros), this error can result from a .IF evaluating true during one pass and
false during the other.<br><br>
14 - *= EXPRESSION UNDEFINED<br><br>
The program counter was forward referenced.<br><br>
15 - SYNTAX OVERFLOW<br><br>
The Editor is unable to syntax the source line. Simplify complex expressions or break the line into
multiple lines.<br><br>
16 - DUPLICATE MACRO NAME<br><br>
An attempt was made to define more than one Macro with the same name. Only the first definition
will be valid.<br><br>
17 - LINE # >65535<br><br>
The Editor cannot accept line numbers greater than 65535.<br><br>
18 - MISSING .ENDM<br><br>
In a Macro definition, an EOF was reached before the corresponding .ENDM terminator. Macro
definitions cannot cross file boundaries. This error will abort assembly.<br><br>
19 - NO ORIGIN<br><br>
The *= directive is missing from the program.<br>
Note: This error will only occur if the assembler is writing object code.<br><br>
20 - NUM/REN OVERFLOW<br><br>
On the REN or NUM command, the line number generated was greater than 65535. If REN issued the
error, entering a valid REN will correct the problem. If NUM issued the error, the auto-numbering
will be aborted.<br><br>
21 - NESTED .INCLUDE<br><br>
An included file cannot itself contain an .INCLUDE directive.<br><br>
22 - LIST OVERFLOW<br><br>
The list output buffer has exceeded 255 characters. Use smaller numbers in the .TAB directive.<br><br>
23 - NOT SAVE FILE<br><br>
An attempt was made to load or assemble a file not created with the SAVE command.<br><br>
24 - LOAD TOO BIG<br><br>
The load file cannot fit into memory.<br><br>
25 - NOT BINARY SAVE<br><br>
The file is not in a valid binary (memory image, assembler object, etc.) format.<br><br>
27 - INVALID .SET<br><br>
The first dcnum is a .SET specified a non-existant Assembler system parameter.<br><br>
30 - UNDEFINED MACRO<br><br>
The Assembler encountered a reference to a Macro which is not defined. Macros must first be
defined before they can be expanded.<br><br>
31 - MACRO NESTING<br><br>
The maximum level of Macro nesting has exceeded 14 levels.<br><br>
32 - BAD PARAMETER<br><br>
In a Macro expansion, a reference was made to a nonexistent parameter, or the parameter number
specified was greater than 63.<br><br>
128 -255 [operating system errors]<br><br>
Error numbers over 127 are generated in operating system. Refer to the DOSXL manual for detailed
descriptions of such errors and their causes.<br><br>
<br><br></a></td></tr></table></td></tr></table>

<table align="center">
<tr><td align="center"><a style="color: #0404a0; font-size: x-small; font-family: system; font-weight: normal; font-style: normal; text-decoration: none; text-align: center;" href="mac65.htm#chapter8"><img src="decor/l_arrow.gif" alt="Chapter 8" border=0 height=13 width=13>
chapter 8&nbsp; &nbsp; &nbsp; &nbsp;</a></td>
<td><a style="color: #0404a0; font-size: x-small; font-family: system; font-weight: normal; font-style: normal; text-decoration: none; text-align: center;" href="mac65.htm#tableofcontents"><img src="decor/u_arrow.gif" alt="Table of Contents" border=0 height=13 width=13>
Table of Contents</a></td></tr></table>
<hr width="96%" size="4" color="#FFFFFF"><br>

<table width="100%"><tr><td align="right"><table width="99%"><tr><td>
<a name="appendixa" style="font-size: large; font-family: Arial; color: #366636; font-weight: bold;">
APPENDIX A</a><br><br>
<a style="font-size: x-small; font-family: cursive; color: #121212;">
Actually, the bulk of this appendix is contained on your master MAC/65 diskette in the form of a
system macro file. This appendix is here simply to alert you to the existence of the file and to
give a brief description of macros available. We would suggest that you use MAC/65 to LOAD and LIST
(to a printer or the screen) the file IOMAC.LIB.<br><br>
May we suggest that you adopt a naming convention for you MAC/65 files, both SAVEd and LISTed,
that does not conflict with anything? We use the following extensions (though you are obviously
free to rename our files to your own preferences):<br><br>
&nbsp; .M65 MAC/65 SAVEd files<br>
&nbsp; .ASM MAC/65 LISTed files<br>
&nbsp; .LIB MAC/65 SAVEd libraries<br><br>
(note that C/65 insists on its runtime library being named RUNTIME.LIB, hence this convention)<br><br>
In any case, the macros available in IOMAC.LIB are:<br><br>
OPEN chan,aux1,aux2,filename<br><br>
Opens the given filename on the given channel using aux1 and aux2 as per DOSXL specifications.<br><br>
PRINT chan [,buffer[,length]]<br><br>
If no buffer given, prints just a CR on chan. If no length given, length assumed to be 255 or
position of CR, which ever is smaller. Buffer may be literal string, in which case length is
ignored if given.<br><br>
INPUT chan,buffer [,length]<br><br>
If no length given, defaults to 255 bytes.<br><br>
BGET chan,buffer,length<br><br>
Binary read, a la BASIC XL, of length number of bytes into the given buffer address.<br><br>
BPUT chan,buffer,length<br><br>
Binary write of length number of bytes from the given buffer address.<br><br>
CLOSE chan<br><br>
Closes the given file.<br><br>
XIO command,chan [,aux1,aux2][,filename]<br><br>
As described in </a>
<a style="font-size: small; font-family: Arial; color: #0404c0; text-decoration: underline;" href="mac65.htm#chapter5">
chapter 5 </a>
<a style="font-size: x-small; font-family: cursive; color: #121212;"><br><br>
NOTES:<br><br>
&quot;chan&quot; may be a literal channel number (0 through 7) or a memory location
containing a channel number (0 through 7).<br><br>
&quot;aux1&quot;, &quot;aux2&quot;, &quot;length&quot; and &quot;command&quot; may all be either
literal numbers (0 to 255) or memory locations.<br><br>
&quot;filename&quot; may be either a literal string (e.g., &quot;D:FILE1.DAT&quot;) or a memory
location, the latter assumed to be the address of the start of the filename string.<br><br>
Where memory locations are given instead of literals, they must be non-zero page locations which
are defined BEFORE their usage in the macro(s). The following example will NOT work properly!! :<br><br>
&nbsp; PRINT 3,MESSAGE1 ; WRONG!<br>
&nbsp; ...<br>
&nbsp; MESSAGE1 .BYTE &quot;This WON'T WORK !!! &quot;<br><br>
These macros are useful instruments, but they really are meant only as examples, to show you what
you can do with MAC/65. Please feel free to study them and change them as you need.
<br><br></a></td></tr></table></td></tr></table>
<table align="center">
<tr><td align="center"><a style="color: #0404a0; font-size: x-small; font-family: system; font-weight: normal; font-style: normal; text-decoration: none; text-align: center;" href="mac65.htm#chapter8"><img src="decor/l_arrow.gif" alt="Chapter 8" border=0 height=13 width=13>
chapter 8&nbsp; &nbsp; &nbsp; &nbsp;</a></td>
<td><a style="color: #0404a0; font-size: x-small; font-family: system; font-weight: normal; font-style: normal; text-decoration: none; text-align: center;" href="mac65.htm#topofpage"><img src="decor/u_arrow.gif" alt="Top of Page" border=0 height=13 width=13>
Top of Page</a></td></tr></table>
<hr width="96%" size="4" color="#FFFFFF"><br>
</body></html>

